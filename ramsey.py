#!/usr/bin/env python
# coding: utf-8

# number of total vertices, 6 for R(3,3)=<6>
VERTICES = 6
# number of edges, = 1 + 2 + ... + VERTICES
EDGES = (VERTICES * (VERTICES - 1)) >> 1
# number of vertices mutually monochromatic, 3 for R(<3>,3)=6
TEST_VERTICES = 3
# quick monochromatic checking, = 1 + 2 + ... + TEST_VERTICES
# if abs(SUM(color)) = TEST_EDGES: monochromatic
TEST_EDGES = (TEST_VERTICES * (TEST_VERTICES - 1)) >> 1

# used in test_edges recursion
offset = 0
non_monochromatic_count = 0
# edge_id -> [vertex_id_1, vertex_id_2]
edge_vertices = []
# edge_id -> color
edge_colors = []
# [vertex_id_1][vertex_id_2] -> edge_id
vertex_edges = []
# combinations to test (generated by function "combination")
vertex_combinations = []

# Recursion to test all vertices with color -1 and +1, total 2^VERTICES cases
def test_edges():
    global offset, non_monochromatic_count, edge_colors, vertex_edges, vertex_combinations
    if offset < EDGES:
        edge_colors[offset] = -1
        offset += 1
        test_edges()
        edge_colors[offset - 1] = 1
        test_edges()
        offset -= 1
        return
    # Test if a given number of vertices are in same color
    for c in vertex_combinations:
        color = 0
        for i in range(TEST_VERTICES):
            for j in range(i):
                color += edge_colors[vertex_edges[c[j]][c[i]]]
        if abs(color) == TEST_EDGES:
            return
    print(edge_colors)
    non_monochromatic_count += 1

# Recursion C(n, k)=C(n-1,k-1)+C(n-1,k)
def combination(n, k):
    if k == 0:
        return [[]]
    if k == n:
        return [list(range(k))]
    result = combination(n - 1, k - 1)
    for item in result:
        item.append(n - 1)
    return result + combination(n - 1, k)

# Init edge_vertices, edge_colors and vertex_edges
for i in range(VERTICES):
    for j in range(i):
        edge_vertices.append([j, i])
edge_colors = [0] * EDGES
vertex_edges = [[0] * VERTICES for i in range(VERTICES)]
for i in range(EDGES):
    pair = edge_vertices[i]
    vertex_edges[pair[0]][pair[1]] = i
vertex_combinations = combination(VERTICES, TEST_VERTICES)
# Check if vertex_edges and vertex_combinations is okay
print("vertext_edges =", vertex_edges)
print("vertex_combinations =", vertex_combinations)

test_edges()
if non_monochromatic_count == 0:
    print("Monochromatic cliques found in all cases")