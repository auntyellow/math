from math import sqrt, inf
from scipy.optimize import minimize
from sympy import nsimplify

# https://math.stackexchange.com/q/4575195

def fun(X):
    r, s, t = X[0], X[1], X[2]
    non_negative_coeffs = [ \
        171376*r**2 - 423808*r*t + 480480*r + 118336*t**2 - 1320960*t - 582480, \
        -244768*r**2 - 847616*r*t - 2348880*r + 236672*t**2 - 2641920*t - 4103280, \
        823232*r**2 - 2168576*r*t + 756960*r + 236672*t**2 - 5283840*t - 3494880, \
        -1406892*r**2 - 414864*r*t - 6763800*r + 355008*t**2 - 918480*t - 6480000, \
        -3017456*r**2 - 3676672*r*t - 16574160*r + 473344*t**2 - 9246720*t - 20516400, \
        1748720*r**2 - 5751680*r*t + 1036800*r + 591680*t**2 - 13870080*t - 7879680, \
        -1751248*r**2 + 1015144*r*t - 6976440*r + 236672*t**2 + 2414880*t - 6001200, \
        -8035224*r**2 - 427248*r*t - 30450480*r + 710016*t**2 - 1032000*t - 25920000, \
        -9663680*r**2 - 9191680*r*t - 40828800*r + 1183360*t**2 - 23116800*t - 38269440, \
        2609760*r**2 - 8586240*r*t + 1109760*r - 17172480*t - 8219520, \
        -932129*r**2 + 1415732*r*t - 3541380*r - 214484*t**2 + 2358120*t - 2880900, \
        -6166376*r**2 + 4233608*r*t - 22281240*r + 473344*t**2 + 7905120*t - 18003600, \
        -16795860*r**2 - 928800*r*t - 53901600*r + 1775040*t**2 - 3632640*t - 33519600, \
        -14191920*r**2 - 11888640*r*t - 44755200*r - 23777280*t - 32742720, \
        1586880*r**2 - 4953600*r*t + 1393920*r - 9907200*t - 3559680, \
        -190125*r**2 + 503100*r*t - 760500*r - 332820*t**2 + 1006200*t - 760500, \
        -1864258*r**2 + 2831464*r*t - 7082760*r - 428968*t**2 + 4716240*t - 5761800, \
        -8690300*r**2 + 6370880*r*t - 26945520*r + 1183360*t**2 + 8008320*t - 14396400, \
        -15688440*r**2 + 1362240*r*t - 38976480*r + 2724480*t - 15199200, \
        -7675200*r**2 - 4953600*r*t - 20793600*r - 9907200*t - 10886400, \
        -190125*r**2 + 503100*r*t - 760500*r - 332820*t**2 + 1006200*t - 760500, \
        -1428520*r**2 + 2550760*r*t - 4778400*r - 739600*t**2 + 2734800*t - 1476000, \
        -3900900*r**2 + 2580000*r*t - 8998800*r + 5160000*t - 2394000, \
        -4899600*r**2 + 2476800*r*t - 9691200*r + 4953600*t + 216000, \
    ]
    non_positive_coeffs = [ \
        2237095*r**2 - 1944460*r*t + 4710300*r + 406780*t**2 - 1522200*t - 1894500, \
        9565542*r**2 - 4492296*r*t + 23005080*r - 133128*t**2 - 464400*t - 772200, \
        10562615*r**2 - 6765620*r*t + 20564700*r + 1146380*t**2 - 8797800*t - 5854500, \
        14058055*r**2 + 1130900*r*t + 37995060*r - 3143300*t**2 + 14835000*t + 3190860, \
        37398662*r**2 - 5352296*r*t + 84911640*r - 1316488*t**2 + 2549040*t + 6975000, \
        19123420*r**2 - 9671560*r*t + 35929200*r + 739600*t**2 - 16976400*t - 7002000, \
        7865208*r**2 + 9512976*r*t + 28688880*r - 4970112*t**2 + 30918720*t + 6036480, \
        40946924*r**2 + 23132968*r*t + 104534040*r - 5443456*t**2 + 58720800*t + 23506560, \
        54768680*r**2 + 5455840*r*t + 124075680*r - 1183360*t**2 + 15645120*t + 24343200, \
        15697500*r**2 - 7327200*r*t + 29766000*r - 14654400*t - 3258000, \
        372912*r**2 + 8371584*r*t + 8850840*r - 3905088*t**2 + 28369680*t + 4583520, \
        13154536*r**2 + 35789072*r*t + 48439920*r - 5206784*t**2 + 84417600*t + 23434560, \
        39133500*r**2 + 43653600*r*t + 102013440*r - 1775040*t**2 + 89082240*t + 40392720, \
        34610760*r**2 + 11269440*r*t + 82962720*r + 22538880*t + 27482400, \
        4899600*r**2 - 2476800*r*t + 9691200*r - 4953600*t - 216000, \
        -818176*r**2 + 2818048*r*t - 921120*r - 1893376*t**2 + 13209600*t + 1844640, \
        -2446496*r**2 + 18284288*r*t + 1850160*r - 3076736*t**2 + 48875520*t + 10498320, \
        1925840*r**2 + 36931840*r*t + 17927040*r - 1183360*t**2 + 78597120*t + 23417280, \
        10161360*r**2 + 27740160*r*t + 32843520*r + 55480320*t + 25041600, \
        7675200*r**2 + 4953600*r*t + 20793600*r + 9907200*t + 10886400, \
        -73984*r**2 + 374272*r*t - 1044480*r - 473344*t**2 + 2641920*t + 307440, \
        -1192448*r**2 + 3390464*r*t - 3563040*r - 946688*t**2 + 10567680*t + 1844640, \
        -3440720*r**2 + 9714560*r*t - 6071040*r - 591680*t**2 + 21795840*t + 4579200, \
        -3737760*r**2 + 11228160*r*t - 4465920*r + 22456320*t + 6019200, \
        -1586880*r**2 + 4953600*r*t - 1393920*r + 9907200*t + 3559680, \
    ]
    v = 0
    for coeff in non_positive_coeffs:
        v += coeff**2 if coeff > 0 else 0
    for coeff in non_negative_coeffs:
        v += coeff**2 if coeff < 0 else 0
    return v

def main():
    min = inf
    initial_guesses = [0]
    ratio = sqrt(2)
    for i in range(-20, 21):
        initial_guesses.append(-ratio**i)
        initial_guesses.insert(0, ratio**i)
    for r0 in initial_guesses:
        found = False
        for s0 in initial_guesses:
            for t0 in initial_guesses:
                print('Guess r0 =', r0, ', s0 =', s0, ', t0 =', t0, '...', flush = True)
                result = minimize(fun, [r0, s0, t0], \
                    method = 'Nelder-Mead', options={'xatol': 1e-10, 'maxiter': 1000})
                # necessary to check result.success ? 
                if result.fun < min:
                    min = result.fun
                    r, s, t = result.x[0], result.x[1], result.x[2]
                    print(result)
                    print(r0, '->', r, ',', s0, '->', s, ',', t0, '->', t)
                    if result.fun < 2e-10:
                        found = True
                        break
            if found:
                break
        if found:
            break
    print('r =', nsimplify(r, tolerance = 0.001))
    print('s =', nsimplify(s, tolerance = 0.001))
    print('t =', nsimplify(t, tolerance = 0.001))

if __name__ == '__main__':
    main()