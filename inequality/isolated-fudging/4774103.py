from sympy import *

# https://math.stackexchange.com/q/4774103

def cyc(f, vars):
    x, y, z = vars
    t = symbols('t', negative = False)
    return f.subs(z, t).subs(y, z).subs(x, y).subs(t, x)

def sum_cyc(f, vars):
    f1 = cyc(f, vars)
    return f + f1 + cyc(f1, vars)

def main():
    a, b, c = symbols('a, b, c', negative = False)
    x, y, z = symbols('x, y, z', negative = False)
    f0 = sqrt((24*a + 13)/(24*a + 13*b*c))
    # graph of f0(b=c)
    print('y =', factor(f0.subs(a, x).subs(b, (3 - x)/2).subs(c, (3 - x)/2)))
    print()

    m, n, p, q, r, s, t = symbols('m, n, p, q, r, s, t')
    n = 1
    g = n*a**2 + m*(b**2 + c**2) + p*(a*b + a*c) + q*b*c
    h = (n + 2*m)*(a**2 + b**2 + c**2)/3 + (2*p + q)*(a*b + a*c + b*c)/3
    print('sum_cyc(g/h) =', cancel(sum_cyc(g/h, (a, b, c))))
    f = f0**2 - (g/h)**2
    # f(1,1,1) = 0
    eq1 = Eq(f.subs(a, 1).subs(b, 1).subs(c, 1), 0)
    s32 = S(3)/2
    # f(3/2,3/2,0) = 0
    eq2 = Eq(f.subs(a, s32).subs(b, s32).subs(c, 0), 0)
    # f(3/2,0,3/2) = 0
    eq3 = Eq(f.subs(a, s32).subs(b, 0).subs(c, s32), 0)
    # f(0,3/2,3/2) = 0
    eq4 = Eq(f.subs(a, 0).subs(b, s32).subs(c, s32), 0)
    # f_a,b(1,1,1) = 0
    eq5 = Eq(diff(f.subs(c, 3 - a - b), a).subs(a, 1).subs(b, 1), 0)
    eq6 = Eq(diff(f.subs(c, 3 - a - b), b).subs(a, 1).subs(b, 1), 0)
    # f_a(3/2,3/2,0) = 0
    eq7 = Eq(diff(f.subs(c, 0).subs(b, 3 - a), a).subs(a, s32), 0)
    # f_a(3/2,0,3/2) = 0
    eq8 = Eq(diff(f.subs(b, 0).subs(c, 3 - a), a).subs(a, s32), 0)
    # f_b(0,3/2,3/2) = 0
    eq9 = Eq(diff(f.subs(a, 0).subs(c, 3 - b), b).subs(b, s32), 0)
    print('eq1:', factor(eq1)) # True
    print('eq2:', factor(eq2))
    print('eq3:', factor(eq3)) # = eq2
    print('eq4:', factor(eq4))
    print('eq5:', factor(eq5))
    print('eq6:', factor(eq6)) # True
    print('eq7:', factor(eq7))
    print('eq8:', factor(eq8)) # = eq7
    print('eq9:', factor(eq9)) # True
    mpq = solve([eq2, eq4, eq5, eq7], (m, p, q))
    print('mpq =', mpq)
    mpq = mpq[0]
    # graph of g/h(b=c)
    print('y =', factor((g/h).subs(m, mpq[0]).subs(p, mpq[1]).subs(q, mpq[2]).subs(a, x).subs(b, (3 - x)/2).subs(c, (3 - x)/2)))
    f = f.subs(m, mpq[0]).subs(p, mpq[1]).subs(q, mpq[2])
    x, y, z = symbols('x, y, z', negative = False)
    xyz = (x + y + z)/3
    a0, b0, c0 = x/xyz, y/xyz, z/xyz
    f = f.subs(a, a0).subs(b, b0).subs(c, c0)
    print('a + b + c =', factor(a0 + b0 + c0))
    u, v = symbols('u, v', negative = False)
    print('f(xyz) =', factor(f.subs(y, x*(1 + u)).subs(z, x*(1 + u + v))))
    # doesn't hold
    print('f(zyx) =', factor(f.subs(y, z*(1 + u)).subs(x, z*(1 + u + v))))
    print('f(4,4,1) =', f.subs(x, 4).subs(y, 4).subs(z, 1))
    print()

    # try cubic homogeneous polynomial
    g = n*a**3 + p*(a**2*b + a**2*c) + q*(a*b**2 + a*c**2) + r*(b**2*c + b*c**2) + s*(b**3 + c**3) + t*a*b*c
    h = (n + 2*s)*(a**3 + b**3 + c**3)/3 + (p + q + r)*(a**2*b + a**2*c + a*b**2 + a*c**2 + b**2*c + b*c**2)/3 + t*a*b*c
    # factor(sum_cyc(...)) is too slow
    print('sum_cyc(g/h) =', cancel(sum_cyc(g/h, (a, b, c))))
    f = f0**2 - (g/h)**2
    # f(1,1,1) = 0
    eq1 = Eq(f.subs(a, 1).subs(b, 1).subs(c, 1), 0)
    # f(3/2,3/2,0) = 0
    eq2 = Eq(f.subs(a, s32).subs(b, s32).subs(c, 0), 0)
    # f(3/2,0,3/2) = 0
    eq3 = Eq(f.subs(a, s32).subs(b, 0).subs(c, s32), 0)
    # f(0,3/2,3/2) = 0
    eq4 = Eq(f.subs(a, 0).subs(b, s32).subs(c, s32), 0)
    # f_a,b(1,1,1) = 0
    eq5 = Eq(diff(f.subs(c, 3 - a - b), a).subs(a, 1).subs(b, 1), 0)
    eq6 = Eq(diff(f.subs(c, 3 - a - b), b).subs(a, 1).subs(b, 1), 0)
    # f_a(3/2,3/2,0) = 0
    eq7 = Eq(diff(f.subs(c, 0).subs(b, 3 - a), a).subs(a, s32), 0)
    # f_a(3/2,0,3/2) = 0
    eq8 = Eq(diff(f.subs(b, 0).subs(c, 3 - a), a).subs(a, s32), 0)
    # f_b(0,3/2,3/2) = 0
    eq9 = Eq(diff(f.subs(a, 0).subs(c, 3 - b), b).subs(b, s32), 0)
    print('eq1:', factor(eq1)) # True
    print('eq2:', factor(eq2))
    print('eq3:', factor(eq3)) # = eq2
    print('eq4:', factor(eq4))
    print('eq5:', factor(eq5))
    print('eq6:', factor(eq6)) # True
    print('eq7:', factor(eq7))
    print('eq8:', factor(eq8)) # = eq7
    print('eq9:', factor(eq9)) # True
    pqr = solve([eq2, eq4, eq5, eq7], (p, q, r))
    print('pqr =', pqr)
    pqr = pqr[0]
    # https://math.stackexchange.com/a/4776836
    # n, p, q, r, s, t = 5234, 102924, 105253, 50591, 14537, 182976
    # graph of g/h(b=c)
    s0, t0 = S(14537)/5234, S(182976)/5234
    p0, q0, r0 = pqr[0].subs(s, s0).subs(t, t0), pqr[1].subs(s, s0).subs(t, t0), pqr[2].subs(s, s0).subs(t, t0)
    print('pqr =', p0, q0, r0)
    print('y =', factor((g/h).subs(p, p0).subs(q, q0).subs(r, r0).subs(s, s0).subs(t, t0).subs(a, x).subs(b, (3 - x)/2).subs(c, (3 - x)/2)))
    f = f.subs(p, pqr[0]).subs(q, pqr[1]).subs(r, pqr[2])
    f = f.subs(a, a0).subs(b, b0).subs(c, c0)
    u, v = symbols('u, v', negative = False)
    print('f(xyz) =', factor(f.subs(y, x*(1 + u)).subs(z, x*(1 + u + v))))
    print('f(zyx) =', factor(f.subs(y, z*(1 + u)).subs(x, z*(1 + u + v))))
    # k1 >= 0
    k1 = 54133868544*s**2*u**7 + 21743275008*s**2*u**6*v**2 + 189468539904*s**2*u**6*v + 357335619520*s**2*u**6 + 65229825024*s**2*u**5*v**3 + 387214941376*s**2*u**5*v**2 + 1072006858560*s**2*u**5*v + 968194684224*s**2*u**5 + 70825419184*s**2*u**4*v**4 + 494366003680*s**2*u**4*v**3 + 1530755837664*s**2*u**4*v**2 + 2420486710560*s**2*u**4*v + 1321869248112*s**2*u**4 + 32934463328*s**2*u**3*v**5 + 358355959840*s**2*u**3*v**4 + 1274833577728*s**2*u**3*v**3 + 2501422046304*s**2*u**3*v**2 + 2643738496224*s**2*u**3*v + 898366027968*s**2*u**3 + 5635838364*s**2*u**2*v**6 + 137902206032*s**2*u**2*v**5 + 633717593736*s**2*u**2*v**4 + 1331646358896*s**2*u**2*v**3 + 1774148208156*s**2*u**2*v**2 + 1347549041952*s**2*u**2*v + 241490204064*s**2*u**2 + 40244204*s**2*u*v**7 + 22193756648*s**2*u*v**6 + 174968614632*s**2*u*v**5 + 421600426848*s**2*u*v**4 + 452278960044*s**2*u*v**3 + 382141914840*s**2*u*v**2 + 241490204064*s**2*u*v + 75088*s**2*v**8 + 80888396*s**2*v**7 + 22060061932*s**2*v**6 + 69542043960*s**2*v**5 + 65055625320*s**2*v**4 - 33520549572*s**2*v**3 - 51013379556*s**2*v**2 - 5801472768*s*t*u**7 - 2322692736*s*t*u**6*v**2 - 20305154688*s*t*u**6*v - 38140168896*s*t*u**6 - 6968078208*s*t*u**5*v**3 - 41333341920*s*t*u**5*v**2 - 114420506688*s*t*u**5*v - 103052687808*s*t*u**5 - 7557382560*s*t*u**4*v**4 - 52570468080*s*t*u**4*v**3 - 162894125952*s*t*u**4*v**2 - 257631719520*s*t*u**4*v - 140403040656*s*t*u**4 - 3501301440*s*t*u**3*v**5 - 38030002920*s*t*u**3*v**4 - 135087407424*s*t*u**3*v**3 - 265334383320*s*t*u**3*v**2 - 280806081312*s*t*u**3*v - 95229546912*s*t*u**3 - 591462144*s*t*u**2*v**6 - 14627113644*s*t*u**2*v**5 - 66938469372*s*t*u**2*v**4 - 140369855460*s*t*u**2*v**3 - 187331508468*s*t*u**2*v**2 - 142844320368*s*t*u**2*v - 25540497936*s*t*u**2 - 2157792*s*t*u*v**7 - 2346549972*s*t*u*v**6 - 18464850108*s*t*u*v**5 - 44166344460*s*t*u*v**4 - 46928467812*s*t*u*v**3 - 39795735600*s*t*u*v**2 - 25540497936*s*t*u*v - 4315584*s*t*v**7 - 2339128116*s*t*v**6 - 7275920304*s*t*v**5 - 6605325528*s*t*v**4 + 3909518928*s*t*v**3 + 5573736684*s*t*v**2 - 91110302976*s*u**7 - 37012440192*s*u**6*v**2 - 318886060416*s*u**6*v - 601500057440*s*u**6 - 111037320576*s*u**5*v**3 - 654167708144*s*u**5*v**2 - 1804500172320*s*u**5*v - 1629983400912*s*u**5 - 120345663776*s*u**4*v**4 - 838204119320*s*u**4*v**3 - 2583342475968*s*u**4*v**2 - 4074958502280*s*u**4*v - 2225387057856*s*u**4 - 55629126592*s*u**3*v**5 - 607901957720*s*u**3*v**4 - 2159184664736*s*u**3*v**3 - 4220793147288*s*u**3*v**2 - 4450774115712*s*u**3*v - 1512152816688*s*u**3 - 9321851136*s*u**2*v**6 - 233091847468*s*u**2*v**5 - 1074612412380*s*u**2*v**4 - 2256231218652*s*u**2*v**3 - 2994636232548*s*u**2*v**2 - 2268229225032*s*u**2*v - 406358914320*s*u**2 - 13507936*s*u*v**7 - 37056459772*s*u*v**6 - 295770108732*s*u*v**5 - 715706719452*s*u*v**4 - 769249174692*s*u*v**3 - 646560725112*s*u*v**2 - 406358914320*s*u*v + 75088*s*v**8 - 27200704*s*v**7 - 36971610332*s*v**6 - 117646773360*s*v**5 - 111250146264*s*v**4 + 54757841616*s*v**3 + 85305549060*s*v**2 + 155361024*t**2*u**7 + 62008128*t**2*u**6*v**2 + 543763584*t**2*u**6*v + 1017035136*t**2*u**6 + 186024384*t**2*u**5*v**3 + 1102518144*t**2*u**5*v**2 + 3051105408*t**2*u**5*v + 2740065120*t**2*u**5 + 201526416*t**2*u**4*v**4 + 1396886400*t**2*u**4*v**3 + 4331030652*t**2*u**4*v**2 + 6850162800*t**2*u**4*v + 3725377344*t**2*u**4 + 93012192*t**2*u**3*v**5 + 1008483840*t**2*u**3*v**4 + 3576885624*t**2*u**3*v**3 + 7032071124*t**2*u**3*v**2 + 7450754688*t**2*u**3*v + 2521894752*t**2*u**3 + 15502032*t**2*u**2*v**6 + 387721152*t**2*u**2*v**5 + 1766941839*t**2*u**2*v**4 + 3697943886*t**2*u**2*v**3 + 4942759887*t**2*u**2*v**2 + 3782842128*t**2*u**2*v + 674908416*t**2*u**2 + 62008128*t**2*u*v**6 + 487016595*t**2*u*v**5 + 1156472928*t**2*u*v**4 + 1217382543*t**2*u*v**3 + 1035984690*t**2*u*v**2 + 674908416*t**2*u*v + 62008128*t**2*v**6 + 190251243*t**2*v**5 + 167540841*t**2*v**4 - 112481343*t**2*v**3 - 151779069*t**2*v**2 + 4882253376*t*u**7 + 1976537472*t*u**6*v**2 + 17087886816*t*u**6*v + 32102300592*t*u**6 + 5929612416*t*u**5*v**3 + 34911651840*t*u**5*v**2 + 96306901776*t*u**5*v + 86753341992*t*u**5 + 6419431200*t*u**4*v**4 + 44559412560*t*u**4*v**3 + 137447890956*t*u**4*v**2 + 216883354980*t*u**4*v + 118197672432*t*u**4 + 2956175040*t*u**3*v**5 + 32250394800*t*u**3*v**4 + 114384278952*t*u**3*v**3 + 223858438368*t*u**3*v**2 + 236395344864*t*u**3*v + 80155425096*t*u**3 + 488739888*t*u**2*v**6 + 12360123048*t*u**2*v**5 + 56747388654*t*u**2*v**4 + 118904302572*t*u**2*v**3 + 158104165986*t*u**2*v**2 + 120233137644*t*u**2*v + 21491047440*t*u**2 - 1078896*t*u*v**7 + 1958806824*t*u*v**6 + 15606399474*t*u*v**5 + 37486121820*t*u*v**4 + 39906493554*t*u*v**3 + 33665697504*t*u*v**2 + 21491047440*t*u*v - 2157792*t*v**7 + 1960383672*t*v**6 + 6155122314*t*v**5 + 5649635598*t*v**4 - 3206007522*t*v**3 - 4663062270*t*v**2 + 38335843392*u**7 + 15749557824*u**6*v**2 + 134175451872*u**6*v + 253123881868*u**6 + 47248673472*u**5*v**3 + 276291794752*u**5*v**2 + 759371645604*u**5*v + 686025154368*u**5 + 51116981968*u**4*v**4 + 355290857200*u**4*v**3 + 1089937957920*u**4*v**2 + 1715062885920*u**4*v + 936605518320*u**4 + 23486174816*u**3*v**5 + 257794951840*u**3*v**4 + 914256506500*u**3*v**3 + 1780506240972*u**3*v**2 + 1873211036640*u**3*v + 636312101400*u**3 + 3851113344*u**2*v**6 + 98489296496*u**2*v**5 + 455554433679*u**2*v**4 + 955696475538*u**2*v**3 + 1263685212855*u**2*v**2 + 954468152100*u**2*v + 170942886000*u**2 - 17195152*u*v**7 + 15464142560*u*v**6 + 124988121363*u*v**5 + 303736676796*u*v**4 + 327079694535*u*v**3 + 273485062350*u*v**2 + 170942886000*u*v + 18772*v**8 - 34436512*v**7 + 15488863840*v**6 + 49754355339*v**5 + 47553723165*v**4 - 22335494175*v**3 - 35658181125*v**2
    # k2 <= 0
    k2 = 42841924608*s**2*u**7 - 21956404224*s**2*u**6*v**2 + 42165348864*s**2*u**6*v + 226227515648*s**2*u**6 - 66138624000*s**2*u**5*v**3 - 308787851584*s**2*u**5*v**2 + 58369907328*s**2*u**5*v + 494381638080*s**2*u**5 - 72655125952*s**2*u**4*v**4 - 688761474592*s**2*u**4*v**3 - 1422977525088*s**2*u**4*v**2 - 265731065568*s**2*u**4*v + 532542320160*s**2*u**4 - 34950581408*s**2*u**3*v**5 - 542510360236*s**2*u**3*v**4 - 2265055946128*s**2*u**3*v**3 - 3049352645064*s**2*u**3*v**2 - 801123807984*s**2*u**3*v + 272559727764*s**2*u**3 - 6749920608*s**2*u**2*v**6 - 185792596928*s**2*u**2*v**5 - 1325454929628*s**2*u**2*v**4 - 3372621400656*s**2*u**2*v**3 - 3227551913736*s**2*u**2*v**2 - 760719032208*s**2*u**2*v + 51013379556*s**2*u**2 - 272661248*s**2*u*v**7 - 24554718656*s**2*u*v**6 - 316118675136*s**2*u*v**5 - 1318349613024*s**2*u*v**4 - 2281222329504*s**2*u*v**3 - 1550333406816*s**2*u*v**2 - 241490204064*s**2*u*v - 490960*s**2*v**8 - 541394816*s**2*v**7 - 22659836800*s**2*v**6 - 165426109824*s**2*v**5 - 452392169232*s**2*v**4 - 550575196416*s**2*v**3 - 241490204064*s**2*v**2 - 4627343616*s*t*u**7 + 2255405568*s*t*u**6*v**2 - 4672783488*s*t*u**6*v - 24367540608*s*t*u**6 + 6741109440*s*t*u**5*v**3 + 32158663872*s*t*u**5*v**2 - 7015751136*s*t*u**5*v - 53234162592*s*t*u**5 + 7299832800*s*t*u**4*v**4 + 71570559132*s*t*u**4*v**3 + 148963827132*s*t*u**4*v**2 + 26587609140*s*t*u**4*v - 57453130092*s*t*u**4 + 3409910400*s*t*u**3*v**5 + 55718670204*s*t*u**3*v**4 + 236608617924*s*t*u**3*v**3 + 320222957100*s*t*u**3*v**2 + 83392752972*s*t*u**3*v - 29532901176*s*t*u**3 + 609890112*s*t*u**2*v**6 + 18630791760*s*t*u**2*v**5 + 137371353660*s*t*u**2*v**4 + 353461761960*s*t*u**2*v**3 + 339847585488*s*t*u**2*v**2 + 80004831912*s*t*u**2*v - 5573736684*s*t*u**2 + 14108640*s*t*u*v**7 + 2311109808*s*t*u*v**6 + 32247994608*s*t*u*v**5 + 137410461312*s*t*u*v**4 + 239759152032*s*t*u*v**3 + 163641654864*s*t*u*v**2 + 25540497936*s*t*u*v + 28217280*s*t*v**7 + 2212349328*s*t*v**6 + 17073964416*s*t*v**5 + 47362775136*s*t*v**4 + 58013440704*s*t*v**3 + 25540497936*s*t*v**2 - 72067801344*s*u**7 + 36614625792*s*u**6*v**2 - 71235145344*s*u**6*v - 380472651904*s*u**6 + 110474306496*s*u**5*v**3 + 517298276672*s*u**5*v**2 - 99614797824*s*u**5*v - 831178753344*s*u**5 + 121477634528*s*u**4*v**4 + 1154483059244*s*u**4*v**3 + 2388147370644*s*u**4*v**2 + 444685488372*s*u**4*v - 894543881556*s*u**4 + 58415250112*s*u**3*v**5 + 908536092596*s*u**3*v**4 + 3801742049276*s*u**3*v**3 + 5123762275908*s*u**3*v**2 + 1346452000212*s*u**3*v - 457075452744*s*u**3 + 11234369856*s*u**2*v**6 + 310412310760*s*u**2*v**5 + 2222702067612*s*u**2*v**4 + 5666087064312*s*u**2*v**3 + 5427254390328*s*u**2*v**2 + 1279759466448*s*u**2*v - 85305549060*s*u**2 + 436657696*s*u*v**7 + 40798100512*s*u*v**6 + 529005674328*s*u*v**5 + 2213050753512*s*u*v**4 + 3835015051512*s*u*v**3 + 2608077746808*s*u*v**2 + 406358914320*s*u*v - 490960*s*v**8 + 877243072*s*v**7 + 37727749760*s*v**6 + 277214950032*s*v**5 + 760006689216*s*v**4 + 926000669232*s*v**3 + 406358914320*s*v**2 + 124841808*t**2*u**7 - 57895344*t**2*u**6*v**2 + 129082824*t**2*u**6*v + 655373160*t**2*u**6 - 171629640*t**2*u**5*v**3 - 837387603*t**2*u**5*v**2 + 206895078*t**2*u**5*v + 1430855829*t**2*u**5 - 183018888*t**2*u**4*v**4 - 1859550030*t**2*u**4*v**3 - 3898579581*t**2*u**4*v**2 - 664424748*t**2*u**4*v + 1546738479*t**2*u**4 - 82730232*t**2*u**3*v**5 - 1430605683*t**2*u**3*v**4 - 6179362254*t**2*u**3*v**3 - 8405253324*t**2*u**3*v**2 - 2170119978*t**2*u**3*v + 798193071*t**2*u**3 - 13445640*t**2*u**2*v**6 - 466466832*t**2*u**2*v**5 - 3559831587*t**2*u**2*v**4 - 9259778736*t**2*u**2*v**3 - 8942818482*t**2*u**2*v**2 - 2102791392*t**2*u**2*v + 151779069*t**2*u**2 - 53782560*t**2*u*v**6 - 822345264*t**2*u*v**5 - 3580722288*t**2*u*v**4 - 6297949008*t**2*u*v**3 - 4316058864*t**2*u*v**2 - 674908416*t**2*u*v - 53782560*t**2*v**6 - 440665056*t**2*v**5 - 1239529824*t**2*v**4 - 1527555744*t**2*v**3 - 674908416*t**2*v**2 + 3892235424*t*u**7 - 1880148192*t*u**6*v**2 + 3946659024*t*u**6*v + 20493028512*t*u**6 - 5628529296*t*u**5*v**3 - 26937220398*t*u**5*v**2 + 5977518408*t*u**5*v + 44757750102*t*u**5 - 6100706352*t*u**4*v**4 - 59981161104*t*u**4*v**3 - 125007725430*t*u**4*v**2 - 22238782788*t*u**4*v + 48266260842*t*u**4 - 2848581840*t*u**3*v**5 - 46649399526*t*u**3*v**4 - 198571228092*t*u**3*v**3 - 269053143288*t*u**3*v**2 - 70081887144*t*u**3*v + 24772366098*t*u**3 - 507341952*t*u**2*v**6 - 15557236860*t*u**2*v**5 - 115175004498*t*u**2*v**4 - 296930073552*t*u**2*v**3 - 285761190996*t*u**2*v**2 - 67302213516*t*u**2*v + 4663062270*t*u**2 - 11085360*t*u*v**7 - 1917367368*t*u*v**6 - 26975377908*t*u*v**5 - 115332631044*t*u*v**4 - 201549665964*t*u*v**3 - 137659431636*t*u*v**2 - 21491047440*t*u*v - 22170720*t*v**7 - 1839769848*t*v**6 - 14304045576*t*v**5 - 39786258552*t*v**4 - 48790859544*t*v**3 - 21491047440*t*v**2 + 30307625040*u**7 - 15262935600*u**6*v**2 + 30086424456*u**6*v + 159969638312*u**6 - 46128756168*u**5*v**3 - 216640970251*u**5*v**2 + 42495505602*u**5*v + 349348143429*u**5 - 50775421096*u**4*v**4 - 483760586386*u**4*v**3 - 1001956509717*u**4*v**2 - 186023106504*u**4*v + 375641522835*u**4 - 24409488632*u**3*v**5 - 380368905919*u**3*v**4 - 1595194825030*u**3*v**3 - 2152275340272*u**3*v**2 - 565729709910*u**3*v + 191613592575*u**3 - 4675137720*u**2*v**6 - 129654679196*u**2*v**5 - 931809358599*u**2*v**4 - 2379726775008*u**2*v**3 - 2281476293730*u**2*v**2 - 538223166900*u**2*v + 35658181125*u**2 - 174417872*u*v**7 - 16947493004*u*v**6 - 221311851420*u*v**5 - 928710664920*u*v**4 - 1611739639140*u*v**3 - 1096846479900*u*v**2 - 170942886000*u*v + 812972*v**8 - 355339520*v**7 - 15703804684*v**6 - 116133624912*v**5 - 319188301320*v**4 - 389345214600*v**3 - 170942886000*v**2
    p1 = Poly(k1, (u, v))
    p2 = Poly(k2, (u, v))
    print('p1(u,v) =', p1)
    print('p2(u,v) =', p2)
    # search possible s and t
    print()
    print('```python')
    print('    non_negative_coeffs = [ \\')
    for coeff in p1.coeffs():
        print('        ' + str(coeff) + ', \\')
    print('    ]')
    print('    non_positive_coeffs = [ \\')
    for coeff in p2.coeffs():
        print('        ' + str(coeff) + ', \\')
    print('    ]')
    print('```')
    print()
    # result from 4774103a.py
    s0, t0 = S(365)/181, S(9437)/444
    # graph of g/h(b=c)
    print('y =', factor((g/h).subs(p, pqr[0]).subs(q, pqr[1]).subs(r, pqr[2]).subs(s, s0).subs(t, t0).subs(a, x).subs(b, (3 - x)/2).subs(c, (3 - x)/2)))
    g = g.subs(p, pqr[0]).subs(q, pqr[1]).subs(r, pqr[2]).subs(s, s0).subs(t, t0)
    h = h.subs(p, pqr[0]).subs(q, pqr[1]).subs(r, pqr[2]).subs(s, s0).subs(t, t0)
    print('g =', factor(g))
    print('h =', factor(h))
    f = f0**2 - (g/h)**2
    f = f.subs(a, a0).subs(b, b0).subs(c, c0)
    print('f(xyz) =', factor(f.subs(y, x*(1 + u)).subs(z, x*(1 + u + v))))
    print('f(zyx) =', factor(f.subs(y, z*(1 + u)).subs(x, z*(1 + u + v))))

if __name__ == '__main__':
    main()