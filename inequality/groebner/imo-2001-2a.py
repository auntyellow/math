from sympy import *

def main():
    # sum_cyc(a/sqrt(a**2 + 8*b*c)) >= 1
    a, b, c = symbols('a, b, c', negative = False)
    # result from imo-2001-2-sage.py
    # B = [..., a + b + c - 3, B6, B3*B5, B2*B3*B4, B0*B1*B2*B3]
    B0 = c - 1
    B1 = 3*c - 7
    B2 = 3*c - 1
    B3 = 2*c - 7
    B4 = 2*b + c - 3
    B5 = -22027531840473405655118784928138740*b**2 - 22027531840473405655118784928138740*b*c + 66082595521420216965356354784416220*b + 275740300651613114854206087663168*c**16 - 5618860953247914891760873066603392*c**15 + 50397627141411053839798670919126720*c**14 - 263299079793365614377652783634986896*c**13 + 899523916064537861242546144628973744*c**12 - 2159039144798932129531885195977739064*c**11 + 3842327606290366913760293966431089605*c**10 - 5181638429939105555850794338012952202*c**9 + 5040123267002476270563967015910638119*c**8 - 3064513948203877772286895102652618292*c**7 + 1076718111731998801658858033406093003*c**6 - 809698705007224303094650065220246498*c**5 + 724902903106374391810125411538142053*c**4 + 200634541465806025118324385716591424*c**3 - 220912393137821515179561084944881197*c**2 - 96862430744167379362577220394128330*c - 55348252366354152188109955662300705
    B6 = -11300123834162857101075936668135173620*b**6 + 90400990673302856808607493345081388960*b**5 - 241069308462140951489619982253550370560*b**4 + 214283829744125290212995539780933662720*b**3 - 3348184839751957659578055309077088480*b**2 + 186504066203687557095332839244190612480*b*c**11 - 2092620913369290265162641599640170551680*b*c**10 + 8824193915203811639651594373502900220160*b*c**9 - 16622652172372850545014856534226914420800*b*c**8 + 11118099605897912006510453301228199576080*b*c**7 + 3766345260993059677859759484911164673040*b*c**6 - 3133455287988853154551254991046201278800*b*c**5 - 4848543694896249531532234711834904772240*b*c**4 - 1337772782830143684849691697145334328400*b*c**3 + 138846416172927766439372589648811829040*b*c**2 + 164430843120128617313233729990048486560*b*c + 52860863109793175682034908998408911200*b + 5124648675914742515131086053042899512*c**17 - 108463897764806110522377669752641478568*c**16 + 1019159487561770696410023892357320772500*c**15 - 5635649628557997537133635791748471661545*c**14 + 20603045939271905038762648117112172862500*c**13 - 53302177440992466897212400101540934706251*c**12 + 101758803493290356744060301670677224100392*c**11 - 144239172041527149463539652899839364809636*c**10 + 144377472604555721672118260613806301574764*c**9 - 91205623479571918656553311293706945021498*c**8 + 34728631511380731450435334337290474409796*c**7 - 20052424856434883586352933591550114868150*c**6 + 15559810577160062189266252104629470742416*c**5 - 448715041085045021572740521482716974020*c**4 + 1186641857753573228962189511038675369488*c**3 - 456337964718803516885053845942759912141*c**2 - 23730302332255607378338681297544209848*c - 31598789190015005592127688628640465371
    c0 = solve(B0)[0]
    c1 = solve(B1)[0]
    c2 = solve(B2)[0] # can't use B4 and B5
    c3 = solve(B3)[0] # > 3
    print('c0 =', c0)
    print('c1 =', c1)
    print('c2 =', c2)
    print('c3 =', c3)
    b0 = solve(B4.subs(c, c0))[0]
    print('b0 =', b0)
    print('verified by B5 and B6?', B5.subs({b: b0, c: c0}) == 0 and B6.subs({b: b0, c: c0}) == 0)
    b1 = solve(B4.subs(c, c1))[0]
    print('b1 =', b1)
    print('verified by B5 and B6?', B5.subs({b: b1, c: c1}) == 0 and B6.subs({b: b1, c: c1}) == 0)
    b2 = solve(B6.subs(c, c2))
    print('b2 =', b2)
    print('a0 =', 3 - b0 - c0)
    print('a1 =', 3 - b1 - c1)
    print('a2 =', [3 - b2[0] - c2, 3 - b2[1] - c2])
    print()

    a = 3 - b - c
    f = a/sqrt(a**2 + 8*b*c) + b/sqrt(b**2 + 8*a*c) + c/sqrt(c**2 + 8*a*b) - 1
    H = hessian(f, [b, c])
    H0 = N(H.subs({b: b0, c: c0}))
    print('H0 =', H0)
    print('|H0| =', det(H0)) # local minimum
    print('f0 =', N(f.subs({b: b0, c: c0})))
    H1 = N(H.subs({b: b1, c: c1}))
    print('H1 =', H1)
    print('|H1| =', det(H1)) # saddle point
    print('f1 =', N(f.subs({b: b1, c: c1})))

if __name__ == '__main__':
    main()