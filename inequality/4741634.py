from sympy import *

# https://math.stackexchange.com/q/4741634

def main():
    # x, y, z = symbols('x, y, z', positive = True)
    # z = solve(Eq(x*x + y*y + z*z + x*y*z, 4), z)[1]
    # print('z =', z)
    a, b, c = symbols('a, b, c', positive = True)
    x = 2*a/sqrt((a + b)*(a + c))
    y = 2*b/sqrt((b + c)*(b + a))
    z = 2*c/sqrt((c + a)*(c + b))
    print('x*x + y*y + z*z + x*y*z =', factor(x*x + y*y + z*z + x*y*z))
    f = 4*(x*y + y*z + z*x - x*y*z) - (x*x*y + z)*(y*y*z + x)*(z*z*x + y)
    A, B, C = symbols('A, B, C', positive = True)
    # print('f =', factor(f).subs(sqrt(a + b), C).subs(sqrt(b + c), A).subs(sqrt(c + a), B))
    g = -5*A*B*C*a**5*b**3*c - 10*A*B*C*a**5*b**2*c**2 - 5*A*B*C*a**5*b*c**3 - 10*A*B*C*a**4*b**4*c - 30*A*B*C*a**4*b**3*c**2 - 30*A*B*C*a**4*b**2*c**3 - 10*A*B*C*a**4*b*c**4 - 5*A*B*C*a**3*b**5*c - 30*A*B*C*a**3*b**4*c**2 - 114*A*B*C*a**3*b**3*c**3 - 30*A*B*C*a**3*b**2*c**4 - 5*A*B*C*a**3*b*c**5 - 10*A*B*C*a**2*b**5*c**2 - 30*A*B*C*a**2*b**4*c**3 - 30*A*B*C*a**2*b**3*c**4 - 10*A*B*C*a**2*b**2*c**5 - 5*A*B*C*a*b**5*c**3 - 10*A*B*C*a*b**4*c**4 - 5*A*B*C*a*b**3*c**5 - 4*A*a**6*b**4 - 6*A*a**6*b**3*c + 2*A*a**6*b*c**3 - 4*A*a**5*b**5 - 10*A*a**5*b**4*c - 2*A*a**5*b**3*c**2 + 10*A*a**5*b**2*c**3 + 6*A*a**5*b*c**4 - 2*A*a**4*b**5*c + 10*A*a**4*b**4*c**2 + 32*A*a**4*b**3*c**3 + 10*A*a**4*b**2*c**4 + 6*A*a**4*b*c**5 + 2*A*a**3*b**6*c + 18*A*a**3*b**5*c**2 + 48*A*a**3*b**4*c**3 + 20*A*a**3*b**3*c**4 + 6*A*a**3*b**2*c**5 + 2*A*a**3*b*c**6 + 6*A*a**2*b**6*c**2 + 30*A*a**2*b**5*c**3 + 32*A*a**2*b**4*c**4 - 2*A*a**2*b**3*c**5 + 6*A*a**2*b**2*c**6 + 6*A*a*b**6*c**3 + 18*A*a*b**5*c**4 + 2*A*a*b**4*c**5 + 6*A*a*b**3*c**6 + 2*A*b**6*c**4 + 4*A*b**5*c**5 + 2*A*b**4*c**6 + 2*B*a**6*b**3*c + 6*B*a**6*b**2*c**2 + 6*B*a**6*b*c**3 + 2*B*a**6*c**4 + 6*B*a**5*b**4*c + 6*B*a**5*b**3*c**2 - 2*B*a**5*b**2*c**3 + 2*B*a**5*b*c**4 + 4*B*a**5*c**5 + 6*B*a**4*b**5*c + 10*B*a**4*b**4*c**2 + 20*B*a**4*b**3*c**3 + 32*B*a**4*b**2*c**4 + 18*B*a**4*b*c**5 + 2*B*a**4*c**6 + 2*B*a**3*b**6*c + 10*B*a**3*b**5*c**2 + 32*B*a**3*b**4*c**3 + 48*B*a**3*b**3*c**4 + 30*B*a**3*b**2*c**5 + 6*B*a**3*b*c**6 - 2*B*a**2*b**5*c**3 + 10*B*a**2*b**4*c**4 + 18*B*a**2*b**3*c**5 + 6*B*a**2*b**2*c**6 - 6*B*a*b**6*c**3 - 10*B*a*b**5*c**4 - 2*B*a*b**4*c**5 + 2*B*a*b**3*c**6 - 4*B*b**6*c**4 - 4*B*b**5*c**5 + 2*C*a**6*b**4 + 6*C*a**6*b**3*c + 6*C*a**6*b**2*c**2 + 2*C*a**6*b*c**3 + 4*C*a**5*b**5 + 18*C*a**5*b**4*c + 30*C*a**5*b**3*c**2 + 18*C*a**5*b**2*c**3 - 2*C*a**5*b*c**4 - 4*C*a**5*c**5 + 2*C*a**4*b**6 + 2*C*a**4*b**5*c + 32*C*a**4*b**4*c**2 + 48*C*a**4*b**3*c**3 + 10*C*a**4*b**2*c**4 - 10*C*a**4*b*c**5 - 4*C*a**4*c**6 + 6*C*a**3*b**6*c - 2*C*a**3*b**5*c**2 + 20*C*a**3*b**4*c**3 + 32*C*a**3*b**3*c**4 - 2*C*a**3*b**2*c**5 - 6*C*a**3*b*c**6 + 6*C*a**2*b**6*c**2 + 6*C*a**2*b**5*c**3 + 10*C*a**2*b**4*c**4 + 10*C*a**2*b**3*c**5 + 2*C*a*b**6*c**3 + 6*C*a*b**5*c**4 + 6*C*a*b**4*c**5 + 2*C*a*b**3*c**6
    p = poly(g, (A, B, C))
    print('Is g = ...A + ...B + ...C + ...ABC?', expand(p.nth(1, 0, 0)*A + p.nth(0, 1, 0)*B + p.nth(0, 0, 1)*C + p.nth(1, 1, 1)*A*B*C) == g)
    print(f'g = A({p.nth(1, 0, 0)})')
    print(f'  + B({p.nth(0, 1, 0)})')
    print(f'  + C({p.nth(0, 0, 1)})')
    print(f'+ ABC({p.nth(1, 1, 1)})')
    h = (p.nth(1, 0, 0)*A + p.nth(0, 1, 0)*B)**2 - (p.nth(0, 0, 1)*C + p.nth(1, 1, 1)*A*B*C)**2
    h = expand(h.subs(A**2, b + c).subs(B**2, c + a).subs(C**2, a + b)).subs(sqrt(b + c), A).subs(sqrt(c + a), B)
    p = poly(h, (A, B))
    print('Is h = ... + ...AB?', expand(p.nth(0, 0) + p.nth(1, 1)*A*B) == h)
    print(f'h = ({p.nth(0, 0)})')
    print(f'+ AB({p.nth(1, 1)})')
    # j = factor(p.nth(0, 0)**2 - p.nth(1, 1)**2*(b + c)*(c + a))
    # print('j =', j)
    k = 16*a**22*b**14 + 160*a**22*b**13*c + 688*a**22*b**12*c**2 + 1600*a**22*b**11*c**3 + 1936*a**22*b**10*c**4 + 352*a**22*b**9*c**5 - 2640*a**22*b**8*c**6 - 4224*a**22*b**7*c**7 - 2640*a**22*b**6*c**8 + 352*a**22*b**5*c**9 + 1936*a**22*b**4*c**10 + 1600*a**22*b**3*c**11 + 688*a**22*b**2*c**12 + 160*a**22*b*c**13 + 16*a**22*c**14 + 416*a**21*b**14*c + 3896*a**21*b**13*c**2 + 15960*a**21*b**12*c**3 + 36600*a**21*b**11*c**4 + 48024*a**21*b**10*c**5 + 25616*a**21*b**9*c**6 - 26832*a**21*b**8*c**7 - 69456*a**21*b**7*c**8 - 69744*a**21*b**6*c**9 - 38248*a**21*b**5*c**10 - 8200*a**21*b**4*c**11 + 3672*a**21*b**3*c**12 + 3384*a**21*b**2*c**13 + 1056*a**21*b*c**14 + 128*a**21*c**15 + 64*a**20*b**16 + 896*a**20*b**15*c + 9872*a**20*b**14*c**2 + 56760*a**20*b**13*c**3 + 178825*a**20*b**12*c**4 + 321696*a**20*b**11*c**5 + 289804*a**20*b**10*c**6 - 33688*a**20*b**9*c**7 - 434058*a**20*b**8*c**8 - 566552*a**20*b**7*c**9 - 385108*a**20*b**6*c**10 - 136672*a**20*b**5*c**11 - 6135*a**20*b**4*c**12 + 18232*a**20*b**3*c**13 + 9648*a**20*b**2*c**14 + 2560*a**20*b*c**15 + 320*a**20*c**16 + 128*a**19*b**17 + 2048*a**19*b**16*c + 17536*a**19*b**15*c**2 + 104096*a**19*b**14*c**3 + 373600*a**19*b**13*c**4 + 754432*a**19*b**12*c**5 + 671840*a**19*b**11*c**6 - 489728*a**19*b**10*c**7 - 2299264*a**19*b**9*c**8 - 3375936*a**19*b**8*c**9 - 2940928*a**19*b**7*c**10 - 1611936*a**19*b**6*c**11 - 478688*a**19*b**5*c**12 + 5440*a**19*b**4*c**13 + 64544*a**19*b**3*c**14 + 23808*a**19*b**2*c**15 + 3712*a**19*b*c**16 + 256*a**19*c**17 + 96*a**18*b**18 + 3392*a**18*b**17*c + 29024*a**18*b**16*c**2 + 134944*a**18*b**15*c**3 + 414540*a**18*b**14*c**4 + 687512*a**18*b**13*c**5 - 160772*a**18*b**12*c**6 - 3599520*a**18*b**11*c**7 - 8870568*a**18*b**10*c**8 - 12331024*a**18*b**9*c**9 - 11250440*a**18*b**8*c**10 - 6923104*a**18*b**7*c**11 - 2709892*a**18*b**6*c**12 - 472136*a**18*b**5*c**13 + 131276*a**18*b**4*c**14 + 111264*a**18*b**3*c**15 + 32000*a**18*b**2*c**16 + 4032*a**18*b*c**17 + 96*a**18*c**18 + 256*a**17*b**19 + 4032*a**17*b**18*c + 33296*a**17*b**17*c**2 + 152816*a**17*b**16*c**3 + 337736*a**17*b**15*c**4 - 90416*a**17*b**14*c**5 - 3208880*a**17*b**13*c**6 - 11344344*a**17*b**12*c**7 - 22829600*a**17*b**11*c**8 - 30713072*a**17*b**10*c**9 - 29429136*a**17*b**9*c**10 - 20761664*a**17*b**8*c**11 - 10805784*a**17*b**7*c**12 - 3865264*a**17*b**6*c**13 - 640400*a**17*b**5*c**14 + 187816*a**17*b**4*c**15 + 142448*a**17*b**3*c**16 + 33296*a**17*b**2*c**17 + 3392*a**17*b*c**18 + 128*a**17*c**19 + 320*a**16*b**20 + 3712*a**16*b**19*c + 32000*a**16*b**18*c**2 + 142448*a**16*b**17*c**3 + 276150*a**16*b**16*c**4 - 630976*a**16*b**15*c**5 - 5711992*a**16*b**14*c**6 - 18580864*a**16*b**13*c**7 - 37089222*a**16*b**12*c**8 - 49822128*a**16*b**11*c**9 - 47606128*a**16*b**10*c**10 - 35507088*a**16*b**9*c**11 - 22981254*a**16*b**8*c**12 - 12527040*a**16*b**7*c**13 - 4612376*a**16*b**6*c**14 - 620192*a**16*b**5*c**15 + 276150*a**16*b**4*c**16 + 152816*a**16*b**3*c**17 + 29024*a**16*b**2*c**18 + 2048*a**16*b*c**19 + 64*a**16*c**20 + 128*a**15*b**21 + 2560*a**15*b**20*c + 23808*a**15*b**19*c**2 + 111264*a**15*b**18*c**3 + 187816*a**15*b**17*c**4 - 620192*a**15*b**16*c**5 - 5499392*a**15*b**15*c**6 - 18066336*a**15*b**14*c**7 - 35412656*a**15*b**13*c**8 - 44180504*a**15*b**12*c**9 - 35329856*a**15*b**11*c**10 - 21890560*a**15*b**10*c**11 - 18445496*a**15*b**9*c**12 - 18834448*a**15*b**8*c**13 - 13651552*a**15*b**7*c**14 - 5499392*a**15*b**6*c**15 - 630976*a**15*b**5*c**16 + 337736*a**15*b**4*c**17 + 134944*a**15*b**3*c**18 + 17536*a**15*b**2*c**19 + 896*a**15*b*c**20 + 16*a**14*b**22 + 1056*a**14*b**21*c + 9648*a**14*b**20*c**2 + 64544*a**14*b**19*c**3 + 131276*a**14*b**18*c**4 - 640400*a**14*b**17*c**5 - 4612376*a**14*b**16*c**6 - 13651552*a**14*b**15*c**7 - 21103184*a**14*b**14*c**8 - 10571984*a**14*b**13*c**9 + 27144092*a**14*b**12*c**10 + 62484608*a**14*b**11*c**11 + 51158556*a**14*b**10*c**12 + 6703248*a**14*b**9*c**13 - 21103184*a**14*b**8*c**14 - 18066336*a**14*b**7*c**15 - 5711992*a**14*b**6*c**16 - 90416*a**14*b**5*c**17 + 414540*a**14*b**4*c**18 + 104096*a**14*b**3*c**19 + 9872*a**14*b**2*c**20 + 416*a**14*b*c**21 + 16*a**14*c**22 + 160*a**13*b**22*c + 3384*a**13*b**21*c**2 + 18232*a**13*b**20*c**3 + 5440*a**13*b**19*c**4 - 472136*a**13*b**18*c**5 - 3865264*a**13*b**17*c**6 - 12527040*a**13*b**16*c**7 - 18834448*a**13*b**15*c**8 + 6703248*a**13*b**14*c**9 + 83399312*a**13*b**13*c**10 + 170508248*a**13*b**12*c**11 + 177085976*a**13*b**11*c**12 + 83399312*a**13*b**10*c**13 - 10571984*a**13*b**9*c**14 - 35412656*a**13*b**8*c**15 - 18580864*a**13*b**7*c**16 - 3208880*a**13*b**6*c**17 + 687512*a**13*b**5*c**18 + 373600*a**13*b**4*c**19 + 56760*a**13*b**3*c**20 + 3896*a**13*b**2*c**21 + 160*a**13*b*c**22 + 688*a**12*b**22*c**2 + 3672*a**12*b**21*c**3 - 6135*a**12*b**20*c**4 - 478688*a**12*b**19*c**5 - 2709892*a**12*b**18*c**6 - 10805784*a**12*b**17*c**7 - 22981254*a**12*b**16*c**8 - 18445496*a**12*b**15*c**9 + 51158556*a**12*b**14*c**10 + 177085976*a**12*b**13*c**11 + 262323498*a**12*b**12*c**12 + 170508248*a**12*b**11*c**13 + 27144092*a**12*b**10*c**14 - 44180504*a**12*b**9*c**15 - 37089222*a**12*b**8*c**16 - 11344344*a**12*b**7*c**17 - 160772*a**12*b**6*c**18 + 754432*a**12*b**5*c**19 + 178825*a**12*b**4*c**20 + 15960*a**12*b**3*c**21 + 688*a**12*b**2*c**22 + 1600*a**11*b**22*c**3 - 8200*a**11*b**21*c**4 - 136672*a**11*b**20*c**5 - 1611936*a**11*b**19*c**6 - 6923104*a**11*b**18*c**7 - 20761664*a**11*b**17*c**8 - 35507088*a**11*b**16*c**9 - 21890560*a**11*b**15*c**10 + 62484608*a**11*b**14*c**11 + 170508248*a**11*b**13*c**12 + 177085976*a**11*b**12*c**13 + 62484608*a**11*b**11*c**14 - 35329856*a**11*b**10*c**15 - 49822128*a**11*b**9*c**16 - 22829600*a**11*b**8*c**17 - 3599520*a**11*b**7*c**18 + 671840*a**11*b**6*c**19 + 321696*a**11*b**5*c**20 + 36600*a**11*b**4*c**21 + 1600*a**11*b**3*c**22 + 1936*a**10*b**22*c**4 - 38248*a**10*b**21*c**5 - 385108*a**10*b**20*c**6 - 2940928*a**10*b**19*c**7 - 11250440*a**10*b**18*c**8 - 29429136*a**10*b**17*c**9 - 47606128*a**10*b**16*c**10 - 35329856*a**10*b**15*c**11 + 27144092*a**10*b**14*c**12 + 83399312*a**10*b**13*c**13 + 51158556*a**10*b**12*c**14 - 21890560*a**10*b**11*c**15 - 47606128*a**10*b**10*c**16 - 30713072*a**10*b**9*c**17 - 8870568*a**10*b**8*c**18 - 489728*a**10*b**7*c**19 + 289804*a**10*b**6*c**20 + 48024*a**10*b**5*c**21 + 1936*a**10*b**4*c**22 + 352*a**9*b**22*c**5 - 69744*a**9*b**21*c**6 - 566552*a**9*b**20*c**7 - 3375936*a**9*b**19*c**8 - 12331024*a**9*b**18*c**9 - 30713072*a**9*b**17*c**10 - 49822128*a**9*b**16*c**11 - 44180504*a**9*b**15*c**12 - 10571984*a**9*b**14*c**13 + 6703248*a**9*b**13*c**14 - 18445496*a**9*b**12*c**15 - 35507088*a**9*b**11*c**16 - 29429136*a**9*b**10*c**17 - 12331024*a**9*b**9*c**18 - 2299264*a**9*b**8*c**19 - 33688*a**9*b**7*c**20 + 25616*a**9*b**6*c**21 + 352*a**9*b**5*c**22 - 2640*a**8*b**22*c**6 - 69456*a**8*b**21*c**7 - 434058*a**8*b**20*c**8 - 2299264*a**8*b**19*c**9 - 8870568*a**8*b**18*c**10 - 22829600*a**8*b**17*c**11 - 37089222*a**8*b**16*c**12 - 35412656*a**8*b**15*c**13 - 21103184*a**8*b**14*c**14 - 18834448*a**8*b**13*c**15 - 22981254*a**8*b**12*c**16 - 20761664*a**8*b**11*c**17 - 11250440*a**8*b**10*c**18 - 3375936*a**8*b**9*c**19 - 434058*a**8*b**8*c**20 - 26832*a**8*b**7*c**21 - 2640*a**8*b**6*c**22 - 4224*a**7*b**22*c**7 - 26832*a**7*b**21*c**8 - 33688*a**7*b**20*c**9 - 489728*a**7*b**19*c**10 - 3599520*a**7*b**18*c**11 - 11344344*a**7*b**17*c**12 - 18580864*a**7*b**16*c**13 - 18066336*a**7*b**15*c**14 - 13651552*a**7*b**14*c**15 - 12527040*a**7*b**13*c**16 - 10805784*a**7*b**12*c**17 - 6923104*a**7*b**11*c**18 - 2940928*a**7*b**10*c**19 - 566552*a**7*b**9*c**20 - 69456*a**7*b**8*c**21 - 4224*a**7*b**7*c**22 - 2640*a**6*b**22*c**8 + 25616*a**6*b**21*c**9 + 289804*a**6*b**20*c**10 + 671840*a**6*b**19*c**11 - 160772*a**6*b**18*c**12 - 3208880*a**6*b**17*c**13 - 5711992*a**6*b**16*c**14 - 5499392*a**6*b**15*c**15 - 4612376*a**6*b**14*c**16 - 3865264*a**6*b**13*c**17 - 2709892*a**6*b**12*c**18 - 1611936*a**6*b**11*c**19 - 385108*a**6*b**10*c**20 - 69744*a**6*b**9*c**21 - 2640*a**6*b**8*c**22 + 352*a**5*b**22*c**9 + 48024*a**5*b**21*c**10 + 321696*a**5*b**20*c**11 + 754432*a**5*b**19*c**12 + 687512*a**5*b**18*c**13 - 90416*a**5*b**17*c**14 - 630976*a**5*b**16*c**15 - 620192*a**5*b**15*c**16 - 640400*a**5*b**14*c**17 - 472136*a**5*b**13*c**18 - 478688*a**5*b**12*c**19 - 136672*a**5*b**11*c**20 - 38248*a**5*b**10*c**21 + 352*a**5*b**9*c**22 + 1936*a**4*b**22*c**10 + 36600*a**4*b**21*c**11 + 178825*a**4*b**20*c**12 + 373600*a**4*b**19*c**13 + 414540*a**4*b**18*c**14 + 337736*a**4*b**17*c**15 + 276150*a**4*b**16*c**16 + 187816*a**4*b**15*c**17 + 131276*a**4*b**14*c**18 + 5440*a**4*b**13*c**19 - 6135*a**4*b**12*c**20 - 8200*a**4*b**11*c**21 + 1936*a**4*b**10*c**22 + 1600*a**3*b**22*c**11 + 15960*a**3*b**21*c**12 + 56760*a**3*b**20*c**13 + 104096*a**3*b**19*c**14 + 134944*a**3*b**18*c**15 + 152816*a**3*b**17*c**16 + 142448*a**3*b**16*c**17 + 111264*a**3*b**15*c**18 + 64544*a**3*b**14*c**19 + 18232*a**3*b**13*c**20 + 3672*a**3*b**12*c**21 + 1600*a**3*b**11*c**22 + 688*a**2*b**22*c**12 + 3896*a**2*b**21*c**13 + 9872*a**2*b**20*c**14 + 17536*a**2*b**19*c**15 + 29024*a**2*b**18*c**16 + 33296*a**2*b**17*c**17 + 32000*a**2*b**16*c**18 + 23808*a**2*b**15*c**19 + 9648*a**2*b**14*c**20 + 3384*a**2*b**13*c**21 + 688*a**2*b**12*c**22 + 160*a*b**22*c**13 + 416*a*b**21*c**14 + 896*a*b**20*c**15 + 2048*a*b**19*c**16 + 3392*a*b**18*c**17 + 4032*a*b**17*c**18 + 3712*a*b**16*c**19 + 2560*a*b**15*c**20 + 1056*a*b**14*c**21 + 160*a*b**13*c**22 + 16*b**22*c**14 + 64*b**20*c**16 + 128*b**19*c**17 + 96*b**18*c**18 + 256*b**17*c**19 + 320*b**16*c**20 + 128*b**15*c**21 + 16*b**14*c**22
    t = symbols('t', positive = True)
    k1 = k.subs(a, t).subs(b, a).subs(t, b)
    print('Is k symmetric?', k1 == k)
    k1 = k.subs(a, t).subs(b, a).subs(c, b).subs(t, c)
    print('Is k cyclic?', k1 == k)
    # a <= b <= c
    u, v = symbols('u, v', positive = True)
    print('k(abc) =', factor(k.subs(b, c/(1 + u)).subs(a, c/(1 + u + v))))
    # b <= a <= c
    print('k(bac) =', factor(k.subs(a, c/(1 + u)).subs(b, c/(1 + u + v))))

if __name__ == '__main__':
    main()