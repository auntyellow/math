from sympy import *

def main():
    x, y = symbols('x, y', negative = False)
    # try to prove positive when x_i >= 0

    f = (5*x - 3*y)**2
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**2))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**2))
    print()

    f = (5*x - 3*y)**2 + 1
    f = f.subs({x: 1/x, y: 1/y})*x**2*y**2
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**2))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**2))
    print()

    f = (3*x**2 - 5*y)**2
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**2))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**2))
    g = 9*x**2 - 30*x*y + 25*y**2
    print('g(yx) =', cancel(g.subs(y, x*y)/x**2))
    print('g(xy) =', cancel(g.subs(x, x*y)/y**2))
    print()

    f = (3*x**3 - 5*y**2)**2 + 1
    print('f =', expand(f))
    f = f.subs({x: 1/x, y: 1/y})*x**6*y**4
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**4))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**4))
    g = x**6*y**4 + 25*x**2 - 30*x*y**2 + 9*y**4
    print('g(yx) =', cancel(g.subs(y, x*y)/x**2))
    print('g(xy) =', cancel(g.subs(x, x*y)/y**2))
    h = x**6*y**8 + 25*x**2 - 30*x*y + 9*y**2
    print('h(yx) =', cancel(h.subs(y, x*y)/x**2))
    print('h(xy) =', cancel(h.subs(x, x*y)/y**2))
    # homogeneous min-degree
    f = f.subs(x, x**2).subs(y, y**3)
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**12))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**12))
    print()

    f = (3*x**3 - 5*y**2)**2 + x**3*y**2
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**4))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**4))
    g = 9*x**2 - 29*x*y**2 + 25*y**4
    print('g(yx) =', cancel(g.subs(y, x*y)/x**2))
    print('g(xy) =', cancel(g.subs(x, x*y)/y**2))
    h = 9*x**2 - 29*x*y + 25*y**2
    print('h(yx) =', cancel(h.subs(y, x*y)/x**2))
    print('h(xy) =', cancel(h.subs(x, x*y)/y**2))
    # homogeneous min-degree
    f = f.subs(x, x**2).subs(y, y**3)
    print('f =', expand(f))
    print('f(yx) =', cancel(f.subs(y, x*y)/x**12))
    print('f(xy) =', cancel(f.subs(x, x*y)/y**12))
    print()

    u, v = symbols('u, v', negative = False)
    # result from p172-11.py
    f = 2572755344*u**4 - 6426888360*u**3*v - 3844133016*u**3 + 5315682897*u**2*v**2 + 8649299286*u**2*v + 1441549881*u**2 - 1621722090*u*v**3 - 5766199524*u*v**2 - 2883099762*u*v + 1611722090*v**4 - 961033254*v**3 + 2082238717*v**2
    print('f(vu) =', cancel(f.subs(v, v*u)/u**2))
    print('f(uv) =', cancel(f.subs(u, v*u)/v**2))
    print()

    z = symbols('z', negative = False)
    f = (3*x**4 - 5*y**3)**2 + (4*x**3 - 7*z**2)**2 + x**4*y**3 + x**3*z**2
    print('f =', expand(f))
    print('f(x = max(xyz)) =', cancel(f.subs(y, x*y).subs(z, x*z)/x**4))
    print('f(y = max(xyz)) =', cancel(f.subs(x, x*y).subs(z, y*z)/y**4))
    print('f(z = max(xyz)) =', cancel(f.subs(x, x*z).subs(y, y*z)/z**4))
    # x = max(xyz)
    g = 9*x**4 - 29*x**3*y**3 + 25*x**2*y**6 + 16*x**2 - 55*x*z**2 + 49*z**4
    print('g(x = max(xyz)) =', cancel(g.subs(y, x*y).subs(z, x*z)/x**2))
    # doesn't seem to work
    print('g(y = max(xyz)) =', cancel(g.subs(x, x*y).subs(z, y*z)/y**2))
    print('g(z = max(xyz)) =', cancel(g.subs(x, x*z).subs(y, y*z)/z**2))
    # homogeneous min-degree
    f = f.subs(x, x**2).subs(y, y**2).subs(z, z**3)
    print('f =', expand(f))
    print('f(x = max(xyz)) =', cancel(f.subs(y, x*y).subs(z, x*z)/x**12))
    print('f(y = max(xyz)) =', cancel(f.subs(x, x*y).subs(z, y*z)/y**12))
    print('f(z = max(xyz)) =', cancel(f.subs(x, x*z).subs(y, y*z)/z**12))
    print()

    b, c = symbols('b, c', negative = False)
    # from han23-p341s.py
    # f = b**6*u**3*v**3 + 2*b**6*u**3*v**2 + b**6*u**3*v + 2*b**6*u**2*v**3 - 3*b**6*u**2*v**2 - 4*b**6*u**2*v + b**6*u**2 + b**6*u*v**3 - 4*b**6*u*v**2 - 3*b**6*u*v + 2*b**6*u + b**6*v**2 + 2*b**6*v + b**6 + 3*b**5*c*u**3*v**3 + 5*b**5*c*u**3*v**2 + 2*b**5*c*u**3*v + 5*b**5*c*u**2*v**3 - 20*b**5*c*u**2*v**2 - 12*b**5*c*u**2*v + 4*b**5*c*u**2 + 2*b**5*c*u*v**3 - 12*b**5*c*u*v**2 + 2*b**5*c*u*v + 7*b**5*c*u + 4*b**5*c*v**2 + 7*b**5*c*v + 3*b**5*c + 8*b**5*u**3*v**3 + 10*b**5*u**3*v**2 + 4*b**5*u**3*v + 2*b**5*u**3 + 10*b**5*u**2*v**3 - 14*b**5*u**2*v**2 - 20*b**5*u**2*v + 4*b**5*u**2 + 4*b**5*u*v**3 - 20*b**5*u*v**2 - 14*b**5*u*v + 10*b**5*u + 2*b**5*v**3 + 4*b**5*v**2 + 10*b**5*v + 8*b**5 + 3*b**4*c**2*u**3*v**3 + 4*b**4*c**2*u**3*v**2 + b**4*c**2*u**3*v + 4*b**4*c**2*u**2*v**3 - 36*b**4*c**2*u**2*v**2 - 7*b**4*c**2*u**2*v + 6*b**4*c**2*u**2 + b**4*c**2*u*v**3 - 7*b**4*c**2*u*v**2 + 19*b**4*c**2*u*v + 9*b**4*c**2*u + 6*b**4*c**2*v**2 + 9*b**4*c**2*v + 3*b**4*c**2 + 20*b**4*c*u**3*v**3 + 15*b**4*c*u**3*v**2 + 9*b**4*c*u**3*v + 5*b**4*c*u**3 + 15*b**4*c*u**2*v**3 - 82*b**4*c*u**2*v**2 - 50*b**4*c*u**2*v + 11*b**4*c*u**2 + 9*b**4*c*u*v**3 - 50*b**4*c*u*v**2 + 12*b**4*c*u*v + 35*b**4*c*u + 5*b**4*c*v**3 + 11*b**4*c*v**2 + 35*b**4*c*v + 20*b**4*c + 18*b**4*u**3*v**3 + 20*b**4*u**3*v**2 + 8*b**4*u**3*v + 6*b**4*u**3 + 20*b**4*u**2*v**3 - 24*b**4*u**2*v**2 - 36*b**4*u**2*v + 8*b**4*u**2 + 8*b**4*u*v**3 - 36*b**4*u*v**2 - 24*b**4*u*v + 20*b**4*u + 6*b**4*v**3 + 8*b**4*v**2 + 20*b**4*v + 18*b**4 + b**3*c**3*u**3*v**3 + b**3*c**3*u**3*v**2 + b**3*c**3*u**2*v**3 - 24*b**3*c**3*u**2*v**2 + 6*b**3*c**3*u**2*v + 4*b**3*c**3*u**2 + 6*b**3*c**3*u*v**2 + 20*b**3*c**3*u*v + 5*b**3*c**3*u + 4*b**3*c**3*v**2 + 5*b**3*c**3*v + b**3*c**3 + 16*b**3*c**2*u**3*v**3 + 4*b**3*c**2*u**3*v**2 + 10*b**3*c**2*u**3*v + 4*b**3*c**2*u**3 + 4*b**3*c**2*u**2*v**3 - 108*b**3*c**2*u**2*v**2 - 26*b**3*c**2*u**2*v + 14*b**3*c**2*u**2 + 10*b**3*c**2*u*v**3 - 26*b**3*c**2*u*v**2 + 80*b**3*c**2*u*v + 44*b**3*c**2*u + 4*b**3*c**2*v**3 + 14*b**3*c**2*v**2 + 44*b**3*c**2*v + 16*b**3*c**2 + 36*b**3*c*u**3*v**3 + 22*b**3*c*u**3*v**2 + 16*b**3*c*u**3*v + 12*b**3*c*u**3 + 22*b**3*c*u**2*v**3 - 120*b**3*c*u**2*v**2 - 72*b**3*c*u**2*v + 16*b**3*c*u**2 + 16*b**3*c*u*v**3 - 72*b**3*c*u*v**2 + 24*b**3*c*u*v + 58*b**3*c*u + 12*b**3*c*v**3 + 16*b**3*c*v**2 + 58*b**3*c*v + 36*b**3*c + 16*b**3*u**3*v**3 + 18*b**3*u**3*v**2 + 8*b**3*u**3*v + 6*b**3*u**3 + 18*b**3*u**2*v**3 - 16*b**3*u**2*v**2 - 26*b**3*u**2*v + 8*b**3*u**2 + 8*b**3*u*v**3 - 26*b**3*u*v**2 - 16*b**3*u*v + 18*b**3*u + 6*b**3*v**3 + 8*b**3*v**2 + 18*b**3*v + 16*b**3 - 4*b**2*c**4*u**2*v**2 + 6*b**2*c**4*u**2*v + b**2*c**4*u**2 + 6*b**2*c**4*u*v**2 + 7*b**2*c**4*u*v + b**2*c**4*u + b**2*c**4*v**2 + b**2*c**4*v + 4*b**2*c**3*u**3*v**3 + 6*b**2*c**3*u**3*v + b**2*c**3*u**3 - 44*b**2*c**3*u**2*v**2 + 11*b**2*c**3*u**2*v + 10*b**2*c**3*u**2 + 6*b**2*c**3*u*v**3 + 11*b**2*c**3*u*v**2 + 72*b**2*c**3*u*v + 22*b**2*c**3*u + b**2*c**3*v**3 + 10*b**2*c**3*v**2 + 22*b**2*c**3*v + 4*b**2*c**3 + 24*b**2*c**2*u**3*v**3 + 6*b**2*c**2*u**3*v**2 + 18*b**2*c**2*u**3*v + 9*b**2*c**2*u**3 + 6*b**2*c**2*u**2*v**3 - 114*b**2*c**2*u**2*v**2 - 21*b**2*c**2*u**2*v + 18*b**2*c**2*u**2 + 18*b**2*c**2*u*v**3 - 21*b**2*c**2*u*v**2 + 102*b**2*c**2*u*v + 60*b**2*c**2*u + 9*b**2*c**2*v**3 + 18*b**2*c**2*v**2 + 60*b**2*c**2*v + 24*b**2*c**2 + 24*b**2*c*u**3*v**3 + 18*b**2*c*u**3*v**2 + 12*b**2*c*u**3*v + 9*b**2*c*u**3 + 18*b**2*c*u**2*v**3 - 60*b**2*c*u**2*v**2 - 39*b**2*c*u**2*v + 12*b**2*c*u**2 + 12*b**2*c*u*v**3 - 39*b**2*c*u*v**2 + 12*b**2*c*u*v + 36*b**2*c*u + 9*b**2*c*v**3 + 12*b**2*c*v**2 + 36*b**2*c*v + 24*b**2*c + 5*b**2*u**3*v**3 + 6*b**2*u**3*v**2 + 3*b**2*u**3*v + 2*b**2*u**3 + 6*b**2*u**2*v**3 - 3*b**2*u**2*v**2 - 6*b**2*u**2*v + 3*b**2*u**2 + 3*b**2*u*v**3 - 6*b**2*u*v**2 - 3*b**2*u*v + 6*b**2*u + 2*b**2*v**3 + 3*b**2*v**2 + 6*b**2*v + 5*b**2 + b*c**5*u**2*v**2 + b*c**5*u**2*v + b*c**5*u*v**2 + b*c**5*u*v + b*c**4*u**3*v**2 + b*c**4*u**3*v + b*c**4*u**2*v**3 + 11*b*c**4*u**2*v + 3*b*c**4*u**2 + b*c**4*u*v**3 + 11*b*c**4*u*v**2 + 22*b*c**4*u*v + 3*b*c**4*u + 3*b*c**4*v**2 + 3*b*c**4*v + 6*b*c**3*u**3*v**3 + 4*b*c**3*u**3*v**2 + 10*b*c**3*u**3*v + 3*b*c**3*u**3 + 4*b*c**3*u**2*v**3 - 18*b*c**3*u**2*v**2 + 15*b*c**3*u**2*v + 10*b*c**3*u**2 + 10*b*c**3*u*v**3 + 15*b*c**3*u*v**2 + 54*b*c**3*u*v + 22*b*c**3*u + 3*b*c**3*v**3 + 10*b*c**3*v**2 + 22*b*c**3*v + 6*b*c**3 + 16*b*c**2*u**3*v**3 + 12*b*c**2*u**3*v**2 + 12*b*c**2*u**3*v + 7*b*c**2*u**3 + 12*b*c**2*u**2*v**3 - 36*b*c**2*u**2*v**2 - 9*b*c**2*u**2*v + 12*b*c**2*u**2 + 12*b*c**2*u*v**3 - 9*b*c**2*u*v**2 + 36*b*c**2*u*v + 30*b*c**2*u + 7*b*c**2*v**3 + 12*b*c**2*v**2 + 30*b*c**2*v + 16*b*c**2 + 5*b*c*u**3*v**3 + 6*b*c*u**3*v**2 + 3*b*c*u**3*v + 2*b*c*u**3 + 6*b*c*u**2*v**3 - 3*b*c*u**2*v**2 - 6*b*c*u**2*v + 3*b*c*u**2 + 3*b*c*u*v**3 - 6*b*c*u*v**2 - 3*b*c*u*v + 6*b*c*u + 2*b*c*v**3 + 3*b*c*v**2 + 6*b*c*v + 5*b*c + 2*c**5*u**2*v**2 + 2*c**5*u**2*v + 2*c**5*u*v**2 + 2*c**5*u*v + 2*c**4*u**3*v**2 + 2*c**4*u**3*v + 2*c**4*u**2*v**3 + 6*c**4*u**2*v**2 + 6*c**4*u**2*v + 2*c**4*u**2 + 2*c**4*u*v**3 + 6*c**4*u*v**2 + 6*c**4*u*v + 2*c**4*u + 2*c**4*v**2 + 2*c**4*v + 4*c**3*u**3*v**3 + 6*c**3*u**3*v**2 + 4*c**3*u**3*v + 2*c**3*u**3 + 6*c**3*u**2*v**3 + 4*c**3*u**2*v**2 + 2*c**3*u**2*v + 4*c**3*u**2 + 4*c**3*u*v**3 + 2*c**3*u*v**2 + 4*c**3*u*v + 6*c**3*u + 2*c**3*v**3 + 4*c**3*v**2 + 6*c**3*v + 4*c**3 + 5*c**2*u**3*v**3 + 6*c**2*u**3*v**2 + 3*c**2*u**3*v + 2*c**2*u**3 + 6*c**2*u**2*v**3 - 3*c**2*u**2*v**2 - 6*c**2*u**2*v + 3*c**2*u**2 + 3*c**2*u*v**3 - 6*c**2*u*v**2 - 3*c**2*u*v + 6*c**2*u + 2*c**2*v**3 + 3*c**2*v**2 + 6*c**2*v + 5*c**2
    # f(++-), v = u, unable to cancel c
    f = 5*b**6*c**3*u**6 + 12*b**6*c**3*u**5 + 3*b**6*c**3*u**4 - 8*b**6*c**3*u**3 + 3*b**6*c**3*u**2 + 12*b**6*c**3*u + 5*b**6*c**3 + 4*b**6*c**2*u**6 + 12*b**6*c**2*u**5 + 12*b**6*c**2*u**4 + 8*b**6*c**2*u**3 + 12*b**6*c**2*u**2 + 12*b**6*c**2*u + 4*b**6*c**2 + 4*b**6*c*u**5 + 10*b**6*c*u**4 + 12*b**6*c*u**3 + 10*b**6*c*u**2 + 4*b**6*c*u + 2*b**6*u**4 + 4*b**6*u**3 + 2*b**6*u**2 + 5*b**5*c**4*u**6 + 12*b**5*c**4*u**5 + 3*b**5*c**4*u**4 - 8*b**5*c**4*u**3 + 3*b**5*c**4*u**2 + 12*b**5*c**4*u + 5*b**5*c**4 + 16*b**5*c**3*u**6 + 24*b**5*c**3*u**5 - 12*b**5*c**3*u**4 - 4*b**5*c**3*u**3 + 60*b**5*c**3*u**2 + 60*b**5*c**3*u + 16*b**5*c**3 + 6*b**5*c**2*u**6 + 8*b**5*c**2*u**5 + 2*b**5*c**2*u**4 + 36*b**5*c**2*u**3 + 74*b**5*c**2*u**2 + 44*b**5*c**2*u + 6*b**5*c**2 + 2*b**5*c*u**5 + 2*b**5*c*u**4 + 22*b**5*c*u**3 + 28*b**5*c*u**2 + 6*b**5*c*u + b**5*u**4 + 2*b**5*u**3 + b**5*u**2 + 5*b**4*c**5*u**6 + 12*b**4*c**5*u**5 + 3*b**4*c**5*u**4 - 8*b**4*c**5*u**3 + 3*b**4*c**5*u**2 + 12*b**4*c**5*u + 5*b**4*c**5 + 24*b**4*c**4*u**6 + 36*b**4*c**4*u**5 - 36*b**4*c**4*u**4 - 60*b**4*c**4*u**3 + 36*b**4*c**4*u**2 + 72*b**4*c**4*u + 24*b**4*c**4 + 24*b**4*c**3*u**6 + 12*b**4*c**3*u**5 - 78*b**4*c**3*u**4 - 24*b**4*c**3*u**3 + 138*b**4*c**3*u**2 + 120*b**4*c**3*u + 24*b**4*c**3 + 4*b**4*c**2*u**6 - 32*b**4*c**2*u**4 + 24*b**4*c**2*u**3 + 92*b**4*c**2*u**2 + 44*b**4*c**2*u + 4*b**4*c**2 - 4*b**4*c*u**4 + 12*b**4*c*u**3 + 9*b**4*c*u**2 + 2*b**4*c*u + 16*b**3*c**5*u**6 + 36*b**3*c**5*u**5 - 40*b**3*c**5*u**3 + 36*b**3*c**5*u + 16*b**3*c**5 + 36*b**3*c**4*u**6 + 44*b**3*c**4*u**5 - 88*b**3*c**4*u**4 - 120*b**3*c**4*u**3 + 56*b**3*c**4*u**2 + 116*b**3*c**4*u + 36*b**3*c**4 + 16*b**3*c**3*u**6 + 8*b**3*c**3*u**5 - 88*b**3*c**3*u**4 - 44*b**3*c**3*u**3 + 108*b**3*c**3*u**2 + 88*b**3*c**3*u + 16*b**3*c**3 + b**3*c**2*u**6 + 2*b**3*c**2*u**5 - 24*b**3*c**2*u**4 + 12*b**3*c**2*u**3 + 28*b**3*c**2*u**2 + 10*b**3*c**2*u + b**3*c**2 + 18*b**2*c**5*u**6 + 40*b**2*c**5*u**5 - 8*b**2*c**5*u**4 - 60*b**2*c**5*u**3 - 8*b**2*c**5*u**2 + 40*b**2*c**5*u + 18*b**2*c**5 + 20*b**2*c**4*u**6 + 30*b**2*c**4*u**5 - 64*b**2*c**4*u**4 - 90*b**2*c**4*u**3 + 34*b**2*c**4*u**2 + 70*b**2*c**4*u + 20*b**2*c**4 + 3*b**2*c**3*u**6 + 8*b**2*c**3*u**5 - 34*b**2*c**3*u**4 - 14*b**2*c**3*u**3 + 31*b**2*c**3*u**2 + 18*b**2*c**3*u + 3*b**2*c**3 + 8*b*c**5*u**6 + 20*b*c**5*u**5 - 6*b*c**5*u**4 - 36*b*c**5*u**3 - 6*b*c**5*u**2 + 20*b*c**5*u + 8*b*c**5 + 3*b*c**4*u**6 + 10*b*c**4*u**5 - 16*b*c**4*u**4 - 24*b*c**4*u**3 + 10*b*c**4*u**2 + 14*b*c**4*u + 3*b*c**4 + c**5*u**6 + 4*c**5*u**5 - c**5*u**4 - 8*c**5*u**3 - c**5*u**2 + 4*c**5*u + c**5
    f = f.subs(u, u/2)*64
    # f(0, 0, ?) = f(?, 0, 0) = 0
    p = Poly(f, b, c, u)
    for m in p.monoms(order = 'grlex'):
        (eb, ec, eu) = m
        deg = eb + ec + eu
        print(deg, m, ec + eu if eu > 0 else '')
    print('f(cb) =', cancel(f.subs(c, b*c)/b**5))
    print('f(bc) =', cancel(f.subs(b, b*c)/c**5))
    print()
    # f(cb)
    g = 5*b**4*c**5*u**6 + 24*b**4*c**5*u**5 + 12*b**4*c**5*u**4 - 64*b**4*c**5*u**3 + 48*b**4*c**5*u**2 + 384*b**4*c**5*u + 320*b**4*c**5 + 5*b**4*c**4*u**6 + 24*b**4*c**4*u**5 + 12*b**4*c**4*u**4 - 64*b**4*c**4*u**3 + 48*b**4*c**4*u**2 + 384*b**4*c**4*u + 320*b**4*c**4 + 5*b**4*c**3*u**6 + 24*b**4*c**3*u**5 + 12*b**4*c**3*u**4 - 64*b**4*c**3*u**3 + 48*b**4*c**3*u**2 + 384*b**4*c**3*u + 320*b**4*c**3 + 16*b**3*c**5*u**6 + 72*b**3*c**5*u**5 - 320*b**3*c**5*u**3 + 1152*b**3*c**5*u + 1024*b**3*c**5 + 24*b**3*c**4*u**6 + 72*b**3*c**4*u**5 - 144*b**3*c**4*u**4 - 480*b**3*c**4*u**3 + 576*b**3*c**4*u**2 + 2304*b**3*c**4*u + 1536*b**3*c**4 + 16*b**3*c**3*u**6 + 48*b**3*c**3*u**5 - 48*b**3*c**3*u**4 - 32*b**3*c**3*u**3 + 960*b**3*c**3*u**2 + 1920*b**3*c**3*u + 1024*b**3*c**3 + 4*b**3*c**2*u**6 + 24*b**3*c**2*u**5 + 48*b**3*c**2*u**4 + 64*b**3*c**2*u**3 + 192*b**3*c**2*u**2 + 384*b**3*c**2*u + 256*b**3*c**2 + 18*b**2*c**5*u**6 + 80*b**2*c**5*u**5 - 32*b**2*c**5*u**4 - 480*b**2*c**5*u**3 - 128*b**2*c**5*u**2 + 1280*b**2*c**5*u + 1152*b**2*c**5 + 36*b**2*c**4*u**6 + 88*b**2*c**4*u**5 - 352*b**2*c**4*u**4 - 960*b**2*c**4*u**3 + 896*b**2*c**4*u**2 + 3712*b**2*c**4*u + 2304*b**2*c**4 + 24*b**2*c**3*u**6 + 24*b**2*c**3*u**5 - 312*b**2*c**3*u**4 - 192*b**2*c**3*u**3 + 2208*b**2*c**3*u**2 + 3840*b**2*c**3*u + 1536*b**2*c**3 + 6*b**2*c**2*u**6 + 16*b**2*c**2*u**5 + 8*b**2*c**2*u**4 + 288*b**2*c**2*u**3 + 1184*b**2*c**2*u**2 + 1408*b**2*c**2*u + 384*b**2*c**2 + 8*b**2*c*u**5 + 40*b**2*c*u**4 + 96*b**2*c*u**3 + 160*b**2*c*u**2 + 128*b**2*c*u + 8*b*c**5*u**6 + 40*b*c**5*u**5 - 24*b*c**5*u**4 - 288*b*c**5*u**3 - 96*b*c**5*u**2 + 640*b*c**5*u + 512*b*c**5 + 20*b*c**4*u**6 + 60*b*c**4*u**5 - 256*b*c**4*u**4 - 720*b*c**4*u**3 + 544*b*c**4*u**2 + 2240*b*c**4*u + 1280*b*c**4 + 16*b*c**3*u**6 + 16*b*c**3*u**5 - 352*b*c**3*u**4 - 352*b*c**3*u**3 + 1728*b*c**3*u**2 + 2816*b*c**3*u + 1024*b*c**3 + 4*b*c**2*u**6 - 128*b*c**2*u**4 + 192*b*c**2*u**3 + 1472*b*c**2*u**2 + 1408*b*c**2*u + 256*b*c**2 + 4*b*c*u**5 + 8*b*c*u**4 + 176*b*c*u**3 + 448*b*c*u**2 + 192*b*c*u + 8*b*u**4 + 32*b*u**3 + 32*b*u**2 + c**5*u**6 + 8*c**5*u**5 - 4*c**5*u**4 - 64*c**5*u**3 - 16*c**5*u**2 + 128*c**5*u + 64*c**5 + 3*c**4*u**6 + 20*c**4*u**5 - 64*c**4*u**4 - 192*c**4*u**3 + 160*c**4*u**2 + 448*c**4*u + 192*c**4 + 3*c**3*u**6 + 16*c**3*u**5 - 136*c**3*u**4 - 112*c**3*u**3 + 496*c**3*u**2 + 576*c**3*u + 192*c**3 + c**2*u**6 + 4*c**2*u**5 - 96*c**2*u**4 + 96*c**2*u**3 + 448*c**2*u**2 + 320*c**2*u + 64*c**2 - 16*c*u**4 + 96*c*u**3 + 144*c*u**2 + 64*c*u + 4*u**4 + 16*u**3 + 16*u**2
    p = Poly(g, b, c, u)
    for m in p.monoms(order = 'grlex'):
        (eb, ec, eu) = m
        deg = eb + ec + eu
        print(deg, m, ec + eu if eb > 0 else '')
    print('g(uc) =', cancel(g.subs(u, c*u)/c**2))
    print('g(cu) =', cancel(g.subs(c, c*u)/u**2))
    print()

    f = (3*x**4 - 5*y**3)**2 + (4*x**3 - 7*z**2)**2
    print('f =', expand(f))
    p = Poly(f, x, y, z)
    for m in p.monoms(order = 'grlex'):
        (ex, ey, ez) = m
        deg = ex + ey + ez
        # shrink x
        print(deg, m, S(4 - ey - ez)/ex if ex > 0 else '')
    print()
    f = f.subs({x: x**2, y: y**3, z: z**3})
    print('f =', expand(f))
    p = Poly(f, x, y, z)
    for m in p.monoms(order = 'grlex'):
        (ex, ey, ez) = m
        deg = ex + ey + ez
        print(deg, m, S(12 - ex + ez)/ey if ey > 0 else '')
    print()
    f = f.subs(y**3, y**2)
    print('f =', expand(f))
    p = Poly(f, x, y, z)
    for t in p.terms(order = 'grlex'):
        (mono, coeff) = t
        (ex, ey, ez) = mono
        deg = ex + ey + ez
        print(deg, mono)

if __name__ == '__main__':
    main()