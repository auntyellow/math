from sympy import *

# https://math.stackexchange.com/q/4774103

def cyc(f, vars):
    x, y, z = vars
    t = symbols('t', positive = True)
    return f.subs(z, t).subs(y, z).subs(x, y).subs(t, x)

def sum_cyc(f, vars):
    f1 = cyc(f, vars)
    return f + f1 + cyc(f1, vars)

def main():
    x, y, z = symbols('x, y, z', positive = True)
    xyz = (x + y + z)/3
    a, b, c = x/xyz, y/xyz, z/xyz
    print('a + b + c =', factor(a + b + c))

    # isolated fudging
    n, p, q, r, s, t = symbols('n, p, q, r, s, t')
    n = 1
    # n, p, q, r, s, t = 5234, 102924, 105253, 50591, 14537, 182976
    g = n*x**3 + p*(x**2*y + x**2*z) + q*(x*y**2 + x*z**2) + r*(y**2*z + y*z**2) + s*(y**3 + z**3) + t*x*y*z
    h = (n + 2*s)*(x**3 + y**3 + z**3)/3 + (p + q + r)*(x**2*y + x**2*z + x*y**2 + x*z**2 + y**2*z + y*z**2)/3 + t*x*y*z
    # factor(sum_cyc(...)) is too slow
    print('sum_cyc(g/h) =', cancel(sum_cyc(g/h, (x, y, z))))
    f = (24*a + 13)/(24*a + 13*b*c) - g**2/h**2
    # f(1,1,1) = 0
    eq1 = Eq(f.subs(x, 1).subs(y, 1).subs(z, 1), 0)
    # f(1,1,0) = 0
    eq2 = Eq(f.subs(x, 1).subs(y, 1).subs(z, 0), 0)
    eq3 = Eq(f.subs(x, 1).subs(y, 0).subs(z, 1), 0)
    eq4 = Eq(f.subs(x, 0).subs(y, 1).subs(z, 1), 0)
    # f_x,y,z(1,1,1) = 0
    eq5 = Eq(diff(f, x).subs(x, 1).subs(y, 1).subs(z, 1), 0)
    eq5_ = Eq(diff(f, x).subs(x, 2).subs(y, 2).subs(z, 2), 0)
    eq6 = Eq(diff(f, y).subs(x, 1).subs(y, 1).subs(z, 1), 0)
    eq7 = Eq(diff(f, z).subs(x, 1).subs(y, 1).subs(z, 1), 0)
    # f_y,z(x=0,1,1) = 0
    eq8 = Eq(diff(f, y).subs(x, 0).subs(y, 1).subs(z, 1), 0)
    eq8_ = Eq(diff(f, y).subs(x, 0).subs(y, 2).subs(z, 2), 0)
    eq9 = Eq(diff(f, z).subs(x, 0).subs(y, 1).subs(z, 1), 0)
    # f_x,z(1,y=0,1) = 0
    eq10 = Eq(diff(f, x).subs(x, 1).subs(y, 0).subs(z, 1), 0)
    eq10_ = Eq(diff(f, x).subs(x, 2).subs(y, 0).subs(z, 2), 0)
    eq11 = Eq(diff(f, z).subs(x, 1).subs(y, 0).subs(z, 1), 0)
    eq12 = Eq(diff(f, x).subs(x, 1).subs(y, 1).subs(z, 0), 0)
    eq13 = Eq(diff(f, y).subs(x, 1).subs(y, 1).subs(z, 0), 0)
    print('eq1:', eq1) # True
    print('eq2:', eq2)
    print('eq3:', eq3) # = eq3
    print('eq4:', eq4)
    print('eq5:', eq5)
    print('eq5\':', eq5_) # = eq5
    print('eq6:', eq6) # = eq5
    print('eq7:', eq7) # = eq5
    print('eq8:', eq8) # True
    print('eq8\':', eq8_) # True
    print('eq9:', eq9) # True
    print('eq10:', eq10)
    print('eq10\':', eq10_) # = eq10
    print('eq11:', eq11) # = eq10
    print('eq12:', eq12) # = eq10
    print('eq13:', eq13) # = eq10
    result = solve([eq2, eq4, eq5, eq10], (p, q, r))
    print('[eq2, eq4, eq5, eq10] ->', result)
    result = result[0]
    f = f.subs(p, result[0]).subs(q, result[1]).subs(r, result[2])
    u, v = symbols('u, v', positive = True)
    print('f =', factor(f.subs(y, x*(1 + u)).subs(z, x*(1 + u + v))))

    j = 54133868544*s**2*u**7 + 21743275008*s**2*u**6*v**2 + 189468539904*s**2*u**6*v + 357335619520*s**2*u**6 + 65229825024*s**2*u**5*v**3 + 387214941376*s**2*u**5*v**2 + 1072006858560*s**2*u**5*v + 968194684224*s**2*u**5 + 70825419184*s**2*u**4*v**4 + 494366003680*s**2*u**4*v**3 + 1530755837664*s**2*u**4*v**2 + 2420486710560*s**2*u**4*v + 1321869248112*s**2*u**4 + 32934463328*s**2*u**3*v**5 + 358355959840*s**2*u**3*v**4 + 1274833577728*s**2*u**3*v**3 + 2501422046304*s**2*u**3*v**2 + 2643738496224*s**2*u**3*v + 898366027968*s**2*u**3 + 5635838364*s**2*u**2*v**6 + 137902206032*s**2*u**2*v**5 + 633717593736*s**2*u**2*v**4 + 1331646358896*s**2*u**2*v**3 + 1774148208156*s**2*u**2*v**2 + 1347549041952*s**2*u**2*v + 241490204064*s**2*u**2 + 40244204*s**2*u*v**7 + 22193756648*s**2*u*v**6 + 174968614632*s**2*u*v**5 + 421600426848*s**2*u*v**4 + 452278960044*s**2*u*v**3 + 382141914840*s**2*u*v**2 + 241490204064*s**2*u*v + 75088*s**2*v**8 + 80888396*s**2*v**7 + 22060061932*s**2*v**6 + 69542043960*s**2*v**5 + 65055625320*s**2*v**4 - 33520549572*s**2*v**3 - 51013379556*s**2*v**2 - 5801472768*s*t*u**7 - 2322692736*s*t*u**6*v**2 - 20305154688*s*t*u**6*v - 38140168896*s*t*u**6 - 6968078208*s*t*u**5*v**3 - 41333341920*s*t*u**5*v**2 - 114420506688*s*t*u**5*v - 103052687808*s*t*u**5 - 7557382560*s*t*u**4*v**4 - 52570468080*s*t*u**4*v**3 - 162894125952*s*t*u**4*v**2 - 257631719520*s*t*u**4*v - 140403040656*s*t*u**4 - 3501301440*s*t*u**3*v**5 - 38030002920*s*t*u**3*v**4 - 135087407424*s*t*u**3*v**3 - 265334383320*s*t*u**3*v**2 - 280806081312*s*t*u**3*v - 95229546912*s*t*u**3 - 591462144*s*t*u**2*v**6 - 14627113644*s*t*u**2*v**5 - 66938469372*s*t*u**2*v**4 - 140369855460*s*t*u**2*v**3 - 187331508468*s*t*u**2*v**2 - 142844320368*s*t*u**2*v - 25540497936*s*t*u**2 - 2157792*s*t*u*v**7 - 2346549972*s*t*u*v**6 - 18464850108*s*t*u*v**5 - 44166344460*s*t*u*v**4 - 46928467812*s*t*u*v**3 - 39795735600*s*t*u*v**2 - 25540497936*s*t*u*v - 4315584*s*t*v**7 - 2339128116*s*t*v**6 - 7275920304*s*t*v**5 - 6605325528*s*t*v**4 + 3909518928*s*t*v**3 + 5573736684*s*t*v**2 - 91110302976*s*u**7 - 37012440192*s*u**6*v**2 - 318886060416*s*u**6*v - 601500057440*s*u**6 - 111037320576*s*u**5*v**3 - 654167708144*s*u**5*v**2 - 1804500172320*s*u**5*v - 1629983400912*s*u**5 - 120345663776*s*u**4*v**4 - 838204119320*s*u**4*v**3 - 2583342475968*s*u**4*v**2 - 4074958502280*s*u**4*v - 2225387057856*s*u**4 - 55629126592*s*u**3*v**5 - 607901957720*s*u**3*v**4 - 2159184664736*s*u**3*v**3 - 4220793147288*s*u**3*v**2 - 4450774115712*s*u**3*v - 1512152816688*s*u**3 - 9321851136*s*u**2*v**6 - 233091847468*s*u**2*v**5 - 1074612412380*s*u**2*v**4 - 2256231218652*s*u**2*v**3 - 2994636232548*s*u**2*v**2 - 2268229225032*s*u**2*v - 406358914320*s*u**2 - 13507936*s*u*v**7 - 37056459772*s*u*v**6 - 295770108732*s*u*v**5 - 715706719452*s*u*v**4 - 769249174692*s*u*v**3 - 646560725112*s*u*v**2 - 406358914320*s*u*v + 75088*s*v**8 - 27200704*s*v**7 - 36971610332*s*v**6 - 117646773360*s*v**5 - 111250146264*s*v**4 + 54757841616*s*v**3 + 85305549060*s*v**2 + 155361024*t**2*u**7 + 62008128*t**2*u**6*v**2 + 543763584*t**2*u**6*v + 1017035136*t**2*u**6 + 186024384*t**2*u**5*v**3 + 1102518144*t**2*u**5*v**2 + 3051105408*t**2*u**5*v + 2740065120*t**2*u**5 + 201526416*t**2*u**4*v**4 + 1396886400*t**2*u**4*v**3 + 4331030652*t**2*u**4*v**2 + 6850162800*t**2*u**4*v + 3725377344*t**2*u**4 + 93012192*t**2*u**3*v**5 + 1008483840*t**2*u**3*v**4 + 3576885624*t**2*u**3*v**3 + 7032071124*t**2*u**3*v**2 + 7450754688*t**2*u**3*v + 2521894752*t**2*u**3 + 15502032*t**2*u**2*v**6 + 387721152*t**2*u**2*v**5 + 1766941839*t**2*u**2*v**4 + 3697943886*t**2*u**2*v**3 + 4942759887*t**2*u**2*v**2 + 3782842128*t**2*u**2*v + 674908416*t**2*u**2 + 62008128*t**2*u*v**6 + 487016595*t**2*u*v**5 + 1156472928*t**2*u*v**4 + 1217382543*t**2*u*v**3 + 1035984690*t**2*u*v**2 + 674908416*t**2*u*v + 62008128*t**2*v**6 + 190251243*t**2*v**5 + 167540841*t**2*v**4 - 112481343*t**2*v**3 - 151779069*t**2*v**2 + 4882253376*t*u**7 + 1976537472*t*u**6*v**2 + 17087886816*t*u**6*v + 32102300592*t*u**6 + 5929612416*t*u**5*v**3 + 34911651840*t*u**5*v**2 + 96306901776*t*u**5*v + 86753341992*t*u**5 + 6419431200*t*u**4*v**4 + 44559412560*t*u**4*v**3 + 137447890956*t*u**4*v**2 + 216883354980*t*u**4*v + 118197672432*t*u**4 + 2956175040*t*u**3*v**5 + 32250394800*t*u**3*v**4 + 114384278952*t*u**3*v**3 + 223858438368*t*u**3*v**2 + 236395344864*t*u**3*v + 80155425096*t*u**3 + 488739888*t*u**2*v**6 + 12360123048*t*u**2*v**5 + 56747388654*t*u**2*v**4 + 118904302572*t*u**2*v**3 + 158104165986*t*u**2*v**2 + 120233137644*t*u**2*v + 21491047440*t*u**2 - 1078896*t*u*v**7 + 1958806824*t*u*v**6 + 15606399474*t*u*v**5 + 37486121820*t*u*v**4 + 39906493554*t*u*v**3 + 33665697504*t*u*v**2 + 21491047440*t*u*v - 2157792*t*v**7 + 1960383672*t*v**6 + 6155122314*t*v**5 + 5649635598*t*v**4 - 3206007522*t*v**3 - 4663062270*t*v**2 + 38335843392*u**7 + 15749557824*u**6*v**2 + 134175451872*u**6*v + 253123881868*u**6 + 47248673472*u**5*v**3 + 276291794752*u**5*v**2 + 759371645604*u**5*v + 686025154368*u**5 + 51116981968*u**4*v**4 + 355290857200*u**4*v**3 + 1089937957920*u**4*v**2 + 1715062885920*u**4*v + 936605518320*u**4 + 23486174816*u**3*v**5 + 257794951840*u**3*v**4 + 914256506500*u**3*v**3 + 1780506240972*u**3*v**2 + 1873211036640*u**3*v + 636312101400*u**3 + 3851113344*u**2*v**6 + 98489296496*u**2*v**5 + 455554433679*u**2*v**4 + 955696475538*u**2*v**3 + 1263685212855*u**2*v**2 + 954468152100*u**2*v + 170942886000*u**2 - 17195152*u*v**7 + 15464142560*u*v**6 + 124988121363*u*v**5 + 303736676796*u*v**4 + 327079694535*u*v**3 + 273485062350*u*v**2 + 170942886000*u*v + 18772*v**8 - 34436512*v**7 + 15488863840*v**6 + 49754355339*v**5 + 47553723165*v**4 - 22335494175*v**3 - 35658181125*v**2
    p = Poly(j, (u, v))
    print('p(u,v) =', p)
    for coef in p.coeffs():
        print(coef, '>= 0')

if __name__ == '__main__':
    main()