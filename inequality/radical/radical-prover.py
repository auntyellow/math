import logging
from sympy import *

def sign(f):
    # return 0 if sign is not determined
    u, v = symbols('u, v', negative = False)
    if f.func == Pow:
        return sign(f.args[0])**f.args[1]
    if f.func == Mul:
        s = 1
        for p in f.args:
            s0 = sign(p)
            if s0 == 0:
                return 0
            s *= s0
        return s
    p = Poly(f, u, v)
    pos = false
    neg = false
    for coef in p.coeffs():
        if coef > 0:
            if neg:
                return 0
            pos = true
        elif coef < 0:
            if pos:
                return 0
            neg = true
    return 1 if pos else (-1 if neg else 0)

def subs2(f, x0, y0):
    x, y = symbols('x, y', negative = False)
    f0, f1 = f.subs(x, x0).subs(y, y0), f.subs(y, y0).subs(x, x0)
    # https://github.com/sympy/sympy/issues/26317#issuecomment-1982069794
    if not Eq(f0, f1).simplify():
        raise Exception('{} has ambiguous values {} and {} at ({}, {})'.format(f, f0, f1, x0, y0))
    return f0

# return '' if sum(A_n**(1/pow)) - D >= 0, or the counterexample
# param A_n: 2-var functions about x and y
# param D: a positive constant
def negative(A_n, D, x0, x1, y0, y1, pow = 2):
    x, y = symbols('x, y', negative = False)

    # try to find counterexample
    pow1 = S(1)/pow
    f0 = -D
    for A_i in A_n:
        f0 += subs2(A_i**pow1, x0, y0)
    if f0 < 0:
        return 'f({},{})={}'.format(x0, y0, N(f0))

    sum_min = 0
    min_n = []
    for A_i in A_n:
        a00, a01, a10, a11 = subs2(A_i, x0, y0), subs2(A_i, x0, y1), subs2(A_i, x1, y0), subs2(A_i, x1, y1)
        min_i = min(a00**pow1, a01**pow1, a10**pow1, a11**pow1)
        sum_min += min_i
        min_n.append(min_i)
    # divide if sum_min - D < 0
    f0 = sum_min - D
    dx, dy = x1 - x0, y1 - y0
    if f0 < 0:
        logging.info('sum_min < D: [{},{},{},{}], f={}'.format(x0, x1, y0, y1, N(f0)))
    else:
        u, v = symbols('u, v', negative = False)
        non_negative = True
        for i in range(len(A_n)):
            # A_i**(1/pow) >= D*m_i/sum_min (for all i) => sum(A_i**(1/pow)) >= D
            f = A_n[i] - (min_n[i]*D/sum_min)**pow
            f = factor(f.subs(x, x0 + dx/(1 + u)).subs(y, y0 + dy/(1 + v)))
            if sign(f) <= 0:
                logging.info('unable to prove ({})**(1/{}) >= {}: [{},{},{},{}]'.format(A_n[i], pow, min_n[i]*D/sum_min, x0, x1, y0, y1))
                non_negative = False
                break
        if non_negative:
            logging.info('non_negative: [{},{},{},{}], f={}'.format(x0, x1, y0, y1, N(f0)))
            return ''
    
    # divide
    if dx < dy:
        ym = y0 + dy/S(2)
        n = negative(A_n, D, x0, x1, ym, y1, pow)
        if n != '':
            return n
        return negative(A_n, D, x0, x1, y0, ym, pow)
    xm = x0 + dx/S(2)
    n = negative(A_n, D, xm, x1, y0, y1, pow)
    if n != '':
        return n
    return negative(A_n, D, x0, xm, y0, y1, pow)

def main():
    logging.basicConfig(level = 'INFO')
    x, y = symbols('x, y', negative = False)
    # find negative at (1, 1)
    print('[' + negative([(x - 1)**2 + (y - 1)**2], 1, 0, 2, 0, 2) + ']')
    # prove non-negative
    print('[' + negative([(x - 1)**2 + (y - 1)**2 + 1], 1, 0, 2, 0, 2) + ']')
    # non-termination due to zero point (1, 1) not at the lattice
    # print('[' + negative([(x - 1)**2 + (y - 1)**2 + 1], 1, 0, 3, 0, 3) + ']')
    u, v = x, y
    # imo-2001-2.py, 11/6 <= u <= 12 and 0 <= v <= 12
    A_n = [(u + 1)**2/(u**2 + 2*u + 8*v + 9), (v + 1)**2/(8*u + v**2 + 2*v + 9), 1/(8*u*v + 8*u + 8*v + 9)]
    # sqrt(A) + sqrt(B) + sqrt(C) >= 11/10 works, too slow; 10/9 doesn't work
    print('[' + negative(A_n, 1, S(11)/6, 12, 0, 12) + ']')
    # 4575195.py
    # f(1/u,v), 0 <= 1/u <= 1/5 and 0 <= v <= 13, too slow
    A_n = [(u + 1)*(v**2 + 2*v + 5)/(u*v**2 + 2*u*v + 4*u + 3), (4*u**2*v**2 + 8*u**2*v + 5*u**2 + 2*u + 1)/((v + 1)*(3*u**2*v + 4*u**2 + 2*u + 1)), (v + 1)*(5*u**2 + 8*u + 4)/((u + 1)*(3*u*v + 4*u + 3*v + 3))]
    print('[' + negative(A_n, 3*sqrt(5)/2, 0, S(1)/5, 0, 13) + ']')
    # f(u,1/v), 0 <= u <= 13 and 0 <= 1/v <= 1/5
    A_n = [(u + 1)*(5*v**2 + 2*v + 1)/(3*u*v**2 + 4*v**2 + 2*v + 1), (u**2*v**2 + 2*u*v**2 + 5*v**2 + 8*v + 4)/((v + 1)*(u**2*v + 2*u*v + 4*v + 3)), (v + 1)*(4*u**2 + 8*u + 5)/((u + 1)*(3*u*v + 3*u + 4*v + 3))]
    print('[' + negative(A_n, 3*sqrt(5)/2, 0, 13, 0, S(1)/5) + ']')
    '''
    # 4815008.py, 1/100 <= u <= 1/2 and v <= 1
    A_n = [
        (49*u + 101)**2*(v + 1)*(2401*u**2*v + 2401*u**2 + 9898*u*v + 88298*u + 10201*v + 11801)/(64*(5764801*u**4*v + 24000396*u**3*v + 6002500*u**2*v**2 + 37470006*u**2*v + 6002500*u**2 + 24745000*u*v**2 + 246499596*u*v + 220745000*u + 25502500*v**2 + 55015201*v + 29502500)),
        (49*u + 101)**2*(v + 1)**2*(2401*u**2*v + 2401*u**2 + 9898*u*v + 88298*u + 10201*v + 11801)/(16*(49*u + 1)*(117649*u**3*v + 117649*u**3 + 960400*u**2*v**3 + 1920800*u**2*v**2 + 1447803*u**2*v + 4329003*u**2 + 3959200*u*v**3 + 7918400*u*v**2 + 4468947*u*v + 666547*u + 4080400*v**3 + 8160800*v**2 + 4090601*v + 11801)),
        (49*u + 101)**2*(v + 1)*(2401*u**2*v + 2401*u**2 + 9898*u*v + 88298*u + 10201*v + 11801)**2/(16*(49*u + 1)*(282475249*u**5*v**3 + 282475249*u**5*v**2 + 2334744405*u**4*v**3 + 4640664805*u**4*v**2 + 4611840800*u**4*v + 2305920400*u**4 + 7248354890*u**3*v**3 + 26260433290*u**3*v**2 + 188614876800*u**3*v + 169602798400*u**3 + 10041966410*u**2*v**3 + 68824208810*u**2*v**2 + 741440324800*u**2*v + 3141282082400*u**2 + 5300898645*u*v**3 + 86076497045*u*v**2 + 814027356800*u*v + 833603758400*u + 104060401*v**3 + 41728220801*v**2 + 96305600800*v + 55705440400)),
    ]
    print('[' + negative(A_n, 5/4, 0, 1, 0, 1) + ']')
    # 4815008.py, 1/100 <= u <= 1/2 and v >= 1, too slow
    A_n = [
        (49*u + 101)**2*(v + 1)*(2401*u**2*v + 2401*u**2 + 88298*u*v + 9898*u + 11801*v + 10201)/(64*(5764801*u**4*v + 24000396*u**3*v + 6002500*u**2*v**2 + 37470006*u**2*v + 6002500*u**2 + 220745000*u*v**2 + 246499596*u*v + 24745000*u + 29502500*v**2 + 55015201*v + 25502500)),
        (49*u + 101)**2*(v + 1)**2*(2401*u**2*v + 2401*u**2 + 88298*u*v + 9898*u + 11801*v + 10201)/(16*(49*u + 1)*(117649*u**3*v**3 + 117649*u**3*v**2 + 4329003*u**2*v**3 + 1447803*u**2*v**2 + 1920800*u**2*v + 960400*u**2 + 666547*u*v**3 + 4468947*u*v**2 + 7918400*u*v + 3959200*u + 11801*v**3 + 4090601*v**2 + 8160800*v + 4080400)),
        (49*u + 101)**2*(v + 1)*(2401*u**2*v + 2401*u**2 + 88298*u*v + 9898*u + 11801*v + 10201)**2/(16*(49*u + 1)*(282475249*u**5*v + 282475249*u**5 + 2305920400*u**4*v**3 + 4611840800*u**4*v**2 + 4640664805*u**4*v + 2334744405*u**4 + 169602798400*u**3*v**3 + 188614876800*u**3*v**2 + 26260433290*u**3*v + 7248354890*u**3 + 3141282082400*u**2*v**3 + 741440324800*u**2*v**2 + 68824208810*u**2*v + 10041966410*u**2 + 833603758400*u*v**3 + 814027356800*u*v**2 + 86076497045*u*v + 5300898645*u + 55705440400*v**3 + 96305600800*v**2 + 41728220801*v + 104060401)),
    ]
    print('[' + negative(A_n, 5/4, 0, 1, 0, 1) + ']')
    # 4815008.py, 3/2 <= u <= 100 and v <= 1, too slow
    A_n = [
        (197*u + 5)**2*(v + 1)*(38809*u**2*v + 38809*u**2 + 1970*u*v + 8274*u + 25*v + 121)/(64*(1506138481*u**4*v + 122325968*u**3*v + 38809*u**2*v**2 + 3725664*u**2*v + 38809*u**2 + 1970*u*v**2 + 57524*u*v + 8274*u + 25*v**2 + 371*v + 121)),
        (197*u + 5)**2*(v + 1)**2*(38809*u**2*v + 38809*u**2 + 1970*u*v + 8274*u + 25*v + 121)/(16*(197*u + 3)*(7645373*u**3*v + 7645373*u**3 + 310472*u**2*v**3 + 620944*u**2*v**2 + 814989*u**2*v + 1746405*u**2 + 15760*u*v**3 + 31520*u*v**2 + 26595*u*v + 48659*u + 200*v**3 + 400*v**2 + 275*v + 363)),
        (197*u + 5)**2*(v + 1)*(38809*u**2*v + 38809*u**2 + 1970*u*v + 8274*u + 25*v + 121)**2/(16*(197*u + 3)*(296709280757*u**5*v**3 + 296709280757*u**5*v**2 + 34641185063*u**4*v**3 + 46690292911*u**4*v**2 + 24098215696*u**4*v + 12049107848*u**4 + 1605528330*u**3*v**3 + 2828788010*u**3*v**2 + 6360950336*u**3*v + 5137690656*u**3 + 36868550*u**2*v**3 + 83439350*u**2*v**2 + 351454304*u**2*v + 622806832*u**2 + 418625*u*v**3 + 1206625*u*v**2 + 7123520*u*v + 16018464*u + 1875*v**3 + 6875*v**2 + 48400*v + 117128)),
    ]
    print('[' + negative(A_n, 5/4, 0, 1, 0, 1) + ']')
    # 4815008.py, 3/2 <= u <= 100 and v >= 1, too slow
    A_n = [
        (197*u + 5)**2*(v + 1)*(38809*u**2*v + 38809*u**2 + 8274*u*v + 1970*u + 121*v + 25)/(64*(1506138481*u**4*v + 122325968*u**3*v + 38809*u**2*v**2 + 3725664*u**2*v + 38809*u**2 + 8274*u*v**2 + 57524*u*v + 1970*u + 121*v**2 + 371*v + 25)),
        (197*u + 5)**2*(v + 1)**2*(38809*u**2*v + 38809*u**2 + 8274*u*v + 1970*u + 121*v + 25)/(16*(197*u + 3)*(7645373*u**3*v**3 + 7645373*u**3*v**2 + 1746405*u**2*v**3 + 814989*u**2*v**2 + 620944*u**2*v + 310472*u**2 + 48659*u*v**3 + 26595*u*v**2 + 31520*u*v + 15760*u + 363*v**3 + 275*v**2 + 400*v + 200)),
        (197*u + 5)**2*(v + 1)*(38809*u**2*v + 38809*u**2 + 8274*u*v + 1970*u + 121*v + 25)**2/(16*(197*u + 3)*(296709280757*u**5*v + 296709280757*u**5 + 12049107848*u**4*v**3 + 24098215696*u**4*v**2 + 46690292911*u**4*v + 34641185063*u**4 + 5137690656*u**3*v**3 + 6360950336*u**3*v**2 + 2828788010*u**3*v + 1605528330*u**3 + 622806832*u**2*v**3 + 351454304*u**2*v**2 + 83439350*u**2*v + 36868550*u**2 + 16018464*u*v**3 + 7123520*u*v**2 + 1206625*u*v + 418625*u + 117128*v**3 + 48400*v**2 + 6875*v + 1875)),
    ]
    print('[' + negative(A_n, 5/4, 0, 1, 0, 1) + ']')
    # 4815008.py, u >= 100 and 1/100 <= v <= 100
    A_n = [
        101*(u + 100)**2*(99*v + 1)*(9999*u**2*v + 101*u**2 + 1999800*u*v + 180200*u + 99990000*v + 1010000)/(16*(99980001*u**4*v**2 + 2019798*u**4*v + 10201*u**4 + 19996000200*u**3*v**2 + 2003799600*u**3*v + 18200200*u**3 + 999800010000*u**2*v**2 + 60193980000*u**2*v + 106010000*u**2 + 7999200000000*u*v + 800000000*u + 399960000000000*v + 40000000000)),
        10201*(u + 100)**2*(99*v + 1)**2*(9999*u**2*v + 101*u**2 + 1999800*u*v + 180200*u + 99990000*v + 1010000)/(6400*(999700029999*u**3*v**3 + 20295940203*u**3*v**2 + 104019597*u**3*v + 10201*u**3 + 199940005999800*u**2*v**3 + 4059188040600*u**2*v**2 + 23303669400*u**2*v + 27290200*u**2 + 9997000299990000*u*v**3 + 202959402030000*u*v**2 + 1540145970000*u*v + 45152010000*u + 24997500000000*v + 252500000000)),
        101*(u + 100)**2*(99*v + 1)*(9999*u**2*v + 101*u**2 + 1999800*u*v + 180200*u + 99990000*v + 1010000)**2/(160000*(399920004*u**5*v**2 + 8079192*u**5*v + 40804*u**5 + 999700029999*u**4*v**3 + 170265941703*u**4*v**2 + 16032426597*u**4*v + 145601701*u**4 + 399880011999600*u**3*v**3 + 28114376281200*u**3*v**2 + 3045307438800*u**3*v + 130704280400*u**3 + 59982001799940000*u**2*v**3 + 2217556422180000*u**2*v**2 + 160425755820000*u**2*v + 1456022060000*u**2 + 3998800119996000000*u*v**3 + 81183760812000000*u*v**2 + 816038388000000*u*v + 4080804000000*u + 99970002999900000000*v**3 + 1029794010300000000*v**2 + 202979700000000*v + 10100000000)),
    ]
    print('[' + negative(A_n, 5/4, 0, 1, 0, 1) + ']')
    # 4261358.py, 0 <= 1/u <= 1/3 /\ 0 <= v <= 12, too slow
    A_n = [
        u*(2*u*v + 3*u + v + 2)**5/(243*(u + 1)**3*(v + 1)**2*(u*v + 3*u + 1)**3),
        (2*u*v + 3*u + v + 2)**5/(243*(u + 1)**2*(v + 1)**3*(u*v + 3*u + 1)**3),
        (2*u*v + 3*u + v + 2)**5/(243*(u + 1)**2*(v + 1)**2*(u*v + 3*u + 1)**3),
    ]
    print('[' + negative(A_n, 1, 0, S(1)/3, 0, 12, pow = 3) + ']')
    '''

if __name__ == '__main__':
    main()