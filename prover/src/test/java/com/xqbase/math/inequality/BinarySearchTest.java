package com.xqbase.math.inequality;

import static com.xqbase.math.inequality.BinarySearch.binarySearch;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import org.junit.BeforeClass;
import org.junit.Test;

import com.xqbase.math.polys.Mono;
import com.xqbase.math.polys.Rational;
import com.xqbase.math.polys.RationalPoly;

public class BinarySearchTest {
	private static final Rational _0 = Rational.valueOf(0);

	@BeforeClass
	public static void startup() {
		Logger rootLogger = LogManager.getLogManager().getLogger("");
		rootLogger.setLevel(Level.FINE);
		for (Handler h : rootLogger.getHandlers()) {
			h.setLevel(Level.FINE);
		}
	}

	@Test
	public void testBasic() {
		RationalPoly f = new RationalPoly("ab", "a^2-b");
		assertEquals("[0, 1/2, -1/2]", Arrays.toString(binarySearch(f)));

		// 1e-22
		String e_22 = "1/10000000000000000000000";
		// fibonacci 91, 92
		String vars = "x";
		long m = 4660046610375530309L;
		long n = 7540113804746346429L;
		f = new RationalPoly(vars, m + "*x - " + n);
		f = new RationalPoly(vars).addMul(f, f);
		assertTrue(binarySearch(new RationalPoly(vars, e_22).add(f)).length == 0);
		f = new RationalPoly(vars, "-" + e_22).add(f);
		Rational[] result = binarySearch(f);
		assertTrue(result[1].signum() < 0);
		assertEquals(result[1], subs(f, Arrays.copyOfRange(result, 0, 1), 'x'));
		/*
		// doesn't work due to critical points near (1, 3, 1) and (1, 2, 1, 1) 
		// (3*x - y)**2 + (x - z)**2, 
		vars = "xyz";
		f = new RationalPoly(vars, "10*x**2 - 6*x*y - 2*x*z + y**2 + z**2");
		// (2*w - x)**2 + (w - y)**2 + (w - z)**2
		vars = "wxyz";
		f = new RationalPoly(vars, "6*w**2 - 4*w*x - 2*w*y - 2*w*z + x**2 + y**2 + z**2");
		*/
	}

	private static Rational	subs(RationalPoly f, Rational[] values, char startsWith) {
		RationalPoly f1 = f;
		StringBuilder vars = new StringBuilder();
		for (int i = 0; i < values.length; i ++) {
			char from = (char) (startsWith + i);
			f1 = f1.subs(from, values[i]);
			vars.append(from);
		}
		Rational c0 = f1.remove(new Mono(vars.toString(), ""));
		assertTrue(f1.isEmpty());
		return c0 == null ? _0 : c0;
	}

	@Test
	public void testMathSE() {
		// https://math.stackexchange.com/q/3831395
		RationalPoly f = new RationalPoly("x", "x**5 - 1/2*x**3 - x + 4/5");
		assertTrue(binarySearch(f).length == 0);
		// https://math.stackexchange.com/q/83670
		f = new RationalPoly("x", "x**8 - x**7 + 2*x**6 - 2*x**5 + 3*x**4 - 3*x**3 + 4*x**2 - 4*x + 5/2");
		assertTrue(binarySearch(f).length == 0);
		// https://math.stackexchange.com/q/4765187
		// (1 + x)**7 - 7**(7/3)*x**4
		f = new RationalPoly("x", "x**7 + 7*x**6 + 21*x**5 - 59*x**4 + 35*x**3 + 21*x**2 + 7*x + 1");
		assertTrue(binarySearch(f).length == 0);
		// https://math.stackexchange.com/q/1775572
		f = new RationalPoly("uv", "25*u**8*v**7 + 310*u**8*v**6 + 1620*u**8*v**5 + 4640*u**8*v**4 + 7960*u**8*v**3 + 8400*u**8*v**2 + 5280*u**8*v + 1600*u**8 + 75*u**7*v**7 + 1025*u**7*v**6 + 5760*u**7*v**5 + 17340*u**7*v**4 + 30696*u**7*v**3 + 33336*u**7*v**2 + 22272*u**7*v + 7648*u**7 + 75*u**6*v**7 + 1215*u**6*v**6 + 7605*u**6*v**5 + 24150*u**6*v**4 + 42816*u**6*v**3 + 45384*u**6*v**2 + 31944*u**6*v + 13680*u**6 + 65*u**5*v**7 + 1091*u**5*v**6 + 7047*u**5*v**5 + 21924*u**5*v**4 + 33751*u**5*v**3 + 24738*u**5*v**2 + 12868*u**5*v + 10073*u**5 + 351*u**4*v**6 + 3723*u**4*v**5 + 14112*u**4*v**4 + 20682*u**4*v**3 + 3441*u**4*v**2 - 11196*u**4*v + 531*u**4 + 741*u**3*v**5 + 5232*u**3*v**4 + 10740*u**3*v**3 + 1656*u**3*v**2 - 11115*u**3*v - 2193*u**3 + 754*u**2*v**4 + 3334*u**2*v**3 + 3078*u**2*v**2 - 1156*u**2*v + 738*u**2 + 390*u*v**3 + 1284*u*v**2 + 1590*u*v + 1554*u + 156*v**2 + 468*v + 468");
		assertTrue(binarySearch(f).length == 0);
		f = new RationalPoly("uv", "65*u**10*v**8 + 865*u**9*v**8 + 546*u**9*v**7 + 5145*u**8*v**8 + 6417*u**8*v**7 + 1989*u**8*v**6 + 18095*u**7*v**8 + 33168*u**7*v**7 + 20196*u**7*v**6 + 4095*u**7*v**5 + 41930*u**6*v**8 + 99425*u**6*v**7 + 88116*u**6*v**6 + 34758*u**6*v**5 + 5226*u**6*v**4 + 67380*u**5*v**8 + 191868*u**5*v**7 + 216555*u**5*v**6 + 122112*u**5*v**5 + 35385*u**5*v**4 + 4329*u**5*v**3 + 76600*u**4*v**8 + 249636*u**4*v**7 + 330390*u**4*v**6 + 229495*u**4*v**5 + 92637*u**4*v**4 + 22215*u**4*v**3 + 2392*u**4*v**2 + 61160*u**3*v**8 + 221472*u**3*v**7 + 324744*u**3*v**6 + 249474*u**3*v**5 + 115662*u**3*v**4 + 38988*u**3*v**3 + 9242*u**3*v**2 + 858*u**3*v + 32880*u**2*v**8 + 130488*u**2*v**7 + 204816*u**2*v**6 + 159063*u**2*v**5 + 67386*u**2*v**4 + 24186*u**2*v**3 + 10974*u**2*v**2 + 2766*u**2*v + 156*u**2 + 10720*u*v**8 + 46560*u*v**7 + 77496*u*v**6 + 57643*u*v**5 + 14382*u*v**4 + 150*u*v**3 + 4108*u*v**2 + 3072*u*v + 468*u + 1600*v**8 + 7648*v**7 + 13680*v**6 + 10073*v**5 + 531*v**4 - 2193*v**3 + 738*v**2 + 1554*v + 468");
		assertTrue(binarySearch(f).length == 0);
		// https://math.stackexchange.com/q/4850712
		// from 4850712.py
		// m, n = 5, 13, non-negative, https://math.stackexchange.com/q/1777075
		f = new RationalPoly("uv", "25*u**5*v**5 + 185*u**5*v**4 + 545*u**5*v**3 + 895*u**5*v**2 + 960*u**5*v + 540*u**5 + 50*u**4*v**5 + 365*u**4*v**4 + 920*u**4*v**3 + 1111*u**4*v**2 + 1214*u**4*v + 1104*u**4 + 90*u**3*v**5 + 656*u**3*v**4 + 1392*u**3*v**3 + 316*u**3*v**2 - 1206*u**3*v - 66*u**3 + 216*u**2*v**4 + 800*u**2*v**3 + 120*u**2*v**2 - 1712*u**2*v - 744*u**2 + 108*u*v**3 + 132*u*v**2 - 216*u*v + 12*u + 72*v**2 + 216*v + 216");
		assertTrue(binarySearch(f).length == 0);
		f = new RationalPoly("uv", "90*u**7*v**5 + 820*u**6*v**5 + 396*u**6*v**4 + 3150*u**5*v**5 + 2918*u**5*v**4 + 630*u**5*v**3 + 6655*u**4*v**5 + 8691*u**4*v**4 + 3314*u**4*v**3 + 504*u**4*v**2 + 8430*u**3*v**5 + 13464*u**3*v**4 + 6132*u**3*v**3 + 1600*u**3*v**2 + 252*u**3*v + 6475*u**2*v**5 + 11601*u**2*v**4 + 4480*u**2*v**3 + 792*u**2*v**2 + 600*u**2*v + 72*u**2 + 2820*u*v**5 + 5410*u*v**4 + 876*u*v**3 - 1264*u*v**2 + 252*u*v + 216*u + 540*v**5 + 1104*v**4 - 66*v**3 - 744*v**2 + 12*v + 216");
		assertTrue(binarySearch(f).length == 0);
		// m, n = 63, 164, non-negative
		f = new RationalPoly("uv", "3969*u**5*v**5 + 29358*u**5*v**4 + 86436*u**5*v**3 + 141876*u**5*v**2 + 152208*u**5*v + 85680*u**5 + 7938*u**4*v**5 + 57897*u**4*v**4 + 145656*u**4*v**3 + 175208*u**4*v**2 + 191288*u**4*v + 174656*u**4 + 14301*u**3*v**5 + 104144*u**3*v**4 + 220409*u**3*v**3 + 47733*u**3*v**2 - 195256*u**3*v - 12543*u**3 + 34277*u**2*v**4 + 126554*u**2*v**3 + 16807*u**2*v**2 - 275902*u**2*v - 120755*u**2 + 17025*u*v**3 + 20119*u*v**2 - 36118*u*v + 513*u + 11350*v**2 + 34050*v + 34050");
		assertTrue(binarySearch(f).length == 0);
		f = new RationalPoly("uv", "14301*u**7*v**5 + 130284*u**6*v**5 + 62879*u**6*v**4 + 500409*u**5*v**5 + 463216*u**5*v**4 + 99880*u**5*v**3 + 1057014*u**4*v**5 + 1379137*u**4*v**4 + 524834*u**4*v**3 + 79677*u**4*v**2 + 1338624*u**3*v**5 + 2135416*u**3*v**4 + 968896*u**3*v**3 + 251746*u**3*v**2 + 39725*u**3*v + 1027908*u**2*v**5 + 1838608*u**2*v**4 + 703327*u**2*v**3 + 119983*u**2*v**2 + 93894*u**2*v + 11350*u**2 + 447552*u*v**5 + 856648*u*v**4 + 132541*u*v**3 - 207118*u*v**2 + 37657*u*v + 34050*u + 85680*v**5 + 174656*v**4 - 12543*v**3 - 120755*v**2 + 513*v + 34050");
		assertTrue(binarySearch(f).length == 0);
		// m, n = 121, 315, negative
		f = new RationalPoly("uv", "14641*u**5*v**5 + 108295*u**5*v**4 + 318835*u**5*v**3 + 523325*u**5*v**2 + 561440*u**5*v + 316052*u**5 + 29282*u**4*v**5 + 213565*u**4*v**4 + 537240*u**4*v**3 + 646135*u**4*v**2 + 705410*u**4*v + 644184*u**4 + 52756*u**3*v**5 + 384170*u**3*v**4 + 812964*u**3*v**3 + 175708*u**3*v**2 - 720846*u**3*v - 46584*u**3 + 126440*u**2*v**4 + 466768*u**2*v**3 + 61656*u**2*v**2 - 1018384*u**2*v - 445848*u**2 + 62784*u*v**3 + 74088*u*v**2 - 133512*u*v + 1680*u + 41856*v**2 + 125568*v + 125568");
		Rational[] result = binarySearch(f);
		assertTrue(result[2].signum() < 0);
		assertEquals(result[2], subs(f, Arrays.copyOfRange(result, 0, 2), 'u'));
		f = new RationalPoly("uv", "52756*u**7*v**5 + 480612*u**6*v**5 + 231952*u**6*v**4 + 1845976*u**5*v**5 + 1708722*u**5*v**4 + 368420*u**5*v**3 + 3899225*u**4*v**5 + 5087315*u**4*v**4 + 1935830*u**4*v**3 + 293864*u**4*v**2 + 4938010*u**3*v**5 + 7876880*u**3*v**4 + 3573396*u**3*v**3 + 928304*u**3*v**2 + 146496*u**3*v + 3791777*u**2*v**5 + 6781845*u**2*v**4 + 2593252*u**2*v**3 + 441720*u**2*v**2 + 346152*u**2*v + 41856*u**2 + 1650924*u*v**5 + 3159694*u*v**4 + 487926*u*v**3 - 765008*u*v**2 + 138552*u*v + 125568*u + 316052*v**5 + 644184*v**4 - 46584*v**3 - 445848*v**2 + 1680*v + 125568");
		assertTrue(binarySearch(f).length == 0);
		// https://math.stackexchange.com/q/2016364
		// results from 2016364.py
		// f(---+)
		f = new RationalPoly("abcd", "49*a**4*b**4*c**4*d**4 + 136*a**4*b**4*c**4*d**3 + 120*a**4*b**4*c**4*d**2 + 32*a**4*b**4*c**4*d + 164*a**4*b**4*c**3*d**4 + 448*a**4*b**4*c**3*d**3 + 384*a**4*b**4*c**3*d**2 + 96*a**4*b**4*c**3*d + 199*a**4*b**4*c**2*d**4 + 534*a**4*b**4*c**2*d**3 + 445*a**4*b**4*c**2*d**2 + 108*a**4*b**4*c**2*d + 4*a**4*b**4*c**2 + 102*a**4*b**4*c*d**4 + 268*a**4*b**4*c*d**3 + 218*a**4*b**4*c*d**2 + 56*a**4*b**4*c*d + 8*a**4*b**4*c + 19*a**4*b**4*d**4 + 50*a**4*b**4*d**3 + 43*a**4*b**4*d**2 + 16*a**4*b**4*d + 5*a**4*b**4 + 164*a**4*b**3*c**4*d**4 + 448*a**4*b**3*c**4*d**3 + 384*a**4*b**3*c**4*d**2 + 96*a**4*b**3*c**4*d + 544*a**4*b**3*c**3*d**4 + 1456*a**4*b**3*c**3*d**3 + 1200*a**4*b**3*c**3*d**2 + 272*a**4*b**3*c**3*d + 652*a**4*b**3*c**2*d**4 + 1704*a**4*b**3*c**2*d**3 + 1348*a**4*b**3*c**2*d**2 + 288*a**4*b**3*c**2*d + 16*a**4*b**3*c**2 + 328*a**4*b**3*c*d**4 + 832*a**4*b**3*c*d**3 + 632*a**4*b**3*c*d**2 + 144*a**4*b**3*c*d + 32*a**4*b**3*c + 60*a**4*b**3*d**4 + 152*a**4*b**3*d**3 + 124*a**4*b**3*d**2 + 48*a**4*b**3*d + 20*a**4*b**3 + 198*a**4*b**2*c**4*d**4 + 528*a**4*b**2*c**4*d**3 + 432*a**4*b**2*c**4*d**2 + 96*a**4*b**2*c**4*d + 648*a**4*b**2*c**3*d**4 + 1680*a**4*b**2*c**3*d**3 + 1296*a**4*b**2*c**3*d**2 + 240*a**4*b**2*c**3*d + 763*a**4*b**2*c**2*d**4 + 1912*a**4*b**2*c**2*d**3 + 1380*a**4*b**2*c**2*d**2 + 220*a**4*b**2*c**2*d + 25*a**4*b**2*c**2 + 374*a**4*b**2*c*d**4 + 896*a**4*b**2*c*d**3 + 600*a**4*b**2*c*d**2 + 104*a**4*b**2*c*d + 50*a**4*b**2*c + 67*a**4*b**2*d**4 + 160*a**4*b**2*d**3 + 120*a**4*b**2*d**2 + 52*a**4*b**2*d + 31*a**4*b**2 + 100*a**4*b*c**4*d**4 + 256*a**4*b*c**4*d**3 + 192*a**4*b*c**4*d**2 + 32*a**4*b*c**4*d + 320*a**4*b*c**3*d**4 + 784*a**4*b*c**3*d**3 + 528*a**4*b*c**3*d**2 + 48*a**4*b*c**3*d + 366*a**4*b*c**2*d**4 + 848*a**4*b*c**2*d**3 + 496*a**4*b*c**2*d**2 + 8*a**4*b*c**2*d + 18*a**4*b*c**2 + 172*a**4*b*c*d**4 + 368*a**4*b*c*d**3 + 176*a**4*b*c*d**2 + 36*a**4*b*c + 30*a**4*b*d**4 + 64*a**4*b*d**3 + 40*a**4*b*d**2 + 24*a**4*b*d + 22*a**4*b + 18*a**4*c**4*d**4 + 44*a**4*c**4*d**3 + 30*a**4*c**4*d**2 + 4*a**4*c**4*d + a**4*c**4 + 56*a**4*c**3*d**4 + 128*a**4*c**3*d**3 + 72*a**4*c**3*d**2 + 4*a**4*c**3 + 62*a**4*c**2*d**4 + 130*a**4*c**2*d**3 + 55*a**4*c**2*d**2 - 8*a**4*c**2*d + 11*a**4*c**2 + 28*a**4*c*d**4 + 52*a**4*c*d**3 + 14*a**4*c*d**2 + 14*a**4*c + 5*a**4*d**4 + 10*a**4*d**3 + 7*a**4*d**2 + 8*a**4*d + 7*a**4 + 164*a**3*b**4*c**4*d**4 + 448*a**3*b**4*c**4*d**3 + 384*a**3*b**4*c**4*d**2 + 96*a**3*b**4*c**4*d + 544*a**3*b**4*c**3*d**4 + 1456*a**3*b**4*c**3*d**3 + 1200*a**3*b**4*c**3*d**2 + 272*a**3*b**4*c**3*d + 652*a**3*b**4*c**2*d**4 + 1704*a**3*b**4*c**2*d**3 + 1348*a**3*b**4*c**2*d**2 + 288*a**3*b**4*c**2*d + 16*a**3*b**4*c**2 + 328*a**3*b**4*c*d**4 + 832*a**3*b**4*c*d**3 + 632*a**3*b**4*c*d**2 + 144*a**3*b**4*c*d + 32*a**3*b**4*c + 60*a**3*b**4*d**4 + 152*a**3*b**4*d**3 + 124*a**3*b**4*d**2 + 48*a**3*b**4*d + 20*a**3*b**4 + 544*a**3*b**3*c**4*d**4 + 1456*a**3*b**3*c**4*d**3 + 1200*a**3*b**3*c**4*d**2 + 272*a**3*b**3*c**4*d + 1784*a**3*b**3*c**3*d**4 + 4648*a**3*b**3*c**3*d**3 + 3624*a**3*b**3*c**3*d**2 + 696*a**3*b**3*c**3*d + 2104*a**3*b**3*c**2*d**4 + 5304*a**3*b**3*c**2*d**3 + 3880*a**3*b**3*c**2*d**2 + 648*a**3*b**3*c**2*d + 64*a**3*b**3*c**2 + 1032*a**3*b**3*c*d**4 + 2488*a**3*b**3*c*d**3 + 1688*a**3*b**3*c*d**2 + 296*a**3*b**3*c*d + 128*a**3*b**3*c + 184*a**3*b**3*d**4 + 440*a**3*b**3*d**3 + 328*a**3*b**3*d**2 + 136*a**3*b**3*d + 80*a**3*b**3 + 648*a**3*b**2*c**4*d**4 + 1680*a**3*b**2*c**4*d**3 + 1296*a**3*b**2*c**4*d**2 + 240*a**3*b**2*c**4*d + 2088*a**3*b**2*c**3*d**4 + 5208*a**3*b**2*c**3*d**3 + 3672*a**3*b**2*c**3*d**2 + 456*a**3*b**2*c**3*d + 2404*a**3*b**2*c**2*d**4 + 5704*a**3*b**2*c**2*d**3 + 3576*a**3*b**2*c**2*d**2 + 232*a**3*b**2*c**2*d + 100*a**3*b**2*c**2 + 1136*a**3*b**2*c*d**4 + 2504*a**3*b**2*c*d**3 + 1320*a**3*b**2*c*d**2 + 56*a**3*b**2*c*d + 200*a**3*b**2*c + 196*a**3*b**2*d**4 + 424*a**3*b**2*d**3 + 264*a**3*b**2*d**2 + 136*a**3*b**2*d + 124*a**3*b**2 + 320*a**3*b*c**4*d**4 + 784*a**3*b*c**4*d**3 + 528*a**3*b*c**4*d**2 + 48*a**3*b*c**4*d + 1000*a**3*b*c**3*d**4 + 2296*a**3*b*c**3*d**3 + 1272*a**3*b*c**3*d**2 - 88*a**3*b*c**3*d + 1104*a**3*b*c**2*d**4 + 2312*a**3*b*c**2*d**3 + 904*a**3*b*c**2*d**2 - 328*a**3*b*c**2*d + 72*a**3*b*c**2 + 488*a**3*b*c*d**4 + 872*a**3*b*c*d**3 + 104*a**3*b*c*d**2 - 200*a**3*b*c*d + 144*a**3*b*c + 80*a**3*b*d**4 + 136*a**3*b*d**3 + 40*a**3*b*d**2 + 56*a**3*b*d + 88*a**3*b + 56*a**3*c**4*d**4 + 128*a**3*c**4*d**3 + 72*a**3*c**4*d**2 + 4*a**3*c**4 + 168*a**3*c**3*d**4 + 344*a**3*c**3*d**3 + 120*a**3*c**3*d**2 - 56*a**3*c**3*d + 16*a**3*c**3 + 176*a**3*c**2*d**4 + 304*a**3*c**2*d**3 + 4*a**3*c**2*d**2 - 104*a**3*c**2*d + 44*a**3*c**2 + 72*a**3*c*d**4 + 88*a**3*c*d**3 - 64*a**3*c*d**2 - 40*a**3*c*d + 56*a**3*c + 12*a**3*d**4 + 16*a**3*d**3 + 4*a**3*d**2 + 24*a**3*d + 28*a**3 + 199*a**2*b**4*c**4*d**4 + 534*a**2*b**4*c**4*d**3 + 445*a**2*b**4*c**4*d**2 + 108*a**2*b**4*c**4*d + 4*a**2*b**4*c**4 + 652*a**2*b**4*c**3*d**4 + 1704*a**2*b**4*c**3*d**3 + 1348*a**2*b**4*c**3*d**2 + 288*a**2*b**4*c**3*d + 16*a**2*b**4*c**3 + 768*a**2*b**4*c**2*d**4 + 1944*a**2*b**4*c**2*d**3 + 1452*a**2*b**4*c**2*d**2 + 288*a**2*b**4*c**2*d + 48*a**2*b**4*c**2 + 376*a**2*b**4*c*d**4 + 912*a**2*b**4*c*d**3 + 640*a**2*b**4*c*d**2 + 144*a**2*b**4*c*d + 64*a**2*b**4*c + 67*a**2*b**4*d**4 + 162*a**2*b**4*d**3 + 127*a**2*b**4*d**2 + 60*a**2*b**4*d + 34*a**2*b**4 + 652*a**2*b**3*c**4*d**4 + 1704*a**2*b**3*c**4*d**3 + 1348*a**2*b**3*c**4*d**2 + 288*a**2*b**3*c**4*d + 16*a**2*b**3*c**4 + 2104*a**2*b**3*c**3*d**4 + 5304*a**2*b**3*c**3*d**3 + 3880*a**2*b**3*c**3*d**2 + 648*a**2*b**3*c**3*d + 64*a**2*b**3*c**3 + 2424*a**2*b**3*c**2*d**4 + 5832*a**2*b**3*c**2*d**3 + 3864*a**2*b**3*c**2*d**2 + 504*a**2*b**3*c**2*d + 192*a**2*b**3*c**2 + 1144*a**2*b**3*c*d**4 + 2568*a**2*b**3*c*d**3 + 1480*a**2*b**3*c*d**2 + 216*a**2*b**3*c*d + 256*a**2*b**3*c + 196*a**2*b**3*d**4 + 432*a**2*b**3*d**3 + 292*a**2*b**3*d**2 + 168*a**2*b**3*d + 136*a**2*b**3 + 763*a**2*b**2*c**4*d**4 + 1912*a**2*b**2*c**4*d**3 + 1380*a**2*b**2*c**4*d**2 + 220*a**2*b**2*c**4*d + 25*a**2*b**2*c**4 + 2404*a**2*b**2*c**3*d**4 + 5704*a**2*b**2*c**3*d**3 + 3576*a**2*b**2*c**3*d**2 + 232*a**2*b**2*c**3*d + 100*a**2*b**2*c**3 + 2676*a**2*b**2*c**2*d**4 + 5880*a**2*b**2*c**2*d**3 + 2952*a**2*b**2*c**2*d**2 - 168*a**2*b**2*c**2*d + 300*a**2*b**2*c**2 + 1192*a**2*b**2*c*d**4 + 2296*a**2*b**2*c*d**3 + 696*a**2*b**2*c*d**2 - 152*a**2*b**2*c*d + 400*a**2*b**2*c + 193*a**2*b**2*d**4 + 352*a**2*b**2*d**3 + 156*a**2*b**2*d**2 + 172*a**2*b**2*d + 211*a**2*b**2 + 366*a**2*b*c**4*d**4 + 848*a**2*b*c**4*d**3 + 496*a**2*b*c**4*d**2 + 8*a**2*b*c**4*d + 18*a**2*b*c**4 + 1104*a**2*b*c**3*d**4 + 2312*a**2*b*c**3*d**3 + 904*a**2*b*c**3*d**2 - 328*a**2*b*c**3*d + 72*a**2*b*c**3 + 1152*a**2*b*c**2*d**4 + 2040*a**2*b*c**2*d**3 + 120*a**2*b*c**2*d**2 - 696*a**2*b*c**2*d + 216*a**2*b*c**2 + 456*a**2*b*c*d**4 + 536*a**2*b*c*d**3 - 488*a**2*b*c*d**2 - 376*a**2*b*c*d + 288*a**2*b*c + 66*a**2*b*d**4 + 56*a**2*b*d**3 - 56*a**2*b*d**2 + 80*a**2*b*d + 150*a**2*b + 62*a**2*c**4*d**4 + 130*a**2*c**4*d**3 + 55*a**2*c**4*d**2 - 8*a**2*c**4*d + 11*a**2*c**4 + 176*a**2*c**3*d**4 + 304*a**2*c**3*d**3 + 4*a**2*c**3*d**2 - 104*a**2*c**3*d + 44*a**2*c**3 + 168*a**2*c**2*d**4 + 192*a**2*c**2*d**3 - 204*a**2*c**2*d**2 - 168*a**2*c**2*d + 96*a**2*c**2 + 56*a**2*c*d**4 - 8*a**2*c*d**3 - 200*a**2*c*d**2 - 56*a**2*c*d + 104*a**2*c + 8*a**2*d**4 - 2*a**2*d**3 - 11*a**2*d**2 + 40*a**2*d + 47*a**2 + 102*a*b**4*c**4*d**4 + 268*a*b**4*c**4*d**3 + 218*a*b**4*c**4*d**2 + 56*a*b**4*c**4*d + 8*a*b**4*c**4 + 328*a*b**4*c**3*d**4 + 832*a*b**4*c**3*d**3 + 632*a*b**4*c**3*d**2 + 144*a*b**4*c**3*d + 32*a*b**4*c**3 + 376*a*b**4*c**2*d**4 + 912*a*b**4*c**2*d**3 + 640*a*b**4*c**2*d**2 + 144*a*b**4*c**2*d + 64*a*b**4*c**2 + 176*a*b**4*c*d**4 + 400*a*b**4*c*d**3 + 256*a*b**4*c*d**2 + 80*a*b**4*c*d + 64*a*b**4*c + 30*a*b**4*d**4 + 68*a*b**4*d**3 + 54*a*b**4*d**2 + 40*a*b**4*d + 28*a*b**4 + 328*a*b**3*c**4*d**4 + 832*a*b**3*c**4*d**3 + 632*a*b**3*c**4*d**2 + 144*a*b**3*c**4*d + 32*a*b**3*c**4 + 1032*a*b**3*c**3*d**4 + 2488*a*b**3*c**3*d**3 + 1688*a*b**3*c**3*d**2 + 296*a*b**3*c**3*d + 128*a*b**3*c**3 + 1144*a*b**3*c**2*d**4 + 2568*a*b**3*c**2*d**3 + 1480*a*b**3*c**2*d**2 + 216*a*b**3*c**2*d + 256*a*b**3*c**2 + 504*a*b**3*c*d**4 + 1000*a*b**3*c*d**3 + 424*a*b**3*c*d**2 + 120*a*b**3*c*d + 256*a*b**3*c + 80*a*b**3*d**4 + 152*a*b**3*d**3 + 96*a*b**3*d**2 + 120*a*b**3*d + 112*a*b**3 + 374*a*b**2*c**4*d**4 + 896*a*b**2*c**4*d**3 + 600*a*b**2*c**4*d**2 + 104*a*b**2*c**4*d + 50*a*b**2*c**4 + 1136*a*b**2*c**3*d**4 + 2504*a*b**2*c**3*d**3 + 1320*a*b**2*c**3*d**2 + 56*a*b**2*c**3*d + 200*a*b**2*c**3 + 1192*a*b**2*c**2*d**4 + 2296*a*b**2*c**2*d**3 + 696*a*b**2*c**2*d**2 - 152*a*b**2*c**2*d + 400*a*b**2*c**2 + 472*a*b**2*c*d**4 + 664*a*b**2*c*d**3 - 168*a*b**2*c*d**2 - 56*a*b**2*c*d + 400*a*b**2*c + 66*a*b**2*d**4 + 72*a*b**2*d**3 + 144*a*b**2*d + 174*a*b**2 + 172*a*b*c**4*d**4 + 368*a*b*c**4*d**3 + 176*a*b*c**4*d**2 + 36*a*b*c**4 + 488*a*b*c**3*d**4 + 872*a*b*c**3*d**3 + 104*a*b*c**3*d**2 - 200*a*b*c**3*d + 144*a*b*c**3 + 456*a*b*c**2*d**4 + 536*a*b*c**2*d**3 - 488*a*b*c**2*d**2 - 376*a*b*c**2*d + 288*a*b*c**2 + 136*a*b*c*d**4 - 72*a*b*c*d**3 - 584*a*b*c*d**2 - 152*a*b*c*d + 288*a*b*c + 12*a*b*d**4 - 40*a*b*d**3 - 72*a*b*d**2 + 88*a*b*d + 124*a*b + 28*a*c**4*d**4 + 52*a*c**4*d**3 + 14*a*c**4*d**2 + 14*a*c**4 + 72*a*c**3*d**4 + 88*a*c**3*d**3 - 64*a*c**3*d**2 - 40*a*c**3*d + 56*a*c**3 + 56*a*c**2*d**4 - 8*a*c**2*d**3 - 200*a*c**2*d**2 - 56*a*c**2*d + 104*a*c**2 + 8*a*c*d**4 - 72*a*c*d**3 - 152*a*c*d**2 + 8*a*c*d + 96*a*c - 12*a*d**3 - 6*a*d**2 + 40*a*d + 38*a + 19*b**4*c**4*d**4 + 50*b**4*c**4*d**3 + 43*b**4*c**4*d**2 + 16*b**4*c**4*d + 5*b**4*c**4 + 60*b**4*c**3*d**4 + 152*b**4*c**3*d**3 + 124*b**4*c**3*d**2 + 48*b**4*c**3*d + 20*b**4*c**3 + 67*b**4*c**2*d**4 + 162*b**4*c**2*d**3 + 127*b**4*c**2*d**2 + 60*b**4*c**2*d + 34*b**4*c**2 + 30*b**4*c*d**4 + 68*b**4*c*d**3 + 54*b**4*c*d**2 + 40*b**4*c*d + 28*b**4*c + 5*b**4*d**4 + 12*b**4*d**3 + 14*b**4*d**2 + 16*b**4*d + 10*b**4 + 60*b**3*c**4*d**4 + 152*b**3*c**4*d**3 + 124*b**3*c**4*d**2 + 48*b**3*c**4*d + 20*b**3*c**4 + 184*b**3*c**3*d**4 + 440*b**3*c**3*d**3 + 328*b**3*c**3*d**2 + 136*b**3*c**3*d + 80*b**3*c**3 + 196*b**3*c**2*d**4 + 432*b**3*c**2*d**3 + 292*b**3*c**2*d**2 + 168*b**3*c**2*d + 136*b**3*c**2 + 80*b**3*c*d**4 + 152*b**3*c*d**3 + 96*b**3*c*d**2 + 120*b**3*c*d + 112*b**3*c + 12*b**3*d**4 + 24*b**3*d**3 + 32*b**3*d**2 + 56*b**3*d + 40*b**3 + 67*b**2*c**4*d**4 + 160*b**2*c**4*d**3 + 120*b**2*c**4*d**2 + 52*b**2*c**4*d + 31*b**2*c**4 + 196*b**2*c**3*d**4 + 424*b**2*c**3*d**3 + 264*b**2*c**3*d**2 + 136*b**2*c**3*d + 124*b**2*c**3 + 193*b**2*c**2*d**4 + 352*b**2*c**2*d**3 + 156*b**2*c**2*d**2 + 172*b**2*c**2*d + 211*b**2*c**2 + 66*b**2*c*d**4 + 72*b**2*c*d**3 + 144*b**2*c*d + 174*b**2*c + 8*b**2*d**4 + 8*b**2*d**3 + 24*b**2*d**2 + 80*b**2*d + 62*b**2 + 30*b*c**4*d**4 + 64*b*c**4*d**3 + 40*b*c**4*d**2 + 24*b*c**4*d + 22*b*c**4 + 80*b*c**3*d**4 + 136*b*c**3*d**3 + 40*b*c**3*d**2 + 56*b*c**3*d + 88*b*c**3 + 66*b*c**2*d**4 + 56*b*c**2*d**3 - 56*b*c**2*d**2 + 80*b*c**2*d + 150*b*c**2 + 12*b*c*d**4 - 40*b*c*d**3 - 72*b*c*d**2 + 88*b*c*d + 124*b*c - 8*b*d**3 + 8*b*d**2 + 56*b*d + 44*b + 5*c**4*d**4 + 10*c**4*d**3 + 7*c**4*d**2 + 8*c**4*d + 7*c**4 + 12*c**3*d**4 + 16*c**3*d**3 + 4*c**3*d**2 + 24*c**3*d + 28*c**3 + 8*c**2*d**4 - 2*c**2*d**3 - 11*c**2*d**2 + 40*c**2*d + 47*c**2 - 12*c*d**3 - 6*c*d**2 + 40*c*d + 38*c + 8*d**2 + 20*d + 13");
		assertTrue(binarySearch(f).length == 0);
		// f(--++)
		f = new RationalPoly("abcd", "19*a**4*b**4*c**4*d**4 + 50*a**4*b**4*c**4*d**3 + 43*a**4*b**4*c**4*d**2 + 16*a**4*b**4*c**4*d + 5*a**4*b**4*c**4 + 50*a**4*b**4*c**3*d**4 + 132*a**4*b**4*c**3*d**3 + 126*a**4*b**4*c**3*d**2 + 72*a**4*b**4*c**3*d + 32*a**4*b**4*c**3 + 43*a**4*b**4*c**2*d**4 + 126*a**4*b**4*c**2*d**3 + 169*a**4*b**4*c**2*d**2 + 156*a**4*b**4*c**2*d + 76*a**4*b**4*c**2 + 16*a**4*b**4*c*d**4 + 72*a**4*b**4*c*d**3 + 156*a**4*b**4*c*d**2 + 176*a**4*b**4*c*d + 80*a**4*b**4*c + 5*a**4*b**4*d**4 + 32*a**4*b**4*d**3 + 76*a**4*b**4*d**2 + 80*a**4*b**4*d + 32*a**4*b**4 + 60*a**4*b**3*c**4*d**4 + 152*a**4*b**3*c**4*d**3 + 124*a**4*b**3*c**4*d**2 + 48*a**4*b**3*c**4*d + 20*a**4*b**3*c**4 + 152*a**4*b**3*c**3*d**4 + 384*a**4*b**3*c**3*d**3 + 360*a**4*b**3*c**3*d**2 + 240*a**4*b**3*c**3*d + 128*a**4*b**3*c**3 + 124*a**4*b**3*c**2*d**4 + 360*a**4*b**3*c**2*d**3 + 532*a**4*b**3*c**2*d**2 + 576*a**4*b**3*c**2*d + 304*a**4*b**3*c**2 + 48*a**4*b**3*c*d**4 + 240*a**4*b**3*c*d**3 + 576*a**4*b**3*c*d**2 + 688*a**4*b**3*c*d + 320*a**4*b**3*c + 20*a**4*b**3*d**4 + 128*a**4*b**3*d**3 + 304*a**4*b**3*d**2 + 320*a**4*b**3*d + 128*a**4*b**3 + 67*a**4*b**2*c**4*d**4 + 160*a**4*b**2*c**4*d**3 + 120*a**4*b**2*c**4*d**2 + 52*a**4*b**2*c**4*d + 31*a**4*b**2*c**4 + 162*a**4*b**2*c**3*d**4 + 384*a**4*b**2*c**3*d**3 + 360*a**4*b**2*c**3*d**2 + 312*a**4*b**2*c**3*d + 198*a**4*b**2*c**3 + 127*a**4*b**2*c**2*d**4 + 376*a**4*b**2*c**2*d**3 + 660*a**4*b**2*c**2*d**2 + 844*a**4*b**2*c**2*d + 469*a**4*b**2*c**2 + 60*a**4*b**2*c*d**4 + 336*a**4*b**2*c*d**3 + 864*a**4*b**2*c*d**2 + 1056*a**4*b**2*c*d + 492*a**4*b**2*c + 34*a**4*b**2*d**4 + 208*a**4*b**2*d**3 + 480*a**4*b**2*d**2 + 496*a**4*b**2*d + 196*a**4*b**2 + 30*a**4*b*c**4*d**4 + 64*a**4*b*c**4*d**3 + 40*a**4*b*c**4*d**2 + 24*a**4*b*c**4*d + 22*a**4*b*c**4 + 68*a**4*b*c**3*d**4 + 144*a**4*b*c**3*d**3 + 144*a**4*b*c**3*d**2 + 192*a**4*b*c**3*d + 140*a**4*b*c**3 + 54*a**4*b*c**2*d**4 + 176*a**4*b*c**2*d**3 + 400*a**4*b*c**2*d**2 + 584*a**4*b*c**2*d + 330*a**4*b*c**2 + 40*a**4*b*c*d**4 + 240*a**4*b*c*d**3 + 624*a**4*b*c*d**2 + 752*a**4*b*c*d + 344*a**4*b*c + 28*a**4*b*d**4 + 160*a**4*b*d**3 + 352*a**4*b*d**2 + 352*a**4*b*d + 136*a**4*b + 5*a**4*c**4*d**4 + 10*a**4*c**4*d**3 + 7*a**4*c**4*d**2 + 8*a**4*c**4*d + 7*a**4*c**4 + 12*a**4*c**3*d**4 + 28*a**4*c**3*d**3 + 42*a**4*c**3*d**2 + 64*a**4*c**3*d + 42*a**4*c**3 + 14*a**4*c**2*d**4 + 58*a**4*c**2*d**3 + 139*a**4*c**2*d**2 + 184*a**4*c**2*d + 95*a**4*c**2 + 16*a**4*c*d**4 + 88*a**4*c*d**3 + 204*a**4*c*d**2 + 224*a**4*c*d + 96*a**4*c + 10*a**4*d**4 + 52*a**4*d**3 + 106*a**4*d**2 + 100*a**4*d + 37*a**4 + 60*a**3*b**4*c**4*d**4 + 152*a**3*b**4*c**4*d**3 + 124*a**3*b**4*c**4*d**2 + 48*a**3*b**4*c**4*d + 20*a**3*b**4*c**4 + 152*a**3*b**4*c**3*d**4 + 384*a**3*b**4*c**3*d**3 + 360*a**3*b**4*c**3*d**2 + 240*a**3*b**4*c**3*d + 128*a**3*b**4*c**3 + 124*a**3*b**4*c**2*d**4 + 360*a**3*b**4*c**2*d**3 + 532*a**3*b**4*c**2*d**2 + 576*a**3*b**4*c**2*d + 304*a**3*b**4*c**2 + 48*a**3*b**4*c*d**4 + 240*a**3*b**4*c*d**3 + 576*a**3*b**4*c*d**2 + 688*a**3*b**4*c*d + 320*a**3*b**4*c + 20*a**3*b**4*d**4 + 128*a**3*b**4*d**3 + 304*a**3*b**4*d**2 + 320*a**3*b**4*d + 128*a**3*b**4 + 184*a**3*b**3*c**4*d**4 + 440*a**3*b**3*c**4*d**3 + 328*a**3*b**3*c**4*d**2 + 136*a**3*b**3*c**4*d + 80*a**3*b**3*c**4 + 440*a**3*b**3*c**3*d**4 + 1032*a**3*b**3*c**3*d**3 + 936*a**3*b**3*c**3*d**2 + 792*a**3*b**3*c**3*d + 512*a**3*b**3*c**3 + 328*a**3*b**3*c**2*d**4 + 936*a**3*b**3*c**2*d**3 + 1624*a**3*b**3*c**2*d**2 + 2136*a**3*b**3*c**2*d + 1216*a**3*b**3*c**2 + 136*a**3*b**3*c*d**4 + 792*a**3*b**3*c*d**3 + 2136*a**3*b**3*c*d**2 + 2696*a**3*b**3*c*d + 1280*a**3*b**3*c + 80*a**3*b**3*d**4 + 512*a**3*b**3*d**3 + 1216*a**3*b**3*d**2 + 1280*a**3*b**3*d + 512*a**3*b**3 + 196*a**3*b**2*c**4*d**4 + 424*a**3*b**2*c**4*d**3 + 264*a**3*b**2*c**4*d**2 + 136*a**3*b**2*c**4*d + 124*a**3*b**2*c**4 + 432*a**3*b**2*c**3*d**4 + 888*a**3*b**2*c**3*d**3 + 792*a**3*b**2*c**3*d**2 + 1032*a**3*b**2*c**3*d + 792*a**3*b**2*c**3 + 292*a**3*b**2*c**2*d**4 + 856*a**3*b**2*c**2*d**3 + 1992*a**3*b**2*c**2*d**2 + 3160*a**3*b**2*c**2*d + 1876*a**3*b**2*c**2 + 168*a**3*b**2*c*d**4 + 1128*a**3*b**2*c*d**3 + 3240*a**3*b**2*c*d**2 + 4152*a**3*b**2*c*d + 1968*a**3*b**2*c + 136*a**3*b**2*d**4 + 832*a**3*b**2*d**3 + 1920*a**3*b**2*d**2 + 1984*a**3*b**2*d + 784*a**3*b**2 + 80*a**3*b*c**4*d**4 + 136*a**3*b*c**4*d**3 + 40*a**3*b*c**4*d**2 + 56*a**3*b*c**4*d + 88*a**3*b*c**4 + 152*a**3*b*c**3*d**4 + 216*a**3*b*c**3*d**3 + 216*a**3*b*c**3*d**2 + 648*a**3*b*c**3*d + 560*a**3*b*c**3 + 96*a**3*b*c**2*d**4 + 344*a**3*b*c**2*d**3 + 1240*a**3*b*c**2*d**2 + 2216*a**3*b*c**2*d + 1320*a**3*b*c**2 + 120*a**3*b*c*d**4 + 840*a**3*b*c*d**3 + 2376*a**3*b*c*d**2 + 2968*a**3*b*c*d + 1376*a**3*b*c + 112*a**3*b*d**4 + 640*a**3*b*d**3 + 1408*a**3*b*d**2 + 1408*a**3*b*d + 544*a**3*b + 12*a**3*c**4*d**4 + 16*a**3*c**4*d**3 + 4*a**3*c**4*d**2 + 24*a**3*c**4*d + 28*a**3*c**4 + 24*a**3*c**3*d**4 + 40*a**3*c**3*d**3 + 96*a**3*c**3*d**2 + 232*a**3*c**3*d + 168*a**3*c**3 + 32*a**3*c**2*d**4 + 160*a**3*c**2*d**3 + 484*a**3*c**2*d**2 + 712*a**3*c**2*d + 380*a**3*c**2 + 56*a**3*c*d**4 + 328*a**3*c*d**3 + 792*a**3*c*d**2 + 888*a**3*c*d + 384*a**3*c + 40*a**3*d**4 + 208*a**3*d**3 + 424*a**3*d**2 + 400*a**3*d + 148*a**3 + 67*a**2*b**4*c**4*d**4 + 162*a**2*b**4*c**4*d**3 + 127*a**2*b**4*c**4*d**2 + 60*a**2*b**4*c**4*d + 34*a**2*b**4*c**4 + 160*a**2*b**4*c**3*d**4 + 384*a**2*b**4*c**3*d**3 + 376*a**2*b**4*c**3*d**2 + 336*a**2*b**4*c**3*d + 208*a**2*b**4*c**3 + 120*a**2*b**4*c**2*d**4 + 360*a**2*b**4*c**2*d**3 + 660*a**2*b**4*c**2*d**2 + 864*a**2*b**4*c**2*d + 480*a**2*b**4*c**2 + 52*a**2*b**4*c*d**4 + 312*a**2*b**4*c*d**3 + 844*a**2*b**4*c*d**2 + 1056*a**2*b**4*c*d + 496*a**2*b**4*c + 31*a**2*b**4*d**4 + 198*a**2*b**4*d**3 + 469*a**2*b**4*d**2 + 492*a**2*b**4*d + 196*a**2*b**4 + 196*a**2*b**3*c**4*d**4 + 432*a**2*b**3*c**4*d**3 + 292*a**2*b**3*c**4*d**2 + 168*a**2*b**3*c**4*d + 136*a**2*b**3*c**4 + 424*a**2*b**3*c**3*d**4 + 888*a**2*b**3*c**3*d**3 + 856*a**2*b**3*c**3*d**2 + 1128*a**2*b**3*c**3*d + 832*a**2*b**3*c**3 + 264*a**2*b**3*c**2*d**4 + 792*a**2*b**3*c**2*d**3 + 1992*a**2*b**3*c**2*d**2 + 3240*a**2*b**3*c**2*d + 1920*a**2*b**3*c**2 + 136*a**2*b**3*c*d**4 + 1032*a**2*b**3*c*d**3 + 3160*a**2*b**3*c*d**2 + 4152*a**2*b**3*c*d + 1984*a**2*b**3*c + 124*a**2*b**3*d**4 + 792*a**2*b**3*d**3 + 1876*a**2*b**3*d**2 + 1968*a**2*b**3*d + 784*a**2*b**3 + 193*a**2*b**2*c**4*d**4 + 352*a**2*b**2*c**4*d**3 + 156*a**2*b**2*c**4*d**2 + 172*a**2*b**2*c**4*d + 211*a**2*b**2*c**4 + 352*a**2*b**2*c**3*d**4 + 520*a**2*b**2*c**3*d**3 + 552*a**2*b**2*c**3*d**2 + 1528*a**2*b**2*c**3*d + 1288*a**2*b**2*c**3 + 156*a**2*b**2*c**2*d**4 + 552*a**2*b**2*c**2*d**3 + 2520*a**2*b**2*c**2*d**2 + 4872*a**2*b**2*c**2*d + 2964*a**2*b**2*c**2 + 172*a**2*b**2*c*d**4 + 1528*a**2*b**2*c*d**3 + 4872*a**2*b**2*c*d**2 + 6424*a**2*b**2*c*d + 3052*a**2*b**2*c + 211*a**2*b**2*d**4 + 1288*a**2*b**2*d**3 + 2964*a**2*b**2*d**2 + 3052*a**2*b**2*d + 1201*a**2*b**2 + 66*a**2*b*c**4*d**4 + 56*a**2*b*c**4*d**3 - 56*a**2*b*c**4*d**2 + 80*a**2*b*c**4*d + 150*a**2*b*c**4 + 72*a**2*b*c**3*d**4 - 88*a**2*b*c**3*d**3 + 40*a**2*b*c**3*d**2 + 1016*a**2*b*c**3*d + 912*a**2*b*c**3 + 168*a**2*b*c**2*d**3 + 1704*a**2*b*c**2*d**2 + 3480*a**2*b*c**2*d + 2088*a**2*b*c**2 + 144*a**2*b*c*d**4 + 1208*a**2*b*c*d**3 + 3640*a**2*b*c*d**2 + 4616*a**2*b*c*d + 2136*a**2*b*c + 174*a**2*b*d**4 + 992*a**2*b*d**3 + 2176*a**2*b*d**2 + 2168*a**2*b*d + 834*a**2*b + 8*a**2*c**4*d**4 - 2*a**2*c**4*d**3 - 11*a**2*c**4*d**2 + 40*a**2*c**4*d + 47*a**2*c**4 + 8*a**2*c**3*d**4 - 8*a**2*c**3*d**3 + 112*a**2*c**3*d**2 + 376*a**2*c**3*d + 272*a**2*c**3 + 24*a**2*c**2*d**4 + 192*a**2*c**2*d**3 + 732*a**2*c**2*d**2 + 1128*a**2*c**2*d + 600*a**2*c**2 + 80*a**2*c*d**4 + 496*a**2*c*d**3 + 1228*a**2*c*d**2 + 1384*a**2*c*d + 596*a**2*c + 62*a**2*d**4 + 322*a**2*d**3 + 655*a**2*d**2 + 616*a**2*d + 227*a**2 + 30*a*b**4*c**4*d**4 + 68*a*b**4*c**4*d**3 + 54*a*b**4*c**4*d**2 + 40*a*b**4*c**4*d + 28*a*b**4*c**4 + 64*a*b**4*c**3*d**4 + 144*a*b**4*c**3*d**3 + 176*a*b**4*c**3*d**2 + 240*a*b**4*c**3*d + 160*a*b**4*c**3 + 40*a*b**4*c**2*d**4 + 144*a*b**4*c**2*d**3 + 400*a*b**4*c**2*d**2 + 624*a*b**4*c**2*d + 352*a*b**4*c**2 + 24*a*b**4*c*d**4 + 192*a*b**4*c*d**3 + 584*a*b**4*c*d**2 + 752*a*b**4*c*d + 352*a*b**4*c + 22*a*b**4*d**4 + 140*a*b**4*d**3 + 330*a*b**4*d**2 + 344*a*b**4*d + 136*a*b**4 + 80*a*b**3*c**4*d**4 + 152*a*b**3*c**4*d**3 + 96*a*b**3*c**4*d**2 + 120*a*b**3*c**4*d + 112*a*b**3*c**4 + 136*a*b**3*c**3*d**4 + 216*a*b**3*c**3*d**3 + 344*a*b**3*c**3*d**2 + 840*a*b**3*c**3*d + 640*a*b**3*c**3 + 40*a*b**3*c**2*d**4 + 216*a*b**3*c**2*d**3 + 1240*a*b**3*c**2*d**2 + 2376*a*b**3*c**2*d + 1408*a*b**3*c**2 + 56*a*b**3*c*d**4 + 648*a*b**3*c*d**3 + 2216*a*b**3*c*d**2 + 2968*a*b**3*c*d + 1408*a*b**3*c + 88*a*b**3*d**4 + 560*a*b**3*d**3 + 1320*a*b**3*d**2 + 1376*a*b**3*d + 544*a*b**3 + 66*a*b**2*c**4*d**4 + 72*a*b**2*c**4*d**3 + 144*a*b**2*c**4*d + 174*a*b**2*c**4 + 56*a*b**2*c**3*d**4 - 88*a*b**2*c**3*d**3 + 168*a*b**2*c**3*d**2 + 1208*a*b**2*c**3*d + 992*a*b**2*c**3 - 56*a*b**2*c**2*d**4 + 40*a*b**2*c**2*d**3 + 1704*a*b**2*c**2*d**2 + 3640*a*b**2*c**2*d + 2176*a*b**2*c**2 + 80*a*b**2*c*d**4 + 1016*a*b**2*c*d**3 + 3480*a*b**2*c*d**2 + 4616*a*b**2*c*d + 2168*a*b**2*c + 150*a*b**2*d**4 + 912*a*b**2*d**3 + 2088*a*b**2*d**2 + 2136*a*b**2*d + 834*a*b**2 + 12*a*b*c**4*d**4 - 40*a*b*c**4*d**3 - 72*a*b*c**4*d**2 + 88*a*b*c**4*d + 124*a*b*c**4 - 40*a*b*c**3*d**4 - 248*a*b*c**3*d**3 + 8*a*b*c**3*d**2 + 856*a*b*c**3*d + 704*a*b*c**3 - 72*a*b*c**2*d**4 + 8*a*b*c**2*d**3 + 1288*a*b*c**2*d**2 + 2648*a*b*c**2*d + 1536*a*b*c**2 + 88*a*b*c*d**4 + 856*a*b*c*d**3 + 2648*a*b*c*d**2 + 3336*a*b*c*d + 1520*a*b*c + 124*a*b*d**4 + 704*a*b*d**3 + 1536*a*b*d**2 + 1520*a*b*d + 580*a*b - 12*a*c**4*d**3 - 6*a*c**4*d**2 + 40*a*c**4*d + 38*a*c**4 - 8*a*c**3*d**4 - 24*a*c**3*d**3 + 104*a*c**3*d**2 + 312*a*c**3*d + 208*a*c**3 + 8*a*c**2*d**4 + 136*a*c**2*d**3 + 568*a*c**2*d**2 + 856*a*c**2*d + 440*a*c**2 + 56*a*c*d**4 + 360*a*c*d**3 + 896*a*c*d**2 + 1000*a*c*d + 424*a*c + 44*a*d**4 + 228*a*d**3 + 462*a*d**2 + 432*a*d + 158*a + 5*b**4*c**4*d**4 + 12*b**4*c**4*d**3 + 14*b**4*c**4*d**2 + 16*b**4*c**4*d + 10*b**4*c**4 + 10*b**4*c**3*d**4 + 28*b**4*c**3*d**3 + 58*b**4*c**3*d**2 + 88*b**4*c**3*d + 52*b**4*c**3 + 7*b**4*c**2*d**4 + 42*b**4*c**2*d**3 + 139*b**4*c**2*d**2 + 204*b**4*c**2*d + 106*b**4*c**2 + 8*b**4*c*d**4 + 64*b**4*c*d**3 + 184*b**4*c*d**2 + 224*b**4*c*d + 100*b**4*c + 7*b**4*d**4 + 42*b**4*d**3 + 95*b**4*d**2 + 96*b**4*d + 37*b**4 + 12*b**3*c**4*d**4 + 24*b**3*c**4*d**3 + 32*b**3*c**4*d**2 + 56*b**3*c**4*d + 40*b**3*c**4 + 16*b**3*c**3*d**4 + 40*b**3*c**3*d**3 + 160*b**3*c**3*d**2 + 328*b**3*c**3*d + 208*b**3*c**3 + 4*b**3*c**2*d**4 + 96*b**3*c**2*d**3 + 484*b**3*c**2*d**2 + 792*b**3*c**2*d + 424*b**3*c**2 + 24*b**3*c*d**4 + 232*b**3*c*d**3 + 712*b**3*c*d**2 + 888*b**3*c*d + 400*b**3*c + 28*b**3*d**4 + 168*b**3*d**3 + 380*b**3*d**2 + 384*b**3*d + 148*b**3 + 8*b**2*c**4*d**4 + 8*b**2*c**4*d**3 + 24*b**2*c**4*d**2 + 80*b**2*c**4*d + 62*b**2*c**4 - 2*b**2*c**3*d**4 - 8*b**2*c**3*d**3 + 192*b**2*c**3*d**2 + 496*b**2*c**3*d + 322*b**2*c**3 - 11*b**2*c**2*d**4 + 112*b**2*c**2*d**3 + 732*b**2*c**2*d**2 + 1228*b**2*c**2*d + 655*b**2*c**2 + 40*b**2*c*d**4 + 376*b**2*c*d**3 + 1128*b**2*c*d**2 + 1384*b**2*c*d + 616*b**2*c + 47*b**2*d**4 + 272*b**2*d**3 + 600*b**2*d**2 + 596*b**2*d + 227*b**2 - 8*b*c**4*d**3 + 8*b*c**4*d**2 + 56*b*c**4*d + 44*b*c**4 - 12*b*c**3*d**4 - 24*b*c**3*d**3 + 136*b*c**3*d**2 + 360*b*c**3*d + 228*b*c**3 - 6*b*c**2*d**4 + 104*b*c**2*d**3 + 568*b*c**2*d**2 + 896*b*c**2*d + 462*b*c**2 + 40*b*c*d**4 + 312*b*c*d**3 + 856*b*c*d**2 + 1000*b*c*d + 432*b*c + 38*b*d**4 + 208*b*d**3 + 440*b*d**2 + 424*b*d + 158*b + 8*c**4*d**2 + 20*c**4*d + 13*c**4 + 12*c**3*d**3 + 70*c**3*d**2 + 120*c**3*d + 66*c**3 + 8*c**2*d**4 + 70*c**2*d**3 + 217*c**2*d**2 + 280*c**2*d + 131*c**2 + 20*c*d**4 + 120*c*d**3 + 280*c*d**2 + 296*c*d + 120*c + 13*d**4 + 66*d**3 + 131*d**2 + 120*d + 43");
		assertTrue(binarySearch(f).length == 0);
		// f(-+++)
		f = new RationalPoly("abcd", "5*a**4*b**4*c**4*d**4 + 10*a**4*b**4*c**4*d**3 + 7*a**4*b**4*c**4*d**2 + 8*a**4*b**4*c**4*d + 7*a**4*b**4*c**4 + 12*a**4*b**4*c**3*d**4 + 28*a**4*b**4*c**3*d**3 + 42*a**4*b**4*c**3*d**2 + 64*a**4*b**4*c**3*d + 42*a**4*b**4*c**3 + 14*a**4*b**4*c**2*d**4 + 58*a**4*b**4*c**2*d**3 + 139*a**4*b**4*c**2*d**2 + 184*a**4*b**4*c**2*d + 95*a**4*b**4*c**2 + 16*a**4*b**4*c*d**4 + 88*a**4*b**4*c*d**3 + 204*a**4*b**4*c*d**2 + 224*a**4*b**4*c*d + 96*a**4*b**4*c + 10*a**4*b**4*d**4 + 52*a**4*b**4*d**3 + 106*a**4*b**4*d**2 + 100*a**4*b**4*d + 37*a**4*b**4 + 10*a**4*b**3*c**4*d**4 + 16*a**4*b**3*c**4*d**3 + 16*a**4*b**3*c**4*d**2 + 40*a**4*b**3*c**4*d + 34*a**4*b**3*c**4 + 28*a**4*b**3*c**3*d**4 + 80*a**4*b**3*c**3*d**3 + 192*a**4*b**3*c**3*d**2 + 320*a**4*b**3*c**3*d + 196*a**4*b**3*c**3 + 58*a**4*b**3*c**2*d**4 + 288*a**4*b**3*c**2*d**3 + 712*a**4*b**3*c**2*d**2 + 888*a**4*b**3*c**2*d + 430*a**4*b**3*c**2 + 88*a**4*b**3*c*d**4 + 464*a**4*b**3*c*d**3 + 1008*a**4*b**3*c*d**2 + 1040*a**4*b**3*c*d + 424*a**4*b**3*c + 52*a**4*b**3*d**4 + 256*a**4*b**3*d**3 + 496*a**4*b**3*d**2 + 448*a**4*b**3*d + 160*a**4*b**3 + 7*a**4*b**2*c**4*d**4 + 16*a**4*b**2*c**4*d**3 + 48*a**4*b**2*c**4*d**2 + 100*a**4*b**2*c**4*d + 67*a**4*b**2*c**4 + 42*a**4*b**2*c**3*d**4 + 192*a**4*b**2*c**3*d**3 + 504*a**4*b**2*c**3*d**2 + 696*a**4*b**2*c**3*d + 366*a**4*b**2*c**3 + 139*a**4*b**2*c**2*d**4 + 712*a**4*b**2*c**2*d**3 + 1596*a**4*b**2*c**2*d**2 + 1756*a**4*b**2*c**2*d + 769*a**4*b**2*c**2 + 204*a**4*b**2*c*d**4 + 1008*a**4*b**2*c*d**3 + 2016*a**4*b**2*c*d**2 + 1920*a**4*b**2*c*d + 732*a**4*b**2*c + 106*a**4*b**2*d**4 + 496*a**4*b**2*d**3 + 912*a**4*b**2*d**2 + 784*a**4*b**2*d + 268*a**4*b**2 + 8*a**4*b*c**4*d**4 + 40*a**4*b*c**4*d**3 + 100*a**4*b*c**4*d**2 + 128*a**4*b*c**4*d + 64*a**4*b*c**4 + 64*a**4*b*c**3*d**4 + 320*a**4*b*c**3*d**3 + 696*a**4*b*c**3*d**2 + 752*a**4*b*c**3*d + 328*a**4*b*c**3 + 184*a**4*b*c**2*d**4 + 888*a**4*b*c**2*d**3 + 1756*a**4*b*c**2*d**2 + 1680*a**4*b*c**2*d + 652*a**4*b*c**2 + 224*a**4*b*c*d**4 + 1040*a**4*b*c*d**3 + 1920*a**4*b*c*d**2 + 1680*a**4*b*c*d + 592*a**4*b*c + 100*a**4*b*d**4 + 448*a**4*b*d**3 + 784*a**4*b*d**2 + 640*a**4*b*d + 208*a**4*b + 7*a**4*c**4*d**4 + 34*a**4*c**4*d**3 + 67*a**4*c**4*d**2 + 64*a**4*c**4*d + 25*a**4*c**4 + 42*a**4*c**3*d**4 + 196*a**4*c**3*d**3 + 366*a**4*c**3*d**2 + 328*a**4*c**3*d + 120*a**4*c**3 + 95*a**4*c**2*d**4 + 430*a**4*c**2*d**3 + 769*a**4*c**2*d**2 + 652*a**4*c**2*d + 224*a**4*c**2 + 96*a**4*c*d**4 + 424*a**4*c*d**3 + 732*a**4*c*d**2 + 592*a**4*c*d + 192*a**4*c + 37*a**4*d**4 + 160*a**4*d**3 + 268*a**4*d**2 + 208*a**4*d + 64*a**4 + 12*a**3*b**4*c**4*d**4 + 16*a**3*b**4*c**4*d**3 + 4*a**3*b**4*c**4*d**2 + 24*a**3*b**4*c**4*d + 28*a**3*b**4*c**4 + 24*a**3*b**4*c**3*d**4 + 40*a**3*b**4*c**3*d**3 + 96*a**3*b**4*c**3*d**2 + 232*a**3*b**4*c**3*d + 168*a**3*b**4*c**3 + 32*a**3*b**4*c**2*d**4 + 160*a**3*b**4*c**2*d**3 + 484*a**3*b**4*c**2*d**2 + 712*a**3*b**4*c**2*d + 380*a**3*b**4*c**2 + 56*a**3*b**4*c*d**4 + 328*a**3*b**4*c*d**3 + 792*a**3*b**4*c*d**2 + 888*a**3*b**4*c*d + 384*a**3*b**4*c + 40*a**3*b**4*d**4 + 208*a**3*b**4*d**3 + 424*a**3*b**4*d**2 + 400*a**3*b**4*d + 148*a**3*b**4 + 16*a**3*b**3*c**4*d**4 - 8*a**3*b**3*c**4*d**3 - 8*a**3*b**3*c**4*d**2 + 136*a**3*b**3*c**4*d + 136*a**3*b**3*c**4 + 40*a**3*b**3*c**3*d**4 + 104*a**3*b**3*c**3*d**3 + 552*a**3*b**3*c**3*d**2 + 1208*a**3*b**3*c**3*d + 784*a**3*b**3*c**3 + 160*a**3*b**3*c**2*d**4 + 936*a**3*b**3*c**2*d**3 + 2632*a**3*b**3*c**2*d**2 + 3480*a**3*b**3*c**2*d + 1720*a**3*b**3*c**2 + 328*a**3*b**3*c*d**4 + 1784*a**3*b**3*c*d**3 + 3960*a**3*b**3*c*d**2 + 4136*a**3*b**3*c*d + 1696*a**3*b**3*c + 208*a**3*b**3*d**4 + 1024*a**3*b**3*d**3 + 1984*a**3*b**3*d**2 + 1792*a**3*b**3*d + 640*a**3*b**3 + 4*a**3*b**2*c**4*d**4 - 8*a**3*b**2*c**4*d**3 + 120*a**3*b**2*c**4*d**2 + 376*a**3*b**2*c**4*d + 268*a**3*b**2*c**4 + 96*a**3*b**2*c**3*d**4 + 552*a**3*b**2*c**3*d**3 + 1800*a**3*b**2*c**3*d**2 + 2712*a**3*b**2*c**3*d + 1464*a**3*b**2*c**3 + 484*a**3*b**2*c**2*d**4 + 2632*a**3*b**2*c**2*d**3 + 6168*a**3*b**2*c**2*d**2 + 6952*a**3*b**2*c**2*d + 3076*a**3*b**2*c**2 + 792*a**3*b**2*c*d**4 + 3960*a**3*b**2*c*d**3 + 7992*a**3*b**2*c*d**2 + 7656*a**3*b**2*c*d + 2928*a**3*b**2*c + 424*a**3*b**2*d**4 + 1984*a**3*b**2*d**3 + 3648*a**3*b**2*d**2 + 3136*a**3*b**2*d + 1072*a**3*b**2 + 24*a**3*b*c**4*d**4 + 136*a**3*b*c**4*d**3 + 376*a**3*b*c**4*d**2 + 504*a**3*b*c**4*d + 256*a**3*b*c**4 + 232*a**3*b*c**3*d**4 + 1208*a**3*b*c**3*d**3 + 2712*a**3*b*c**3*d**2 + 2984*a**3*b*c**3*d + 1312*a**3*b*c**3 + 712*a**3*b*c**2*d**4 + 3480*a**3*b*c**2*d**3 + 6952*a**3*b*c**2*d**2 + 6696*a**3*b*c**2*d + 2608*a**3*b*c**2 + 888*a**3*b*c*d**4 + 4136*a**3*b*c*d**3 + 7656*a**3*b*c*d**2 + 6712*a**3*b*c*d + 2368*a**3*b*c + 400*a**3*b*d**4 + 1792*a**3*b*d**3 + 3136*a**3*b*d**2 + 2560*a**3*b*d + 832*a**3*b + 28*a**3*c**4*d**4 + 136*a**3*c**4*d**3 + 268*a**3*c**4*d**2 + 256*a**3*c**4*d + 100*a**3*c**4 + 168*a**3*c**3*d**4 + 784*a**3*c**3*d**3 + 1464*a**3*c**3*d**2 + 1312*a**3*c**3*d + 480*a**3*c**3 + 380*a**3*c**2*d**4 + 1720*a**3*c**2*d**3 + 3076*a**3*c**2*d**2 + 2608*a**3*c**2*d + 896*a**3*c**2 + 384*a**3*c*d**4 + 1696*a**3*c*d**3 + 2928*a**3*c*d**2 + 2368*a**3*c*d + 768*a**3*c + 148*a**3*d**4 + 640*a**3*d**3 + 1072*a**3*d**2 + 832*a**3*d + 256*a**3 + 8*a**2*b**4*c**4*d**4 - 2*a**2*b**4*c**4*d**3 - 11*a**2*b**4*c**4*d**2 + 40*a**2*b**4*c**4*d + 47*a**2*b**4*c**4 + 8*a**2*b**4*c**3*d**4 - 8*a**2*b**4*c**3*d**3 + 112*a**2*b**4*c**3*d**2 + 376*a**2*b**4*c**3*d + 272*a**2*b**4*c**3 + 24*a**2*b**4*c**2*d**4 + 192*a**2*b**4*c**2*d**3 + 732*a**2*b**4*c**2*d**2 + 1128*a**2*b**4*c**2*d + 600*a**2*b**4*c**2 + 80*a**2*b**4*c*d**4 + 496*a**2*b**4*c*d**3 + 1228*a**2*b**4*c*d**2 + 1384*a**2*b**4*c*d + 596*a**2*b**4*c + 62*a**2*b**4*d**4 + 322*a**2*b**4*d**3 + 655*a**2*b**4*d**2 + 616*a**2*b**4*d + 227*a**2*b**4 - 2*a**2*b**3*c**4*d**4 - 72*a**2*b**3*c**4*d**3 - 32*a**2*b**3*c**4*d**2 + 240*a**2*b**3*c**4*d + 226*a**2*b**3*c**4 - 8*a**2*b**3*c**3*d**4 + 24*a**2*b**3*c**3*d**3 + 856*a**2*b**3*c**3*d**2 + 1992*a**2*b**3*c**3*d + 1264*a**2*b**3*c**3 + 192*a**2*b**3*c**2*d**4 + 1368*a**2*b**3*c**2*d**3 + 4152*a**2*b**3*c**2*d**2 + 5544*a**2*b**3*c**2*d + 2712*a**2*b**3*c**2 + 496*a**2*b**3*c*d**4 + 2760*a**2*b**3*c*d**3 + 6184*a**2*b**3*c*d**2 + 6456*a**2*b**3*c*d + 2632*a**2*b**3*c + 322*a**2*b**3*d**4 + 1584*a**2*b**3*d**3 + 3064*a**2*b**3*d**2 + 2760*a**2*b**3*d + 982*a**2*b**3 - 11*a**2*b**2*c**4*d**4 - 32*a**2*b**2*c**4*d**3 + 228*a**2*b**2*c**4*d**2 + 652*a**2*b**2*c**4*d + 439*a**2*b**2*c**4 + 112*a**2*b**2*c**3*d**4 + 856*a**2*b**2*c**3*d**3 + 3000*a**2*b**2*c**3*d**2 + 4456*a**2*b**2*c**3*d + 2344*a**2*b**2*c**3 + 732*a**2*b**2*c**2*d**4 + 4152*a**2*b**2*c**2*d**3 + 9864*a**2*b**2*c**2*d**2 + 11064*a**2*b**2*c**2*d + 4836*a**2*b**2*c**2 + 1228*a**2*b**2*c*d**4 + 6184*a**2*b**2*c*d**3 + 12504*a**2*b**2*c*d**2 + 11944*a**2*b**2*c*d + 4540*a**2*b**2*c + 655*a**2*b**2*d**4 + 3064*a**2*b**2*d**3 + 5628*a**2*b**2*d**2 + 4828*a**2*b**2*d + 1645*a**2*b**2 + 40*a**2*b*c**4*d**4 + 240*a**2*b*c**4*d**3 + 652*a**2*b*c**4*d**2 + 840*a**2*b*c**4*d + 412*a**2*b*c**4 + 376*a**2*b*c**3*d**4 + 1992*a**2*b*c**3*d**3 + 4456*a**2*b*c**3*d**2 + 4824*a**2*b*c**3*d + 2080*a**2*b*c**3 + 1128*a**2*b*c**2*d**4 + 5544*a**2*b*c**2*d**3 + 11064*a**2*b*c**2*d**2 + 10584*a**2*b*c**2*d + 4080*a**2*b*c**2 + 1384*a**2*b*c*d**4 + 6456*a**2*b*c*d**3 + 11944*a**2*b*c*d**2 + 10440*a**2*b*c*d + 3664*a**2*b*c + 616*a**2*b*d**4 + 2760*a**2*b*d**3 + 4828*a**2*b*d**2 + 3936*a**2*b*d + 1276*a**2*b + 47*a**2*c**4*d**4 + 226*a**2*c**4*d**3 + 439*a**2*c**4*d**2 + 412*a**2*c**4*d + 158*a**2*c**4 + 272*a**2*c**3*d**4 + 1264*a**2*c**3*d**3 + 2344*a**2*c**3*d**2 + 2080*a**2*c**3*d + 752*a**2*c**3 + 600*a**2*c**2*d**4 + 2712*a**2*c**2*d**3 + 4836*a**2*c**2*d**2 + 4080*a**2*c**2*d + 1392*a**2*c**2 + 596*a**2*c*d**4 + 2632*a**2*c*d**3 + 4540*a**2*c*d**2 + 3664*a**2*c*d + 1184*a**2*c + 227*a**2*d**4 + 982*a**2*d**3 + 1645*a**2*d**2 + 1276*a**2*d + 392*a**2 - 12*a*b**4*c**4*d**3 - 6*a*b**4*c**4*d**2 + 40*a*b**4*c**4*d + 38*a*b**4*c**4 - 8*a*b**4*c**3*d**4 - 24*a*b**4*c**3*d**3 + 104*a*b**4*c**3*d**2 + 312*a*b**4*c**3*d + 208*a*b**4*c**3 + 8*a*b**4*c**2*d**4 + 136*a*b**4*c**2*d**3 + 568*a*b**4*c**2*d**2 + 856*a*b**4*c**2*d + 440*a*b**4*c**2 + 56*a*b**4*c*d**4 + 360*a*b**4*c*d**3 + 896*a*b**4*c*d**2 + 1000*a*b**4*c*d + 424*a*b**4*c + 44*a*b**4*d**4 + 228*a*b**4*d**3 + 462*a*b**4*d**2 + 432*a*b**4*d + 158*a*b**4 - 12*a*b**3*c**4*d**4 - 56*a*b**3*c**4*d**3 + 24*a*b**3*c**4*d**2 + 232*a*b**3*c**4*d + 180*a*b**3*c**4 - 24*a*b**3*c**3*d**4 + 56*a*b**3*c**3*d**3 + 824*a*b**3*c**3*d**2 + 1640*a*b**3*c**3*d + 960*a*b**3*c**3 + 136*a*b**3*c**2*d**4 + 1080*a*b**3*c**2*d**3 + 3256*a*b**3*c**2*d**2 + 4200*a*b**3*c**2*d + 1984*a*b**3*c**2 + 360*a*b**3*c*d**4 + 2024*a*b**3*c*d**3 + 4520*a*b**3*c*d**2 + 4664*a*b**3*c*d + 1872*a*b**3*c + 228*a*b**3*d**4 + 1120*a*b**3*d**3 + 2160*a*b**3*d**2 + 1936*a*b**3*d + 684*a*b**3 - 6*a*b**2*c**4*d**4 + 24*a*b**2*c**4*d**3 + 288*a*b**2*c**4*d**2 + 576*a*b**2*c**4*d + 342*a*b**2*c**4 + 104*a*b**2*c**3*d**4 + 824*a*b**2*c**3*d**3 + 2616*a*b**2*c**3*d**2 + 3560*a*b**2*c**3*d + 1760*a*b**2*c**3 + 568*a*b**2*c**2*d**4 + 3256*a*b**2*c**2*d**3 + 7608*a*b**2*c**2*d**2 + 8296*a*b**2*c**2*d + 3520*a*b**2*c**2 + 896*a*b**2*c*d**4 + 4520*a*b**2*c*d**3 + 9096*a*b**2*c*d**2 + 8600*a*b**2*c*d + 3224*a*b**2*c + 462*a*b**2*d**4 + 2160*a*b**2*d**3 + 3960*a*b**2*d**2 + 3384*a*b**2*d + 1146*a*b**2 + 40*a*b*c**4*d**4 + 232*a*b*c**4*d**3 + 576*a*b*c**4*d**2 + 680*a*b*c**4*d + 312*a*b*c**4 + 312*a*b*c**3*d**4 + 1640*a*b*c**3*d**3 + 3560*a*b*c**3*d**2 + 3704*a*b*c**3*d + 1536*a*b*c**3 + 856*a*b*c**2*d**4 + 4200*a*b*c**2*d**3 + 8296*a*b*c**2*d**2 + 7800*a*b*c**2*d + 2944*a*b*c**2 + 1000*a*b*c*d**4 + 4664*a*b*c*d**3 + 8600*a*b*c*d**2 + 7464*a*b*c*d + 2592*a*b*c + 432*a*b*d**4 + 1936*a*b*d**3 + 3384*a*b*d**2 + 2752*a*b*d + 888*a*b + 38*a*c**4*d**4 + 180*a*c**4*d**3 + 342*a*c**4*d**2 + 312*a*c**4*d + 116*a*c**4 + 208*a*c**3*d**4 + 960*a*c**3*d**3 + 1760*a*c**3*d**2 + 1536*a*c**3*d + 544*a*c**3 + 440*a*c**2*d**4 + 1984*a*c**2*d**3 + 3520*a*c**2*d**2 + 2944*a*c**2*d + 992*a*c**2 + 424*a*c*d**4 + 1872*a*c*d**3 + 3224*a*c*d**2 + 2592*a*c*d + 832*a*c + 158*a*d**4 + 684*a*d**3 + 1146*a*d**2 + 888*a*d + 272*a + 8*b**4*c**4*d**2 + 20*b**4*c**4*d + 13*b**4*c**4 + 12*b**4*c**3*d**3 + 70*b**4*c**3*d**2 + 120*b**4*c**3*d + 66*b**4*c**3 + 8*b**4*c**2*d**4 + 70*b**4*c**2*d**3 + 217*b**4*c**2*d**2 + 280*b**4*c**2*d + 131*b**4*c**2 + 20*b**4*c*d**4 + 120*b**4*c*d**3 + 280*b**4*c*d**2 + 296*b**4*c*d + 120*b**4*c + 13*b**4*d**4 + 66*b**4*d**3 + 131*b**4*d**2 + 120*b**4*d + 43*b**4 + 8*b**3*c**4*d**3 + 56*b**3*c**4*d**2 + 104*b**3*c**4*d + 60*b**3*c**4 + 12*b**3*c**3*d**4 + 120*b**3*c**3*d**3 + 424*b**3*c**3*d**2 + 600*b**3*c**3*d + 300*b**3*c**3 + 70*b**3*c**2*d**4 + 456*b**3*c**2*d**3 + 1168*b**3*c**2*d**2 + 1344*b**3*c**2*d + 586*b**3*c**2 + 120*b**3*c*d**4 + 648*b**3*c*d**3 + 1384*b**3*c*d**2 + 1368*b**3*c*d + 528*b**3*c + 66*b**3*d**4 + 320*b**3*d**3 + 608*b**3*d**2 + 536*b**3*d + 186*b**3 + 8*b**2*c**4*d**4 + 56*b**2*c**4*d**3 + 168*b**2*c**4*d**2 + 224*b**2*c**4*d + 110*b**2*c**4 + 70*b**2*c**3*d**4 + 424*b**2*c**3*d**3 + 1056*b**2*c**3*d**2 + 1216*b**2*c**3*d + 538*b**2*c**3 + 217*b**2*c**2*d**4 + 1168*b**2*c**2*d**3 + 2532*b**2*c**2*d**2 + 2572*b**2*c**2*d + 1027*b**2*c**2 + 280*b**2*c*d**4 + 1384*b**2*c*d**3 + 2712*b**2*c*d**2 + 2488*b**2*c*d + 904*b**2*c + 131*b**2*d**4 + 608*b**2*d**3 + 1104*b**2*d**2 + 932*b**2*d + 311*b**2 + 20*b*c**4*d**4 + 104*b*c**4*d**3 + 224*b*c**4*d**2 + 232*b*c**4*d + 96*b*c**4 + 120*b*c**3*d**4 + 600*b*c**3*d**3 + 1216*b*c**3*d**2 + 1176*b*c**3*d + 456*b*c**3 + 280*b*c**2*d**4 + 1344*b*c**2*d**3 + 2572*b*c**2*d**2 + 2328*b*c**2*d + 844*b*c**2 + 296*b*c*d**4 + 1368*b*c*d**3 + 2488*b*c*d**2 + 2120*b*c*d + 720*b*c + 120*b*d**4 + 536*b*d**3 + 932*b*d**2 + 752*b*d + 240*b + 13*c**4*d**4 + 60*c**4*d**3 + 110*c**4*d**2 + 96*c**4*d + 34*c**4 + 66*c**3*d**4 + 300*c**3*d**3 + 538*c**3*d**2 + 456*c**3*d + 156*c**3 + 131*c**2*d**4 + 586*c**2*d**3 + 1027*c**2*d**2 + 844*c**2*d + 278*c**2 + 120*c*d**4 + 528*c*d**3 + 904*c*d**2 + 720*c*d + 228*c + 43*d**4 + 186*d**3 + 311*d**2 + 240*d + 73");
		assertTrue(binarySearch(f).length == 0);
		// f(-+-+)
		f = new RationalPoly("abcd", "18*a**4*b**4*c**4*d**4 + 44*a**4*b**4*c**4*d**3 + 30*a**4*b**4*c**4*d**2 + 4*a**4*b**4*c**4*d + a**4*b**4*c**4 + 56*a**4*b**4*c**3*d**4 + 128*a**4*b**4*c**3*d**3 + 72*a**4*b**4*c**3*d**2 + 4*a**4*b**4*c**3 + 62*a**4*b**4*c**2*d**4 + 130*a**4*b**4*c**2*d**3 + 55*a**4*b**4*c**2*d**2 - 8*a**4*b**4*c**2*d + 11*a**4*b**4*c**2 + 28*a**4*b**4*c*d**4 + 52*a**4*b**4*c*d**3 + 14*a**4*b**4*c*d**2 + 14*a**4*b**4*c + 5*a**4*b**4*d**4 + 10*a**4*b**4*d**3 + 7*a**4*b**4*d**2 + 8*a**4*b**4*d + 7*a**4*b**4 + 44*a**4*b**3*c**4*d**4 + 96*a**4*b**3*c**4*d**3 + 48*a**4*b**3*c**4*d**2 + 8*a**4*b**3*c**4 + 128*a**4*b**3*c**3*d**4 + 240*a**4*b**3*c**3*d**3 + 48*a**4*b**3*c**3*d**2 - 48*a**4*b**3*c**3*d + 32*a**4*b**3*c**3 + 130*a**4*b**3*c**2*d**4 + 192*a**4*b**3*c**2*d**3 - 56*a**4*b**3*c**2*d**2 - 72*a**4*b**3*c**2*d + 70*a**4*b**3*c**2 + 52*a**4*b**3*c*d**4 + 48*a**4*b**3*c*d**3 - 64*a**4*b**3*c*d**2 + 76*a**4*b**3*c + 10*a**4*b**3*d**4 + 16*a**4*b**3*d**3 + 16*a**4*b**3*d**2 + 40*a**4*b**3*d + 34*a**4*b**3 + 30*a**4*b**2*c**4*d**4 + 48*a**4*b**2*c**4*d**3 + 24*a**4*b**2*c**4 + 72*a**4*b**2*c**3*d**4 + 48*a**4*b**2*c**3*d**3 - 144*a**4*b**2*c**3*d**2 - 48*a**4*b**2*c**3*d + 96*a**4*b**2*c**3 + 55*a**4*b**2*c**2*d**4 - 56*a**4*b**2*c**2*d**3 - 276*a**4*b**2*c**2*d**2 - 20*a**4*b**2*c**2*d + 181*a**4*b**2*c**2 + 14*a**4*b**2*c*d**4 - 64*a**4*b**2*c*d**3 - 120*a**4*b**2*c*d**2 + 104*a**4*b**2*c*d + 170*a**4*b**2*c + 7*a**4*b**2*d**4 + 16*a**4*b**2*d**3 + 48*a**4*b**2*d**2 + 100*a**4*b**2*d + 67*a**4*b**2 + 4*a**4*b*c**4*d**4 + 32*a**4*b*c**4*d + 32*a**4*b*c**4 - 48*a**4*b*c**3*d**3 - 48*a**4*b*c**3*d**2 + 112*a**4*b*c**3*d + 128*a**4*b*c**3 - 8*a**4*b*c**2*d**4 - 72*a**4*b*c**2*d**3 - 20*a**4*b*c**2*d**2 + 240*a**4*b*c**2*d + 220*a**4*b*c**2 + 104*a**4*b*c*d**2 + 272*a**4*b*c*d + 184*a**4*b*c + 8*a**4*b*d**4 + 40*a**4*b*d**3 + 100*a**4*b*d**2 + 128*a**4*b*d + 64*a**4*b + a**4*c**4*d**4 + 8*a**4*c**4*d**3 + 24*a**4*c**4*d**2 + 32*a**4*c**4*d + 16*a**4*c**4 + 4*a**4*c**3*d**4 + 32*a**4*c**3*d**3 + 96*a**4*c**3*d**2 + 128*a**4*c**3*d + 64*a**4*c**3 + 11*a**4*c**2*d**4 + 70*a**4*c**2*d**3 + 181*a**4*c**2*d**2 + 220*a**4*c**2*d + 104*a**4*c**2 + 14*a**4*c*d**4 + 76*a**4*c*d**3 + 170*a**4*c*d**2 + 184*a**4*c*d + 80*a**4*c + 7*a**4*d**4 + 34*a**4*d**3 + 67*a**4*d**2 + 64*a**4*d + 25*a**4 + 56*a**3*b**4*c**4*d**4 + 128*a**3*b**4*c**4*d**3 + 72*a**3*b**4*c**4*d**2 + 4*a**3*b**4*c**4 + 168*a**3*b**4*c**3*d**4 + 344*a**3*b**4*c**3*d**3 + 120*a**3*b**4*c**3*d**2 - 56*a**3*b**4*c**3*d + 16*a**3*b**4*c**3 + 176*a**3*b**4*c**2*d**4 + 304*a**3*b**4*c**2*d**3 + 4*a**3*b**4*c**2*d**2 - 104*a**3*b**4*c**2*d + 44*a**3*b**4*c**2 + 72*a**3*b**4*c*d**4 + 88*a**3*b**4*c*d**3 - 64*a**3*b**4*c*d**2 - 40*a**3*b**4*c*d + 56*a**3*b**4*c + 12*a**3*b**4*d**4 + 16*a**3*b**4*d**3 + 4*a**3*b**4*d**2 + 24*a**3*b**4*d + 28*a**3*b**4 + 128*a**3*b**3*c**4*d**4 + 240*a**3*b**3*c**4*d**3 + 48*a**3*b**3*c**4*d**2 - 48*a**3*b**3*c**4*d + 32*a**3*b**3*c**4 + 344*a**3*b**3*c**3*d**4 + 456*a**3*b**3*c**3*d**3 - 312*a**3*b**3*c**3*d**2 - 360*a**3*b**3*c**3*d + 128*a**3*b**3*c**3 + 304*a**3*b**3*c**2*d**4 + 120*a**3*b**3*c**2*d**3 - 872*a**3*b**3*c**2*d**2 - 504*a**3*b**3*c**2*d + 280*a**3*b**3*c**2 + 88*a**3*b**3*c*d**4 - 168*a**3*b**3*c*d**3 - 616*a**3*b**3*c*d**2 - 120*a**3*b**3*c*d + 304*a**3*b**3*c + 16*a**3*b**3*d**4 - 8*a**3*b**3*d**3 - 8*a**3*b**3*d**2 + 136*a**3*b**3*d + 136*a**3*b**3 + 72*a**3*b**2*c**4*d**4 + 48*a**3*b**2*c**4*d**3 - 144*a**3*b**2*c**4*d**2 - 48*a**3*b**2*c**4*d + 96*a**3*b**2*c**4 + 120*a**3*b**2*c**3*d**4 - 312*a**3*b**2*c**3*d**3 - 1080*a**3*b**2*c**3*d**2 - 360*a**3*b**2*c**3*d + 384*a**3*b**2*c**3 + 4*a**3*b**2*c**2*d**4 - 872*a**3*b**2*c**2*d**3 - 1752*a**3*b**2*c**2*d**2 - 296*a**3*b**2*c**2*d + 724*a**3*b**2*c**2 - 64*a**3*b**2*c*d**4 - 616*a**3*b**2*c*d**3 - 840*a**3*b**2*c*d**2 + 296*a**3*b**2*c*d + 680*a**3*b**2*c + 4*a**3*b**2*d**4 - 8*a**3*b**2*d**3 + 120*a**3*b**2*d**2 + 376*a**3*b**2*d + 268*a**3*b**2 - 48*a**3*b*c**4*d**3 - 48*a**3*b*c**4*d**2 + 112*a**3*b*c**4*d + 128*a**3*b*c**4 - 56*a**3*b*c**3*d**4 - 360*a**3*b*c**3*d**3 - 360*a**3*b*c**3*d**2 + 392*a**3*b*c**3*d + 512*a**3*b*c**3 - 104*a**3*b*c**2*d**4 - 504*a**3*b*c**2*d**3 - 296*a**3*b*c**2*d**2 + 888*a**3*b*c**2*d + 880*a**3*b*c**2 - 40*a**3*b*c*d**4 - 120*a**3*b*c*d**3 + 296*a**3*b*c*d**2 + 1048*a**3*b*c*d + 736*a**3*b*c + 24*a**3*b*d**4 + 136*a**3*b*d**3 + 376*a**3*b*d**2 + 504*a**3*b*d + 256*a**3*b + 4*a**3*c**4*d**4 + 32*a**3*c**4*d**3 + 96*a**3*c**4*d**2 + 128*a**3*c**4*d + 64*a**3*c**4 + 16*a**3*c**3*d**4 + 128*a**3*c**3*d**3 + 384*a**3*c**3*d**2 + 512*a**3*c**3*d + 256*a**3*c**3 + 44*a**3*c**2*d**4 + 280*a**3*c**2*d**3 + 724*a**3*c**2*d**2 + 880*a**3*c**2*d + 416*a**3*c**2 + 56*a**3*c*d**4 + 304*a**3*c*d**3 + 680*a**3*c*d**2 + 736*a**3*c*d + 320*a**3*c + 28*a**3*d**4 + 136*a**3*d**3 + 268*a**3*d**2 + 256*a**3*d + 100*a**3 + 62*a**2*b**4*c**4*d**4 + 130*a**2*b**4*c**4*d**3 + 55*a**2*b**4*c**4*d**2 - 8*a**2*b**4*c**4*d + 11*a**2*b**4*c**4 + 176*a**2*b**4*c**3*d**4 + 304*a**2*b**4*c**3*d**3 + 4*a**2*b**4*c**3*d**2 - 104*a**2*b**4*c**3*d + 44*a**2*b**4*c**3 + 168*a**2*b**4*c**2*d**4 + 192*a**2*b**4*c**2*d**3 - 204*a**2*b**4*c**2*d**2 - 168*a**2*b**4*c**2*d + 96*a**2*b**4*c**2 + 56*a**2*b**4*c*d**4 - 8*a**2*b**4*c*d**3 - 200*a**2*b**4*c*d**2 - 56*a**2*b**4*c*d + 104*a**2*b**4*c + 8*a**2*b**4*d**4 - 2*a**2*b**4*d**3 - 11*a**2*b**4*d**2 + 40*a**2*b**4*d + 47*a**2*b**4 + 130*a**2*b**3*c**4*d**4 + 192*a**2*b**3*c**4*d**3 - 56*a**2*b**3*c**4*d**2 - 72*a**2*b**3*c**4*d + 70*a**2*b**3*c**4 + 304*a**2*b**3*c**3*d**4 + 120*a**2*b**3*c**3*d**3 - 872*a**2*b**3*c**3*d**2 - 504*a**2*b**3*c**3*d + 280*a**2*b**3*c**3 + 192*a**2*b**3*c**2*d**4 - 504*a**2*b**3*c**2*d**3 - 1752*a**2*b**3*c**2*d**2 - 648*a**2*b**3*c**2*d + 552*a**2*b**3*c**2 - 8*a**2*b**3*c*d**4 - 600*a**2*b**3*c*d**3 - 1112*a**2*b**3*c*d**2 - 72*a**2*b**3*c*d + 544*a**2*b**3*c - 2*a**2*b**3*d**4 - 72*a**2*b**3*d**3 - 32*a**2*b**3*d**2 + 240*a**2*b**3*d + 226*a**2*b**3 + 55*a**2*b**2*c**4*d**4 - 56*a**2*b**2*c**4*d**3 - 276*a**2*b**2*c**4*d**2 - 20*a**2*b**2*c**4*d + 181*a**2*b**2*c**4 + 4*a**2*b**2*c**3*d**4 - 872*a**2*b**2*c**3*d**3 - 1752*a**2*b**2*c**3*d**2 - 296*a**2*b**2*c**3*d + 724*a**2*b**2*c**3 - 204*a**2*b**2*c**2*d**4 - 1752*a**2*b**2*c**2*d**3 - 2664*a**2*b**2*c**2*d**2 - 24*a**2*b**2*c**2*d + 1308*a**2*b**2*c**2 - 200*a**2*b**2*c*d**4 - 1112*a**2*b**2*c*d**3 - 1176*a**2*b**2*c*d**2 + 760*a**2*b**2*c*d + 1168*a**2*b**2*c - 11*a**2*b**2*d**4 - 32*a**2*b**2*d**3 + 228*a**2*b**2*d**2 + 652*a**2*b**2*d + 439*a**2*b**2 - 8*a**2*b*c**4*d**4 - 72*a**2*b*c**4*d**3 - 20*a**2*b*c**4*d**2 + 240*a**2*b*c**4*d + 220*a**2*b*c**4 - 104*a**2*b*c**3*d**4 - 504*a**2*b*c**3*d**3 - 296*a**2*b*c**3*d**2 + 888*a**2*b*c**3*d + 880*a**2*b*c**3 - 168*a**2*b*c**2*d**4 - 648*a**2*b*c**2*d**3 - 24*a**2*b*c**2*d**2 + 1800*a**2*b*c**2*d + 1488*a**2*b*c**2 - 56*a**2*b*c*d**4 - 72*a**2*b*c*d**3 + 760*a**2*b*c*d**2 + 1896*a**2*b*c*d + 1216*a**2*b*c + 40*a**2*b*d**4 + 240*a**2*b*d**3 + 652*a**2*b*d**2 + 840*a**2*b*d + 412*a**2*b + 11*a**2*c**4*d**4 + 70*a**2*c**4*d**3 + 181*a**2*c**4*d**2 + 220*a**2*c**4*d + 104*a**2*c**4 + 44*a**2*c**3*d**4 + 280*a**2*c**3*d**3 + 724*a**2*c**3*d**2 + 880*a**2*c**3*d + 416*a**2*c**3 + 96*a**2*c**2*d**4 + 552*a**2*c**2*d**3 + 1308*a**2*c**2*d**2 + 1488*a**2*c**2*d + 672*a**2*c**2 + 104*a**2*c*d**4 + 544*a**2*c*d**3 + 1168*a**2*c*d**2 + 1216*a**2*c*d + 512*a**2*c + 47*a**2*d**4 + 226*a**2*d**3 + 439*a**2*d**2 + 412*a**2*d + 158*a**2 + 28*a*b**4*c**4*d**4 + 52*a*b**4*c**4*d**3 + 14*a*b**4*c**4*d**2 + 14*a*b**4*c**4 + 72*a*b**4*c**3*d**4 + 88*a*b**4*c**3*d**3 - 64*a*b**4*c**3*d**2 - 40*a*b**4*c**3*d + 56*a*b**4*c**3 + 56*a*b**4*c**2*d**4 - 8*a*b**4*c**2*d**3 - 200*a*b**4*c**2*d**2 - 56*a*b**4*c**2*d + 104*a*b**4*c**2 + 8*a*b**4*c*d**4 - 72*a*b**4*c*d**3 - 152*a*b**4*c*d**2 + 8*a*b**4*c*d + 96*a*b**4*c - 12*a*b**4*d**3 - 6*a*b**4*d**2 + 40*a*b**4*d + 38*a*b**4 + 52*a*b**3*c**4*d**4 + 48*a*b**3*c**4*d**3 - 64*a*b**3*c**4*d**2 + 76*a*b**3*c**4 + 88*a*b**3*c**3*d**4 - 168*a*b**3*c**3*d**3 - 616*a*b**3*c**3*d**2 - 120*a*b**3*c**3*d + 304*a*b**3*c**3 - 8*a*b**3*c**2*d**4 - 600*a*b**3*c**2*d**3 - 1112*a*b**3*c**2*d**2 - 72*a*b**3*c**2*d + 544*a*b**3*c**2 - 72*a*b**3*c*d**4 - 504*a*b**3*c*d**3 - 632*a*b**3*c*d**2 + 216*a*b**3*c*d + 480*a*b**3*c - 12*a*b**3*d**4 - 56*a*b**3*d**3 + 24*a*b**3*d**2 + 232*a*b**3*d + 180*a*b**3 + 14*a*b**2*c**4*d**4 - 64*a*b**2*c**4*d**3 - 120*a*b**2*c**4*d**2 + 104*a*b**2*c**4*d + 170*a*b**2*c**4 - 64*a*b**2*c**3*d**4 - 616*a*b**2*c**3*d**3 - 840*a*b**2*c**3*d**2 + 296*a*b**2*c**3*d + 680*a*b**2*c**3 - 200*a*b**2*c**2*d**4 - 1112*a*b**2*c**2*d**3 - 1176*a*b**2*c**2*d**2 + 760*a*b**2*c**2*d + 1168*a*b**2*c**2 - 152*a*b**2*c*d**4 - 632*a*b**2*c*d**3 - 312*a*b**2*c*d**2 + 1048*a*b**2*c*d + 976*a*b**2*c - 6*a*b**2*d**4 + 24*a*b**2*d**3 + 288*a*b**2*d**2 + 576*a*b**2*d + 342*a*b**2 + 104*a*b*c**4*d**2 + 272*a*b*c**4*d + 184*a*b*c**4 - 40*a*b*c**3*d**4 - 120*a*b*c**3*d**3 + 296*a*b*c**3*d**2 + 1048*a*b*c**3*d + 736*a*b*c**3 - 56*a*b*c**2*d**4 - 72*a*b*c**2*d**3 + 760*a*b*c**2*d**2 + 1896*a*b*c**2*d + 1216*a*b*c**2 + 8*a*b*c*d**4 + 216*a*b*c*d**3 + 1048*a*b*c*d**2 + 1736*a*b*c*d + 960*a*b*c + 40*a*b*d**4 + 232*a*b*d**3 + 576*a*b*d**2 + 680*a*b*d + 312*a*b + 14*a*c**4*d**4 + 76*a*c**4*d**3 + 170*a*c**4*d**2 + 184*a*c**4*d + 80*a*c**4 + 56*a*c**3*d**4 + 304*a*c**3*d**3 + 680*a*c**3*d**2 + 736*a*c**3*d + 320*a*c**3 + 104*a*c**2*d**4 + 544*a*c**2*d**3 + 1168*a*c**2*d**2 + 1216*a*c**2*d + 512*a*c**2 + 96*a*c*d**4 + 480*a*c*d**3 + 976*a*c*d**2 + 960*a*c*d + 384*a*c + 38*a*d**4 + 180*a*d**3 + 342*a*d**2 + 312*a*d + 116*a + 5*b**4*c**4*d**4 + 10*b**4*c**4*d**3 + 7*b**4*c**4*d**2 + 8*b**4*c**4*d + 7*b**4*c**4 + 12*b**4*c**3*d**4 + 16*b**4*c**3*d**3 + 4*b**4*c**3*d**2 + 24*b**4*c**3*d + 28*b**4*c**3 + 8*b**4*c**2*d**4 - 2*b**4*c**2*d**3 - 11*b**4*c**2*d**2 + 40*b**4*c**2*d + 47*b**4*c**2 - 12*b**4*c*d**3 - 6*b**4*c*d**2 + 40*b**4*c*d + 38*b**4*c + 8*b**4*d**2 + 20*b**4*d + 13*b**4 + 10*b**3*c**4*d**4 + 16*b**3*c**4*d**3 + 16*b**3*c**4*d**2 + 40*b**3*c**4*d + 34*b**3*c**4 + 16*b**3*c**3*d**4 - 8*b**3*c**3*d**3 - 8*b**3*c**3*d**2 + 136*b**3*c**3*d + 136*b**3*c**3 - 2*b**3*c**2*d**4 - 72*b**3*c**2*d**3 - 32*b**3*c**2*d**2 + 240*b**3*c**2*d + 226*b**3*c**2 - 12*b**3*c*d**4 - 56*b**3*c*d**3 + 24*b**3*c*d**2 + 232*b**3*c*d + 180*b**3*c + 8*b**3*d**3 + 56*b**3*d**2 + 104*b**3*d + 60*b**3 + 7*b**2*c**4*d**4 + 16*b**2*c**4*d**3 + 48*b**2*c**4*d**2 + 100*b**2*c**4*d + 67*b**2*c**4 + 4*b**2*c**3*d**4 - 8*b**2*c**3*d**3 + 120*b**2*c**3*d**2 + 376*b**2*c**3*d + 268*b**2*c**3 - 11*b**2*c**2*d**4 - 32*b**2*c**2*d**3 + 228*b**2*c**2*d**2 + 652*b**2*c**2*d + 439*b**2*c**2 - 6*b**2*c*d**4 + 24*b**2*c*d**3 + 288*b**2*c*d**2 + 576*b**2*c*d + 342*b**2*c + 8*b**2*d**4 + 56*b**2*d**3 + 168*b**2*d**2 + 224*b**2*d + 110*b**2 + 8*b*c**4*d**4 + 40*b*c**4*d**3 + 100*b*c**4*d**2 + 128*b*c**4*d + 64*b*c**4 + 24*b*c**3*d**4 + 136*b*c**3*d**3 + 376*b*c**3*d**2 + 504*b*c**3*d + 256*b*c**3 + 40*b*c**2*d**4 + 240*b*c**2*d**3 + 652*b*c**2*d**2 + 840*b*c**2*d + 412*b*c**2 + 40*b*c*d**4 + 232*b*c*d**3 + 576*b*c*d**2 + 680*b*c*d + 312*b*c + 20*b*d**4 + 104*b*d**3 + 224*b*d**2 + 232*b*d + 96*b + 7*c**4*d**4 + 34*c**4*d**3 + 67*c**4*d**2 + 64*c**4*d + 25*c**4 + 28*c**3*d**4 + 136*c**3*d**3 + 268*c**3*d**2 + 256*c**3*d + 100*c**3 + 47*c**2*d**4 + 226*c**2*d**3 + 439*c**2*d**2 + 412*c**2*d + 158*c**2 + 38*c*d**4 + 180*c*d**3 + 342*c*d**2 + 312*c*d + 116*c + 13*d**4 + 60*d**3 + 110*d**2 + 96*d + 34");
		assertTrue(binarySearch(f).length == 0);
	}

	@Test
	public void testYang08() {
		// ISBN 9787030207210, p156, §7.1
		RationalPoly f = new RationalPoly("z", "10195920*z**8 + 2109632*z**7 - 5387520*z**6 + 1361336*z**5 + 61445*z**4 - 52468*z**3 + 6350*z**2 - 300*z + 5");
		assertTrue(binarySearch(f).length == 0);
		// more steps for z - 1/29
		assertTrue(binarySearch(new RationalPoly("z", "-1/29").add(f)).length == 0);
		// negative for z - 1/28
		f.add(new RationalPoly("z", "-1/28"));
		Rational[] result = binarySearch(f);
		assertTrue(result[1].signum() < 0);
		assertEquals(result[1], subs(f, Arrays.copyOfRange(result, 0, 1), 'z'));
		// p172, problem 11, results from p172-11.py
		f = new RationalPoly("uv", "170172209*u**4 - 1301377672*u**3*v - 20000000*u**3 + 3553788598*u**2*v**2 + 30000000*u**2 - 3864133016*u*v**3 - 20000000*u + 1611722090*v**4 - 1621722090*v**3 + 5315682897*v**2 - 6426888360*v + 2572755344");
		assertTrue(binarySearch(f).length == 0);
		f = new RationalPoly("uv", "2572755344*u**4 - 6426888360*u**3*v - 20000000*u**3 + 5315682897*u**2*v**2 + 30000000*u**2 - 1621722090*u*v**3 - 20000000*u + 1611722090*v**4 - 3864133016*v**3 + 3553788598*v**2 - 1301377672*v + 170172209");
		assertTrue(binarySearch(f).length == 0);
		f = new RationalPoly("uv", "2572755344*u**4 - 20000000*u**3*v - 6426888360*u**3 + 30000000*u**2*v**2 + 5315682897*u**2 - 20000000*u*v**3 - 1621722090*u + 170172209*v**4 - 1301377672*v**3 + 3553788598*v**2 - 3864133016*v + 1611722090");
		assertTrue(binarySearch(f).length == 0);
	}
}