package com.xqbase.math.inequality;

import java.io.InputStream;
import java.math.BigInteger;
import java.util.Properties;
import java.util.TreeMap;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogManager;

import com.xqbase.math.polys.Monom;
import com.xqbase.math.polys.Rational;
import com.xqbase.math.polys.Rational2;
import com.xqbase.math.polys.Rational2Poly;
import com.xqbase.math.polys.RationalPoly;

public class _4741634 {
	private static final String VARS = "xyz";
	private static final Rational _1 = Rational.valueOf(1);
	// results from 4741634-sage.py, 15 positive real_roots excluding z = 1
	private static final String[][] ROOTS = {
		{},
		{"90220840461767704196574386866999697827392466760494216101380728355214398732129531453702746165769006849715043368957623863364776808849334461360694918537537670926695094890104322436476406191120258465203618312406404633801939954699453971674266869400086865648464952586016133049842706077880092822830975077342093183356407320977207928342701352928159923906571398926475417917912579389882843087833350214434857237187444531299/1610549498742802542779358463994860889496758789562596585772765877694160155780917202208246926597107743450288982838741462553611813658672536677050906593297414768831866900508201805873784408995302580101404941712535310963531516039765280346226716911715260211886715463645447385435459399997143547800347962347219465624274679224517162278631436098090164286135813373232249854039108611078085852050607543245516573195999289278464", "180441680923535408393148773733999395654784933520988432202761456710428797464259062907405492331538013699430086737915247726729553617698668922721389837075075798906613090359931344563662255664333412862986969756644310227240686332712214534853752369816599416844082312992224955977268477053579864714599672056193240199993998607710711373936937026903600194376592102262154008841452732236780193953710417183229580764835094140723/3221098997485605085558716927989721778993517579125193171545531755388320311561834404416493853194215486900577965677482925107223627317345073354101813186594829537663733801016403611747568817990605160202809883425070621927063032079530560692453433823430520423773430927290894770870918799994287095600695924694438931248549358449034324557262872196180328572271626746464499708078217222156171704101215086491033146391998578556928"},
		{"58422365045445285236131514432392284366966545842819041731103953013673377006797479365237096497178185110030640466710930320339948722398874672398757235878993032220140384966215166252898063723455624314124023810738387684846488969313538747133142466450613339803667820897442265232466813756727617181466075132137609961519998825230873424857136332467429918552592621642629613427261562740614496788771872278830389019293586246547709671280315269/453329382649989040480123980789758101583170692656129538833467856136513372767211010416196945918498591624878449167007732430731436775390881500449613908892920658885362873814719695159036788106167110805746783899361305810276064300636000393842871903011940720586488110986996839857127741307192215550027840598936584283151136914813213302944357264838564490000498992899159158659399351636614318446192488295327293800631969086848782638340112384", "29211182522722642618065757216196142183483272921409520865551976506836688503398739682618548248589092555015320233355465160169974361199437336199378617939506351575009647191201040395576091238152932008321232801240215741388345899491316276798544033973624141152776114213143010354263721564190354773881732737858237780377987512956429787832045475798794211359293564663497884013425123313291341320148995849251760502868440093634041436804415447/226664691324994520240061990394879050791585346328064769416733928068256686383605505208098472959249295812439224583503866215365718387695440750224806954446460329442681436907359847579518394053083555402873391949680652905138032150318000196921435951505970360293244055493498419928563870653596107775013920299468292141575568457406606651472178632419282245000249496449579579329699675818307159223096244147663646900315984543424391319170056192"},
		{"2143174263706503/9007199254740992", "1071587159764173/4503599627370496"},
		{"9795768552665919/18014398509481984", "78366148477149195/144115188075855872"},
		{"163938432168755415/288230376151711744", "81969216112288629/144115188075855872"},
		{"27656399156659227/36028797018963968", "13828199606240535/18014398509481984"},
		{"224012579530412151/288230376151711744", "1792100636299119051/2305843009213693952"},
		// {"1993763709744714489467445898769759537203982283718393593066809786750523235841872190329529580968992903629734337687036572640368748860821026468907521059350341422546803041921825479710151387944324520634777800899136143688574287423268306198188285799804793229254066712984610622632268279147067351494760234480493491031707149580794343681336375376409305388689826321216310554419671165234628860515260413815998082202887398468026006255843151127504962365601/1993763709744714489467445898769759537203982283718393593066809786750523235841872190329529580968992903629734337687036572640368748860821026468907521059350341422935455084673838954613916184347514385225206421201854631672822248348492527300401412696221254955427471745210336981444314072482548587902107880716220090239059698559325275222853790679266964689038399690939212607837179308321651275665127703500076560885655399792740869252181379496186463911936", "510403509694646909303666150085058441524219464631908759825103305408133948375519280724359572728062183329211990447881362595934399708370182776040325391193687404289306556232008020294889982938962215272152494201103869858799293352533655444697823890171351107869289777198203080938819371855709596117317826850557811130169643807650907231149586101521913532920152522524204996843016897552067103452235319802143413116656322631824000793221328708384884867546981/510403509694646909303666150085058441524219464631908759825103305408133948375519280724359572728062183329211990447881362595934399708370182776040325391193687404271476501676502772381162543192963682617652843827674785708242495577214086988902761650232641268589432766773846267249744402555532438502939617463352343101199282831187270457050570413892342960393830320880438427606317902930342726570272692096019599586727782346941662528558433151023734761455616"}, // z = 1
		{"16733659367247138098161565718810449569301176656904073109775142844241310183716377449974263104787881255286485246563176531377475918989328496131558411616204251551001515673918013120030332429670370887426706762366148172626608015153269012023975295586942105894462686116294017157386676115881627249693363700791070927334466638309175025641478393139847055565398222778303307799075982854517987659007185344616717470116733545459084409421432089160617/14854697210674840878452702602518793472677337256956052728495074709881270198835970389317941523857361850364017022304509376290207720256008405006732948566603224150355570649160734970971317472662883886882710614814271268791126075003240460905443226517895273532178042420821912448438361827154074519143312280745953993790296454424599373510880698854230081208336350999319647310951197954428577986844835456461284763259108363037860909493128802598912", "33467318734494276196323131437620899138602353313808146219550285688482620367432754899948526209575762510572970493126353062754951837978656992263116823232408503102003664820213051097255606464088972686892502699609303737761514568909452483649028891130585828498904127509752213359806972501525485971088450179016171702314177667392551215132197983829759014530149170143968683258414663244578319929693874015251222325332719954401600561605230005930609/29709394421349681756905405205037586945354674513912105456990149419762540397671940778635883047714723700728034044609018752580415440512016810013465897133206448300711141298321469941942634945325767773765421229628542537582252150006480921810886453035790547064356084841643824896876723654308149038286624561491907987580592908849198747021761397708460162416672701998639294621902395908857155973689670912922569526518216726075721818986257605197824"},
		{"17475801291296075579366967849873987356765544066402167481314715811362604803307371/14821387422376473014217086081112052205218558037201992197050570753012880593911808", "33332445700256491812680382193890751194292211713838440733087387133429107397/28269553036454149273332760011886696253239742350009903329945699220681916416"},
		{"831996911497380201/576460752303423488", "415998475258424229/288230376151711744"},
		{"32227587257378647666661432214880566702736917/22300745198530623141535718272648361505980416", "4755952434000056264199972156094093083851267563893786949822165911/3291009114642412084309938365114701009965471731267159726697218048"},
		{"5738794707093980053525832713886989741668078998397375890861150628711066030461333837911512808989762804631199126464530011795581021079796726682305217719332842526385946209096112915277364769663237953727069703858436210390013048573166796027762190815065520785184419490518583576467838518971456429832285473941711820401723060550451594265970853504412260800881930511935599886526968839245659168539887185285781806106685035461774041305648773/3541635801953039378750968599919985168618521036376012022136467626066510724743836018876538639988270247069362884117247909615089349807741261722262608663225942647541897451677497618429974907079430553169896749213760201642781752348718753076897436742280786879581938367085912811383810478962439183984592504679192064712118257146978228929252791131551285078128898382024680927026557434661049362860878814807244482817437258491006114362032128", "11477589414187960107051665427773979483336157996794751781722301257422132060922667675823025617979525609262398252929060023591162042159593453364610435438665685052808804098516092478086315193381983665497293597141172357937580439309955619829825292021759723351787270323218647257821925810817928825210407191283537982982803296302319826294030509952630649401488361273979276033077984226160029163480265149544220528066267736118755442822375671/7083271603906078757501937199839970337237042072752024044272935252133021449487672037753077279976540494138725768234495819230178699615482523444525217326451885295083794903354995236859949814158861106339793498427520403285563504697437506153794873484561573759163876734171825622767620957924878367969185009358384129424236514293956457858505582263102570156257796764049361854053114869322098725721757629614488965634874516982012228724064256"},
		{"13026688165300328654393066908574120452850768877681205130069671066547555446023663085825521399926949514229306005466258757954726527107397600450425196907964409634325474412499126209277266885236217509226663290732363860419461033673052413124820857721775994287291508588537400444328511310186494747075321133280045822169360376284575248882311606878587720936129286169416418998515175253181561279896068345039105317602699349807595783073830871/7083271603906078757501937199839970337237042072752024044272935252133021449487672037753077279976540494138725768234495819230178699615482523444525217326451885295083794903354995236859949814158861106339793498427520403285563504697437506153794873484561573759163876734171825622767620957924878367969185009358384129424236514293956457858505582263102570156257796764049361854053114869322098725721757629614488965634874516982012228724064256", "26053376330600657308786133817148240905701537755362410260139342133095110892047326171651042799853899028458612010932517515909453054214795200900850393815928819268651682142692042925825964065348530263063585685302102352975119627182019317695648493485106053523924300347412984571997668158761266911133136358106742330846853572925357973821195731785770417170666359549349825309618872951065229763900853324014527327687603656925836555161333617/14166543207812157515003874399679940674474084145504048088545870504266042898975344075506154559953080988277451536468991638460357399230965046889050434652903770590167589806709990473719899628317722212679586996855040806571127009394875012307589746969123147518327753468343651245535241915849756735938370018716768258848473028587912915717011164526205140312515593528098723708106229738644197451443515259228977931269749033964024457448128512"},
		{"3112143487080470314627049815162167478645162640360062341496209/1606938044258990275541962092341162602522202993782792835301376", "24897147896643762517016445364212659575566375027002952902035281/12855504354071922204335696738729300820177623950262342682411008"},
    };
	private static final Monom CONSTANT = new Monom(VARS, "");

	static {
		java.util.logging.Logger rootLogger = LogManager.getLogManager().getLogger("");
		rootLogger.setLevel(Level.FINE);
		for (Handler h : rootLogger.getHandlers()) {
			h.setLevel(Level.FINE);
		}
	}

	private static RationalPoly solve(RationalPoly f, String var) {
		TreeMap<Monom, RationalPoly> poly = f.coeffsOf(var);
		RationalPoly a1 = poly.remove(new Monom(VARS, var));
		RationalPoly a0 = poly.remove(CONSTANT);
		if (!poly.isEmpty()) {
			throw new RuntimeException("Should be empty: " + poly);
		}
		Rational denominator = a1.remove(new Monom(VARS, "")).negate();
		if (!a1.isEmpty()) {
			throw new RuntimeException("Should be empty: " + a1);
		}
		RationalPoly ret = new RationalPoly(VARS);
		a0.forEach((m, c) -> {
			ret.put(m, c.div(denominator));
		});
		return ret;
	}

	private static Rational2 subs(Rational2Poly f, char from, Rational2 to) {
		Rational2Poly poly = f.subs(from, to);
		Rational2 ret = poly.remove(CONSTANT);
		if (!poly.isEmpty()) {
			throw new RuntimeException("Should be empty: " + poly);
		}
		return ret;
	}

	private static Rational[] subsInterval(Rational2Poly f, char var, Rational2 to0, Rational2 to1, BigInteger lcm) {
		Rational2 x0 = subs(f, var, to0);
		Rational2 x1 = subs(f, var, to1);
		if (x0.compareTo(x1) > 0) {
			Rational2 t = x0;
			x0 = x1;
			x1 = t;
		}
		Rational lcm_ = new Rational(lcm);
		return new Rational[] {x0.toRational().div(lcm_), x1.toRational().div(lcm_)};
	}

	// at least 2^-48 for the last interval
	private static final BigInteger INTERVAL_DENOMINATOR = BigInteger.valueOf(1L<<62);

	private static Rational2 floor(Rational r0) {
		Rational2 r1 = new Rational2(r0.floor(INTERVAL_DENOMINATOR));
		// for debug only
		/*
		Rational r10 = r1.toRational().negate();
		r10.add(r0);
		System.out.println(r0 + " -> " + r1 + " (-" + r10.doubleValue() + ")");
		if (r10.signum() < 0) {
			throw new RuntimeException();
		}
		*/
		return r1;
	}

	private static Rational2 cell(Rational r0) {
		Rational2 r1 = new Rational2(r0.cell(INTERVAL_DENOMINATOR));
		// for debug only
		/*
		Rational r10 = r0.negate();
		r10.add(r1.toRational());
		if (r10.signum() < 0) {
			throw new RuntimeException();
		}
		System.out.println(r0 + " -> " + r1 + " (+" + r10.doubleValue() + ")");
		*/
		return r1;
	}

	public static void main(String[] args) throws Exception {
		Properties p = new Properties();
		// results from 4741634-sage.py, B[1] and B[2]
		try (InputStream in = _4741634.class.getResourceAsStream("4741634.properties")) {
			p.load(in);
		}
		Rational2Poly f = new Rational2Poly(VARS, "-x**4*y*z**2 - x**3*y**3*z**3 - x**3*y**2 - x**2*y**4*z - x**2*z**3 - x*y**2*z**4 - 5*x*y*z + 4*x*y + 4*x*z - y**3*z**2 + 4*y*z");
		RationalPoly b1 = new RationalPoly(VARS, p.getProperty("B1"));
		RationalPoly b2 = new RationalPoly(VARS, p.getProperty("B2"));
		RationalPoly x = solve(b1, "x");
		RationalPoly y = solve(b2, "y");
		BigInteger[] lcmX = {null};
		BigInteger[] lcmY = {null};
		Rational2Poly x2 = Rational2Poly.fromRationalPoly(x, lcmX);
		Rational2Poly y2 = Rational2Poly.fromRationalPoly(y, lcmY);
		System.out.println("x(z = 1) = " + x.subs('z', _1));
		System.out.println("y(z = 1) = " + y.subs('z', _1));
		for (int i = 0; i < ROOTS.length; i ++) {
			String[] roots = ROOTS[i];
			// exists z0' < z0 < z1 < z1' such that z0' and z1''s denominators are not too large
			// monotonicity of (z0', z1') implies monotonicity of (z0, z1)
			Rational2 z0 = floor(new Rational(roots[0]));
			Rational2 z1 = cell(new Rational(roots[1]));
			System.out.println(z0 + " <= z <= " + z1);

			Rational2 z1_ = new Rational2(BigInteger.ZERO);
			z1_.add(z1);
			z1_.add(z0.negate());
			Rational2Poly x_z = x2.subs('z', new Rational2Poly(VARS, z1_ + "*z + " + z0)).diff('z');
			if (x_z.get(CONSTANT).signum() < 0) {
				x_z = new Rational2Poly(VARS, "").add(-1, x_z);
			}
			System.out.print("prove x is monotonic: ");
			System.out.println(Bisection.search01(x_z).length == 0);
			Rational2Poly y_z = y2.subs('z', new Rational2Poly(VARS, z1_ + "*z + " + z0)).diff('z');
			if (y_z.get(CONSTANT).signum() < 0) {
				y_z = new Rational2Poly(VARS, "").add(-1, y_z);
			}
			System.out.print("prove y is monotonic: ");
			System.out.println(Bisection.search01(y_z).length == 0);

			Rational[] x01 = subsInterval(x2, 'z', z0, z1, lcmX[0]);
			Rational2 x0 = floor(x01[0]), x1 = cell(x01[1]);
			Rational[] y01 = subsInterval(y2, 'z', z0, z1, lcmY[0]);
			Rational2 y0 = floor(y01[0]), y1 = cell(y01[1]);
			if ((x0.signum() < 0 && x1.signum() < 0) || (y0.signum() < 0 && y1.signum() < 0)) {
				System.out.println("x or y is negative: x = " + x0.doubleValue() + ", y = " + y0.doubleValue());
				continue;
			}
			if ((x0.signum() < 0 && x1.signum() > 0) || (y0.signum() < 0 && y1.signum() > 0)) {
				System.out.println("x0*x1 < 0 or y0*y1 < 0: x = " + x0.doubleValue() + ", y = " + y0.doubleValue());
				break;
			}
			x1.add(x0.negate());
			y1.add(y0.negate());
			z1.add(z0.negate());
			Rational2Poly f1 = f.
					subs('x', new Rational2Poly(VARS, x1 + "*x + " + x0)).
					subs('y', new Rational2Poly(VARS, y1 + "*y + " + y0)).
					subs('z', new Rational2Poly(VARS, z1 + "*z + " + z0));
			System.out.print("prove positive in (" +
					x0.doubleValue() + " + " + x1.doubleValue() + ", " +
					y0.doubleValue() + " + " + y1.doubleValue() + ", " +
					z0.doubleValue() + " + " + z1.doubleValue() + "): ");
			System.out.println(Bisection.search01(f1).length == 0);
		}
	}
}