from sympy import *

def reduced(x, y, z, w):
    gcd = gcd_list([x, y, z, w])
    return cancel(x/gcd), cancel(y/gcd), cancel(z/gcd), cancel(w/gcd)

def cross(P1, P2, P3):
    x10, x11, x12, x13 = P1
    x20, x21, x22, x23 = P2
    x30, x31, x32, x33 = P3
    # generated by cross-3d.py
    x = -x11*x22*x33 + x11*x23*x32 + x12*x21*x33 - x12*x23*x31 - x13*x21*x32 + x13*x22*x31
    y = x10*x22*x33 - x10*x23*x32 - x12*x20*x33 + x12*x23*x30 + x13*x20*x32 - x13*x22*x30
    z = -x10*x21*x33 + x10*x23*x31 + x11*x20*x33 - x11*x23*x30 - x13*x20*x31 + x13*x21*x30
    w = x10*x21*x32 - x10*x22*x31 - x11*x20*x32 + x11*x22*x30 + x12*x20*x31 - x12*x21*x30
    return reduced(x, y, z, w)

def on_surface(surface, P):
    x, y, z, w = symbols('x, y, z, w')
    return surface.subs(x, P[0]).subs(y, P[1]).subs(z, P[2]).subs(w, P[3]);

def main():
    # https://imomath.com/index.cgi?page=inversion (Problem 11)
    # sufficient to prove: if seven vertices of a hexahedron lie on a quadric curve, then so does the eighth vertex
    a, b, c, d, e, f, g, h, j, k, p, q, r, x, y, z, w = symbols('a, b, c, d, e, f, g, h, j, k, p, q, r, x, y, z, w')
    O, A, B, C = (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)
    # O, B, C, D are coplanar; O, A, C, E are coplanar; O, A, B, F are coplanar
    D, E, F = (1, 0, 1, 1), (1, 1, 0, p), (1, q, r, 0)
    surface = (Matrix([[x, y, z, w]])*Matrix([[a, b, c, d], [b, e, f, g], [c, f, h, j], [d, g, j, k]])*Matrix([[x], [y], [z], [w]]))[0, 0]
    print('surface:', Poly(surface, x, y, z, w), '= 0')
    eq1 = on_surface(surface, O)
    eq2 = on_surface(surface, A)
    eq3 = on_surface(surface, B)
    eq4 = on_surface(surface, C)
    eq5 = on_surface(surface, D)
    eq6 = on_surface(surface, E)
    eq7 = on_surface(surface, F)
    s = solve([eq1, eq2, eq3, eq4, eq5, eq6, eq7], a, b, c, d, e, f, g, h, j, k)
    print(s)
    print(cross(A, E, F))
    print(cross(B, F, D))
    print(cross(C, D, E))
    G = cross(cross(A, E, F), cross(B, F, D), cross(C, D, E))
    print('G =', G)
    print('Is G on the surface?', cancel(on_surface(surface, G).subs(s)) == 0)

if __name__ == '__main__':
    main()